(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["attributes"] = factory();
	else
		root["CoCreate"] = root["CoCreate"] || {}, root["CoCreate"]["attributes"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "../CoCreate-components/CoCreate-attributes/src/CoCreate-attributes.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "../CoCreate-components/CoCreate-attributes/src/CoCreate-attributes.js":
/*!*****************************************************************************!*\
  !*** ../CoCreate-components/CoCreate-attributes/src/CoCreate-attributes.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _common = __webpack_require__(/*! ./common.js */ \"../CoCreate-components/CoCreate-attributes/src/common.js\");\n\n/*global CoCreate*/\nlet profile = [];\n\nfunction profileObserver(mutation, extra = {}) {\n  // get time\n  let date = new Date();\n  let time = date.getSeconds() + '.' + date.getMilliseconds();\n  profile.push({\n    time,\n    ...extra,\n    ...mutation\n  });\n}\n\nlet cache = new _common.elStore(); //todo: refactor to micro requirement\n\nfunction attributes({\n  document: initDocument,\n  exclude = \"\",\n  callback = () => {}\n}) {\n  this.exclude = exclude;\n  this.callback = callback;\n  this.initDocument = initDocument;\n}\n\nattributes.prototype.init = function init() {\n  this.scanNewElement();\n  this.initDocument.defaultView.CoCreate.observer.init({\n    name: \"ccStyle\",\n    observe: [\"attributes\"],\n    attributes: [\"data-attributes_target\", \"value\", \"data-attributes_unit\"],\n    include: \"INPUT, .pickr, cocreate-select\",\n    callback: async m => await this.watchInputChange(m)\n  });\n  this.initDocument.addEventListener(\"input\", async e => {\n    let input = e.target; // input.tagName == \"COCREATE-SELECT\" && \n\n    this.perInput(input, (inputMeta, element) => this.updateElement({ ...inputMeta,\n      input,\n      element,\n      isColl: true\n    }));\n  });\n  this.observerElements(this.initDocument.defaultView);\n  CoCreate.socket.listen(\"ccStyle\", args => this.listen(args));\n};\n\nattributes.prototype.listen = async function listen({\n  value,\n  unit,\n  type,\n  property,\n  camelProperty,\n  elementId,\n  elementSelector\n}) {\n  let input = this.initDocument.querySelector(`[data-attributes=${type}][data-attributes_sync=${property}]:not(${this.exclude})`);\n  let element = await this.complexSelector(elementSelector, (canvasDoc, selector) => canvasDoc.querySelector(selector));\n  this.updateElement({\n    type,\n    property,\n    camelProperty,\n    input,\n    element,\n    collValue: value,\n    unit,\n    isColl: false\n  });\n};\n\nattributes.prototype.collaborate = function collaborate({\n  element,\n  ...rest\n}) {\n  // if (value != input.value) return;\n  let elementId = element.getAttribute('data-element_id');\n  if (!elementId) return console.warn('no element id, collaboration skiped');\n  let elementSelector = rest.input.getAttribute('data-attributes_target');\n  CoCreate.message.send({\n    broadcast_sender: false,\n    rooms: \"\",\n    emit: {\n      message: \"ccStyle\",\n      data: { ...rest,\n        elementId,\n        elementSelector\n      }\n    }\n  });\n};\n\nattributes.prototype.scanNewElement = function scanNewElement() {\n  this.initDocument.querySelectorAll(`[data-attributes][data-attributes_sync]:not(${this.exclude})`).forEach(async input => {\n    this.perInput(input, (inputMeta, element) => this.updateInput({ ...inputMeta,\n      input,\n      element,\n      isColl: true\n    }));\n  });\n};\n\nattributes.prototype.observerElements = function observerElements(initWindow) {\n  initWindow.CoCreate.observer.init({\n    observe: [\"attributes\", \"characterData\"],\n    callback: mutation => {\n      let element = mutation.target;\n      if (!element) return;\n      this.getInputFromElement(mutation.target).forEach(input => {\n        let inputMeta = this.validateInput(input);\n        this.updateInput({ ...inputMeta,\n          input,\n          element\n        });\n      });\n    }\n  });\n}; //convention based (all elements should use data-elememet_id and it's faster)\n// made it also support \"id\"\n\n\nattributes.prototype.getInputFromElement = function getInputFromElement(element) {\n  let elId = element.getAttribute('data-element_id') || element.id && `\"#${element.id}\"`;\n  if (elId) return this.initDocument.querySelectorAll(`[data-attributes_target=${elId}]`);\n  return [];\n}; // todo: discuss with\n// attributes.prototype.getInputFromElement = function getInputFromElement(element) {\n//     // let inputs = [];\n//     //todo: fix add textarea\n//     let elId = element.getAttribute('data-element_id');\n//     if(elId)\n//      this.initDocument.querySelectorAll(`[data-attributes_target]`).forEach\n// }\n\n\nattributes.prototype.watchInputChange = async function watchInputChange(mutation) {\n  try {\n    let element,\n        input = mutation.target;\n    let inputMeta = this.validateInput(input);\n    element = inputMeta && (await this.getElementFromInput(input));\n    if (!element) return;\n\n    if (mutation.attributeName === \"data-attributes_target\") {\n      // if (element) \n      this.updateInput({ ...inputMeta,\n        input,\n        element\n      }); // element.isFirst = element.isFirst === true ? false : true;\n    } else if (mutation.attributeName === \"data-attributes_unit\") {\n      // if (element.isFirst) return;\n      this.updateElement({ ...inputMeta,\n        input,\n        element,\n        isColl: true\n      });\n    }\n  } catch (err) {}\n};\n\nattributes.prototype.perInput = async function perInput(input, callback) {\n  try {\n    let inputMeta, element;\n    inputMeta = this.validateInput(input);\n    element = inputMeta && (await this.getElementFromInput(input));\n    if (!element) return;\n    callback(inputMeta, element);\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nattributes.prototype.validateInput = function validateInput(input) {\n  let type = input.getAttribute(\"data-attributes\");\n\n  if (!type) {\n    // console.warn(\"cc-style: input doesn't have data-attributes\")\n    return;\n  }\n\n  let property = input.getAttribute(\"data-attributes_sync\");\n\n  if (!property) {\n    // console.warn(\"cc-style: input doesn't have data-attributes\")\n    return;\n  }\n\n  type = type.toLowerCase();\n  let camelProperty = (0, _common.toCamelCase)(property);\n  property = property.toLowerCase();\n  return {\n    type,\n    property,\n    camelProperty\n  };\n};\n\nattributes.prototype.updateElementByValue = function updateElementByValue({\n  type,\n  property,\n  camelProperty,\n  input,\n  element,\n  inputValue,\n  hasCollValue\n}) {\n  let computedStyles, value, removeValue, hasUpdated, unit;\n\n  switch (type) {\n    case 'property':\n      if (element[camelProperty] != inputValue) {\n        element[camelProperty] = inputValue;\n        return true;\n      } else return false;\n\n    case 'attribute':\n      switch (property) {\n        case 'style':\n          if (typeof inputValue == 'string') {\n            let style = (0, _common.parseCssRules)(inputValue);\n            Object.assign(element.style);\n            return Object.keys(style).length;\n          } else {\n            value = {}, removeValue = {};\n            inputValue.forEach(inputSValue => {\n              let parse = (0, _common.parseCssRules)(inputSValue.value);\n              if (inputSValue.checked) Object.assign(value, parse);else Object.assign(removeValue, parse);\n            });\n            let elStyle = (0, _common.parseCssRules)(element.getAttribute('style'));\n\n            for (let [key, value] of Object.entries(elStyle)) {\n              if (removeValue.hasOwnProperty(key)) delete elStyle[key];\n            }\n\n            Object.assign(elStyle, value);\n            let strStyle = \"\";\n\n            for (let [key, value] of Object.entries(elStyle)) strStyle += `${key}: ${value};`;\n\n            element.setAttribute('style', strStyle); //todo: better way to save elStyle when getting and here to compare\n\n            return Object.keys(elStyle).length;\n          }\n\n        case 'class':\n          if (typeof inputValue == 'string') {\n            let classNames = inputValue.split(' ');\n            classNames.forEach(className => {\n              className && element.classList.add(className);\n            });\n            return classNames.length;\n          } else {\n            value = [], removeValue = [];\n            inputValue.forEach(inputSValue => {\n              let parse = inputSValue.value.split(' ');\n              if (inputSValue.checked) value = value.concat(parse);else removeValue = removeValue.concat(parse);\n            });\n            removeValue.forEach(className => element.classList.remove(className));\n            value.forEach(className => element.classList.add(className)); //todo: fix\n\n            return true;\n          }\n\n        default:\n          if (typeof inputValue == 'string') {\n            return _common.setAttributeIfDif.call(element, property, inputValue);\n          } else {\n            for (let inputSValue of inputValue) {\n              if (inputSValue.checked) {\n                // unconventional change\n                if (property === 'data-attributes_unit' && ['auto', 'inherit', 'initial'].includes(inputSValue.value)) {\n                  element.value = inputSValue.value;\n\n                  _common.removeAllSelectedOptions.call(input);\n                } else // unconventional change\n                  return _common.setAttributeIfDif.call(element, property, inputSValue.value);\n              }\n            }\n          }\n\n          break;\n      }\n\n      break;\n\n    case 'classstyle':\n      unit = input.getAttribute('data-attributes_unit') || '';\n      value = inputValue && !hasCollValue ? inputValue + unit : inputValue;\n      value = value || '';\n      computedStyles = this.getRealStaticCompStyle(element);\n      return (0, _common.setStyleClassIfDif)(element, {\n        property,\n        camelProperty,\n        value,\n        computedStyles\n      });\n\n    case 'style':\n      unit = input.getAttribute('data-attributes_unit') || '';\n      value = inputValue && !hasCollValue ? inputValue + unit : inputValue;\n      value = value || '';\n      computedStyles = this.getRealStaticCompStyle(element);\n      return _common.setStyleIfDif.call(element, {\n        property,\n        camelProperty,\n        value,\n        computedStyles\n      });\n  }\n};\n\nattributes.prototype.updateElement = function updateElement({\n  input,\n  element,\n  collValue,\n  isColl,\n  unit,\n  ...rest\n}) {\n  let inputValue = collValue || this.getInputValue(input);\n  inputValue = unit ? inputValue + unit : inputValue;\n  let hasUpdated = this.updateElementByValue({ ...rest,\n    input,\n    element,\n    inputValue,\n    hasCollValue: !!collValue\n  });\n  cache.reset(element);\n  let params = {\n    value: inputValue,\n    unit: input.getAttribute('data-attributes_unit'),\n    input,\n    element,\n    ...rest\n  };\n  hasUpdated && isColl && this.collaborate(params);\n  hasUpdated && !isColl && this.callback(params); // not needed since crdt\n  // when function called on collboration\n  // todo: use setInputValue directly in updateElementByValue\n  // if (newValue) {\n  //     updateInput({...rest, element, input, })\n  // }\n};\n\nattributes.prototype.updateInput = function updateInput({\n  type,\n  property,\n  camelProperty,\n  element,\n  input\n}) {\n  let computedStyles, value, value2, styleValue, unit;\n  if (!input) return console.error('CoCreate Attributes: input not found/dev');\n\n  switch (type) {\n    case 'property':\n      value = element[camelProperty];\n      break;\n\n    case 'attribute':\n      value = element.getAttribute(property); // setAttributeIfDif.call(input, property, value || '')\n\n      break;\n\n    case 'classstyle':\n      let ccStyle = (0, _common.getCoCreateStyle)(element.classList);\n      if (ccStyle[camelProperty]) value2 = ccStyle[camelProperty];else {\n        computedStyles = this.getRealStaticCompStyle(element);\n        value2 = computedStyles[camelProperty];\n      }\n\n      if (!value2) {\n        return console.warn(`\"${property}\" can not be found in style object`);\n      }\n\n      [styleValue, unit] = (0, _common.parseUnit)(value2);\n      value = styleValue;\n\n      _common.setAttributeIfDif.call(input, \"data-attributes_unit\", unit);\n\n      break;\n\n    case 'style':\n      computedStyles = this.getRealStaticCompStyle(element);\n      value2 = computedStyles[camelProperty];\n\n      if (!value2) {\n        return console.warn(`\"${property}\" can not be found in style object`);\n      }\n\n      [styleValue, unit] = (0, _common.parseUnit)(value2);\n      value = styleValue;\n\n      _common.setAttributeIfDif.call(input, \"data-attributes_unit\", unit);\n\n    default:\n      break;\n  }\n\n  this.setInputValue(input, value);\n};\n\nattributes.prototype.setInputValue = function setInputValue(input, value) {\n  let inputType = input.tagName.toLowerCase() || input.classList.has('.pickr') && 'pickr';\n\n  switch (inputType) {\n    case 'input':\n      switch (input.type) {\n        case 'checkbox':\n        case 'radio':\n          input.checked = value == input.value ? true : false;\n          break;\n\n        default:\n          input.value = value;\n      }\n\n      break;\n\n    case \"textarea\":\n      input.value = value;\n      break;\n\n    case 'select':\n      let options = Array.from(input.options);\n      options.forEach(option => {\n        if (value == option.value) input.selectedIndex = options.indexOf(option);\n      });\n      break;\n\n    case 'cocreate-select':\n      (0, _common.renderOptions)(input, value);\n      break;\n\n    case 'pickr':\n      // todo: how to perform validation\n      let pickrIns = CoCreate.pickr.refs.get(input);\n      CoCreate.pickr.disabledEvent = true;\n      pickrIns.setColor(style);\n      CoCreate.pickr.disabledEvent = false;\n\n    default:\n      console.warn('CoCreateStyle: unidentified input: ', inputType, 'input ', input);\n  }\n};\n\nattributes.prototype.packMultiValue = function packMultiValue({\n  inputs,\n  stateProperty,\n  valueProperty = \"value\",\n  forceState\n}) {\n  let value = [];\n  Array.from(inputs).forEach(input => {\n    value.push({\n      checked: forceState || input[stateProperty],\n      value: input[valueProperty] || input.getAttribute(valueProperty)\n    });\n  });\n  return value;\n};\n\nattributes.prototype.getInputValue = function getInputValue(input) {\n  if (!input) return;\n  let inputType = input.tagName.toLowerCase() || input.classList.has('.pickr') && 'pickr';\n\n  switch (inputType) {\n    case 'input':\n      switch (input.type) {\n        case 'checkbox':\n        case 'radio':\n          return this.packMultiValue({\n            inputs: this.initDocument.getElementsByName(input.name),\n            stateProperty: 'checked'\n          });\n\n        default:\n          return input.value;\n      }\n\n    case \"textarea\":\n      return input.value;\n\n    case 'select':\n      return this.packMultiValue({\n        inputs: input.options,\n        stateProperty: 'selected'\n      });\n\n    case 'cocreate-select':\n      return this.packMultiValue({\n        inputs: input.querySelectorAll(\":scope > [selected]\"),\n        forceState: true\n      });\n\n    case 'pickr':\n      // todo: how to perform validation\n      // if (!CoCreate.pickr.refs.has(input)) return; \n      let pickrIns = CoCreate.pickr.refs.get(input);\n      return pickrIns.getColor().toHEXA().toString();\n\n    default:\n      console.warn('CoCreateStyle: unidentified input');\n      break;\n  }\n};\n\nattributes.prototype.getElementFromInput = async function getElementFromInput(input) {\n  let id = input.getAttribute(\"data-attributes_target\");\n\n  if (id) {\n    if (id.indexOf(';') !== -1) {\n      let el = await this.complexSelector(id, (canvasDoc, selector) => canvasDoc.querySelector(selector));\n      return el;\n    } else return this.initDocument.querySelector(id);\n  } else return false;\n};\n\nattributes.prototype.getRealStaticCompStyle = function getRealStaticCompStyle(element) {\n  if (cache.get(element, 'valid')) return cache.get(element, 'computedStyles');\n  setTimeout(() => {\n    cache.reset(element);\n  }, 5000);\n  let oldDispaly = element.style.display;\n  element.style.display = \"none\";\n  let computedStylesLive = window.getComputedStyle(element);\n  let computedStyles = Object.assign({}, computedStylesLive);\n  computedStyles.display = oldDispaly;\n  element.style.display = oldDispaly;\n  if (element.getAttribute(\"style\") == \"\") element.removeAttribute(\"style\");\n  element.removeAttribute('no-observe');\n  cache.spread(element, {\n    computedStyles,\n    valid: true\n  });\n  return computedStyles;\n};\n\nattributes.prototype.complexSelector = async function complexSelector(comSelector, callback) {\n  let [canvasSelector, selector] = comSelector.split(';');\n  let canvas = document.querySelector(canvasSelector);\n\n  if (!canvas) {\n    console.warn('complex selector canvas now found for', comSelector);\n    return;\n  }\n\n  if (canvas.contentDocument.readyState === 'loading') {\n    try {\n      await new Promise((resolve, reject) => {\n        canvas.contentWindow.addEventListener('load', e => resolve());\n      });\n    } catch (err) {\n      console.error('iframe can not be loaded');\n    }\n  }\n\n  this.observerElements(canvas.contentWindow);\n  return callback(canvas.contentWindow.document, selector);\n}; // attributes.prototype.getInputs = function getInputs(element) {\n//     let inputs = [];\n//     let allInputs = Array.from(document.getElementsByTagName(\"input\"));\n//     allInputs.forEach((inputCandidate) => {\n//         let inputMeta = getInputMetaData(inputCandidate);\n//         if (!inputMeta) return;\n//         let allReferencedEl = allFrame((frame) =>\n//             frame.querySelectorAll(\n//                 inputMeta.input.getAttribute(\"data-attributes_target\")\n//             )\n//         );\n//         if (Array.from(allReferencedEl).includes(element)) {\n//             inputs.push(inputMeta.input);\n//         }\n//     });\n//     return inputs;\n// }\n//attributes.prototype.perInput =  async function perInput(input, callback) {\n//     let inputMeta, element, group = input.getAttribute(\"data-attributes_group\");\n//     if (group) {\n//         [inputMeta, element] = getInputsMetaData(input);\n//     } else {\n//         inputMeta = validateInput(input);\n//         element = await getElementFromInput(input);\n//     }\n//     if (!inputMeta || !element) return;\n//     if (Array.isArray(inputMeta))\n//         inputMeta.forEach(async(metas) => callback(metas, element))\n//     else\n//         callback(inputMeta, element)\n// }\n//attributes.prototype.getInputsMetaData =  function getInputsMetaData(input) {\n//     let list = [],\n//         inputs = [];\n//     let element = getElementFromInput(input)\n//     let realInputs = input.querySelectorAll(group);\n//     realInputs.forEach(inp => {\n//         //todo: group is static \n//         inputs.push(inp)\n//         list.push(validateInput(inp))\n//     })\n//     groupEl.set(input, inputs);\n//     return [list, element];\n// }\n// window.addEventListener('load', () => {\n//     let attribute = new attributes({ document, exclude: '#ghostEffect,.vdom-item ' })\n//     attribute.init()\n// })\n\n\nvar _default = {\n  init: params => {\n    let s = new attributes(params);\n    s.init();\n    return s;\n  }\n};\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../CoCreate-components/CoCreate-attributes/src/CoCreate-attributes.js\n");

/***/ }),

/***/ "../CoCreate-components/CoCreate-attributes/src/common.js":
/*!****************************************************************!*\
  !*** ../CoCreate-components/CoCreate-attributes/src/common.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parseClassRules = parseClassRules;\nexports.getCoCreateStyle = getCoCreateStyle;\nexports.setStyleClassIfDif = setStyleClassIfDif;\nexports.setAttributeIfDif = setAttributeIfDif;\nexports.setStyleIfDif = setStyleIfDif;\nexports.removeAllSelectedOptions = removeAllSelectedOptions;\nexports.renderOptions = renderOptions;\nexports.parseCssRules = parseCssRules;\nexports.rgba2hex = rgba2hex;\nexports.parseUnit = parseUnit;\nexports.toCamelCase = toCamelCase;\nexports.elStore = elStore;\n\n/*global CoCreate*/\nfunction parseClassRules(str) {\n  return str.split(' ').filter(cln => cln);\n}\n\nfunction getCoCreateStyle(classList) {\n  let styles = {};\n  classList.forEach(classname => {\n    let [name, value] = classname.split(\":\");\n    styles[toCamelCase(name)] = value;\n  });\n  return styles;\n}\n\nfunction setStyleClassIfDif(element, {\n  property,\n  camelProperty,\n  value,\n  computedStyles\n}) {\n  let classList = element.classList;\n  let styleList = new Map();\n  classList.forEach(classname => {\n    let [name, value] = classname.split(\":\");\n    value && styleList.set(name, value);\n  });\n  let elValue = styleList.get(property);\n\n  if (value) {\n    if (elValue) {\n      if (elValue != value) return classList.replace(`${property}:${elValue}`, `${property}:${value}`);\n    } else if (computedStyles[camelProperty] != value && !classList.has(`${property}:${value}`)) {\n      classList.add(`${property}:${value}`);\n      return true;\n    }\n  } else {\n    if (classList.contains(`${property}:${elValue}`)) {\n      classList.remove(`${property}:${elValue}`);\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction setAttributeIfDif(property, value) {\n  if (this.getAttribute(property) !== value) {\n    if (value) this.setAttribute(property, value);else this.removeAttribute(property);\n    return true;\n  }\n\n  return false;\n}\n\nfunction setStyleIfDif({\n  property,\n  camelProperty,\n  value,\n  computedStyles\n}) {\n  if (computedStyles[camelProperty] && computedStyles[camelProperty] !== value) {\n    this.style[property] = value;\n    return true;\n  } else return false;\n} // CoCreate Select helper\n// export function getAllSelectedOptions() {\n//     let options = this.querySelectorAll(\":scope > [selected]\");\n//     return Array.from(options).map((o) => o.getAttribute(\"value\"));\n// };\n\n\nfunction removeAllSelectedOptions() {\n  let options = this.querySelectorAll(\":scope > [selected]\");\n  return Array.from(options).forEach(o => o.remove());\n}\n\n; // export function getAllOptions() {\n//     let options = this.querySelectorAll(\":scope > ul > [value]\");\n//     return Array.from(options).map((o) => o.getAttribute(\"value\"));\n// };\n\nfunction renderOptions(input, arrValue) {\n  if (arrValue && arrValue.length) CoCreate.select.renderValue(input, arrValue);else removeAllSelectedOptions.call(input);\n} // CoCreate Select helper end  \n\n\nfunction parseCssRules(str) {\n  let styleObject = {};\n  if (str.split) str.split(\";\").forEach(rule => {\n    let ruleSplit = rule.split(\":\");\n    let key = ruleSplit.shift().trim();\n    let value = ruleSplit.join().trim();\n    if (key) styleObject[key] = value;\n  });\n  return styleObject;\n}\n\nfunction rgba2hex(orig) {\n  let a,\n      isPercent,\n      rgb = orig.replace(/\\s/g, '').match(/^rgba?\\((\\d+),(\\d+),(\\d+),?([^,\\s)]+)?/i),\n      alpha = (rgb && rgb[4] || \"\").trim(),\n      hex = rgb ? (rgb[1] | 1 << 8).toString(16).slice(1) + (rgb[2] | 1 << 8).toString(16).slice(1) + (rgb[3] | 1 << 8).toString(16).slice(1) : orig;\n\n  if (alpha !== \"\") {\n    a = alpha;\n  } else {\n    a = 1;\n  } // multiply before convert to HEX\n\n\n  a = (a * 255 | 1 << 8).toString(16).slice(1);\n  hex = hex + a;\n  return hex;\n}\n\nfunction parseUnit(style) {\n  let value = parseFloat(style);\n  if (isNaN(value)) return [style, ''];else {\n    let valueLength = (value + \"\").length;\n    return [value, style.substr(valueLength)];\n  }\n}\n\nfunction toCamelCase(str) {\n  let index = 0;\n\n  do {\n    index = str.indexOf(\"-\", index);\n\n    if (index !== -1) {\n      let t = str.substring(0, index);\n      t += String.fromCharCode(str.charCodeAt(index + 1) - 32);\n      t += str.substr(index + 2);\n      str = t;\n    } else break;\n  } while (true);\n\n  return str;\n} // export function setCCStyle({ property, camelProperty, value, computedStyles }) {\n//     let hasChanged = false;\n//     if (computedStyles[camelProperty]  && computedStyles[camelProperty] !== value) {\n//         for (let classname of this.classList) {\n//             let [name, styleValue] = classname.split(\":\");\n//             if (name === property && styleValue) {\n//                 if (value)\n//                     this.classList.replace(classname, property + \":\" + value);\n//                 else\n//                     this.classList.remove(classname)\n//                 hasChanged = true;\n//                 break;\n//             }\n//         }\n//         if (!hasChanged)\n//             this.classList.add(property + \":\" + value);\n//         return true;\n//     } else\n//         return false;\n// }\n\n\nfunction elStore() {\n  this.cache = new Map();\n\n  this.spread = function set(key, object) {\n    this.cache.set(key, { ...this.cache.get(key),\n      ...object\n    });\n  };\n\n  this.set = function set(key, property, value) {\n    this.cache.set(key, { ...this.cache.get(key),\n      [property]: value\n    });\n  };\n\n  this.get = function get(key, property) {\n    let value = this.cache.get(key);\n    return value ? value[property] : undefined;\n  };\n\n  this.reset = function reset(key) {\n    this.cache.delete(key);\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../CoCreate-components/CoCreate-attributes/src/common.js\n");

/***/ })

/******/ })["default"];
});
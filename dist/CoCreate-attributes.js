/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["CoCreateAttributes"] = factory();
	else
		root["CoCreateAttributes"] = factory();
})(this, function() {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/CoCreate-attributes.js":
/*!************************************!*\
  !*** ./src/CoCreate-attributes.js ***!
  \************************************/
/***/ (() => {

eval("function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/**\n * refactor:\n * refactor mutation observer to a component\n * refactor cc_select_utility, allFrame, parseCssRules, parseClassList to a global/general workspace\n */\n(function () {\n  //store all frames\n  var filters = [];\n  var allFrames = new Map();\n  var tools = {};\n  window.ccAttribute = {\n    init: init,\n    addFilter: addFilter\n  }; // first time load\n\n  window.addEventListener(\"load\", function () {\n    init({\n      windowObject: window,\n      docObject: document\n    });\n    window.CoCreateObserver.add({\n      observe: [\"attributes\", \"characterData\"],\n      task: function task(mutation) {\n        return triggerElementMutation(mutation);\n      }\n    });\n    window.CoCreateObserver.add({\n      name: \"ccAttribute\",\n      observe: [\"attributes\"],\n      attributes: [\"data-attribute_target\"],\n      task: function task(mutation) {\n        return updateInput(mutation.target);\n      }\n    });\n    allFrame(function (frame) {\n      return frame.querySelectorAll(\"[data-attribute_target]\");\n    }).forEach(function (input) {\n      return updateInput(input);\n    });\n  });\n\n  function updateInput(input) {\n    var elSelectorId = input.getAttribute(\"data-attribute_target\");\n    if (!elSelectorId) return;\n    var element = allFrame(function (frame) {\n      return frame.querySelector(elSelectorId);\n    })[0];\n    var read = input.getAttribute(\"data-attribute_sync\");\n    if (element && element.getAttribute(read)) fromInput(input, function (type, metadata) {\n      if (metadata && metadata[\"class\"] === \"toggle\") input.checked = fromElementToBoolean({\n        input: input,\n        element: element,\n        inputValue: input.getAttribute(\"value\"),\n        read: read\n      });else if (input.tagName == \"SELECT\") {\n        fromElementToSelect({\n          input: input,\n          element: element,\n          read: read\n        });\n      } else if (input.tagName == \"COCREATE-SELECT\") {\n        fromElementToCCSelect({\n          input: input,\n          element: element,\n          read: read\n        });\n      } else {\n        input.lastValue = input.value;\n        input.value = fromElementToText({\n          element: element,\n          read: read\n        }); // todo: up or bottom is correct which one?\n        //input.value = fromElementToText({ element, read });\n      }\n    });\n  }\n\n  function parseCssRules(str) {\n    var styleObject = {};\n    if (str.split) str.split(\";\").forEach(function (rule) {\n      var ruleSplit = rule.split(\":\");\n      var key = ruleSplit.shift().trim();\n      var value = ruleSplit.join().trim();\n      if (key) styleObject[key] = value;\n    });\n    return styleObject;\n  }\n\n  function parseCssRulesAsArray(str) {\n    if (str.split) return str.split(\";\").slice(0, -1).map(function (st) {\n      return st.trim();\n    });\n    return [];\n  }\n\n  function allFrame(callback) {\n    var result = new Set();\n\n    var _iterator = _createForOfIteratorHelper(allFrames),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var _step$value = _slicedToArray(_step.value, 2),\n            frameObject = _step$value[0],\n            frame = _step$value[1];\n\n        var callbackResult = callback(frame.document, frame.window);\n        if (callbackResult && typeof callbackResult[Symbol.iterator] === \"function\") callbackResult.forEach(function (el) {\n          return result.add(el);\n        });else if (callbackResult) result.add(callbackResult);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    return Array.from(result).filter(function (el) {\n      return !filters.some(function (filter) {\n        return el.matches(filter);\n      });\n    });\n  }\n\n  function init(_ref) {\n    var windowObject = _ref.windowObject,\n        docObject = _ref.docObject,\n        isIframe = _ref.isIframe,\n        frame = _ref.frame,\n        _ref$onCollaboration = _ref.onCollaboration,\n        onCollaboration = _ref$onCollaboration === void 0 ? function () {} : _ref$onCollaboration;\n    var ref;\n    tools.onCollaboration = onCollaboration;\n\n    if (isIframe) {\n      var frameWindow = frame.contentWindow;\n      var frameDocument = frameWindow.document || frame.contentDocument;\n      ref = {\n        frame: frame,\n        window: frameWindow,\n        document: frameDocument,\n        isIframe: true\n      };\n      allFrames.set(frame, ref);\n    } else {\n      ref = {\n        window: windowObject,\n        document: docObject,\n        isIframe: false\n      };\n      allFrames.set(\"main\", ref);\n    }\n\n    ref.window.addEventListener(\"load\", function () {\n      ref.window.CoCreateObserver.add({\n        observe: [\"attributes\", \"characterData\"],\n        task: function task(mutation) {\n          return triggerElementMutation(mutation);\n        }\n      });\n      ref.window.CoCreateObserver.add({\n        name: \"ccAttribute\",\n        observe: [\"attributes\"],\n        attributes: [\"data-attribute_target\"],\n        task: function task(mutation) {\n          return updateInput(mutation.target);\n        }\n      });\n    });\n\n    ref.window.HTMLElement.prototype.getAllSelectedOptions = function getAllSelectedOptions() {\n      var options = this.querySelectorAll(\":scope > [selected]\");\n      return Array.from(options).map(function (o) {\n        return o.getAttribute(\"value\");\n      });\n    };\n\n    ref.window.HTMLElement.prototype.getAllOptions = function getAllOptions() {\n      var options = this.querySelectorAll(\":scope > ul > [value]\");\n      return Array.from(options).map(function (o) {\n        return o.getAttribute(\"value\");\n      });\n    };\n\n    ref.document.addEventListener(\"input\", function (e) {\n      var input = e.target;\n      var elSelectorId = input.getAttribute(\"data-attribute_target\");\n      if (!elSelectorId) return;\n      var elements = allFrame(function (document) {\n        return document.querySelector(elSelectorId);\n      });\n      var read = e.target.getAttribute(\"data-attribute_sync\");\n      elements.forEach(function (element) {\n        fromInput(input, function (type, metadata) {\n          if (metadata && metadata.type === \"checkbox\") {\n            var status = input[metadata.read];\n            if (status) __addToElement(input, element, type, read);else __removeToElement(input, element, type, read);\n          } else if (metadata && metadata.type === \"radio\") {\n            __addToElement(input, element, type, read);\n\n            var inputs = allFrame(function (frame) {\n              return frame.getElementsByName(input.name);\n            });\n            inputs = Array.from(inputs);\n            var ourInputIndex = inputs.indexOf(input);\n            if (ourInputIndex !== -1) delete inputs[ourInputIndex];\n            inputs.forEach(function (input) {\n              if (input) __removeToElement(input, element, type, read);\n            });\n          } else if (metadata && metadata.type === \"select\") {\n            var selectedOptions = getSelectOptions(input, true);\n            var unSelectedOptions = getSelectOptions(input, false);\n\n            __addToElement(input, element, selectedOptions, read);\n\n            __removeToElement(input, element, unSelectedOptions, read);\n          } else if (metadata && metadata.type === \"cocreate-select\") {\n            var selectedOptions2 = input.getAllSelectedOptions(); // let unSelectedOptions2 = input\n            //   .getAllOptions()\n            //   .filter((o) => !selectedOptions2.includes(o));\n\n            __addToElement(input, element, selectedOptions2, read); // __removeToElement(input, element, unSelectedOptions2, read);\n\n          } else {\n            __removeToElement(input, element, \"lastValue\", read);\n\n            __addToElement(input, element, type, read);\n          }\n        });\n      });\n    });\n  } // if (input.tagName === \"COCREATE-SELECT\" && !input.selectOption) {\n  //   for (let [k, v] of Object.entries(cocreateUtility)) {\n  //     input[k] = v;\n  //   }\n  // }\n\n\n  function addFilter(selector) {\n    filters.push(selector);\n  } // inputs.forEach((input) => {\n  //   //add cc_select_utility\n  //   if (input.tagName === \"COCREATE-SELECT\") {\n  //     for (let [k, v] of Object.entries(cocreateUtility)) {\n  //       input[k] = v;\n  //     }\n  //   }\n  //   inputAddEventListener(input)\n  // });\n\n\n  function triggerElementMutation(mutation) {\n    var element;\n    var attributeName;\n\n    switch (mutation.type) {\n      case \"attributes\":\n        attributeName = mutation.attributeName;\n        element = mutation.target;\n        break;\n\n      case \"characterData\":\n        attributeName = \"innerText\";\n        element = mutation.target.parentElement;\n        break;\n    }\n\n    if (!element || element && element.getAttribute(\"data-attribute_sync\")) return;\n    var connectedInput = allFrame(function (frame) {\n      return frame.querySelectorAll(\"[data-attribute_target]\");\n    }).filter(function (input) {\n      if (input.getAttribute(\"data-attribute_sync\") !== attributeName) return false;\n      var query = input.getAttribute(\"data-attribute_target\");\n      var elements = allFrame(function (frame) {\n        return frame.querySelectorAll(query);\n      });\n      return elements.includes(element);\n    });\n    connectedInput.forEach(function (input) {\n      var read = input.getAttribute(\"data-attribute_sync\");\n      if (read === attributeName) fromInput(input, function (type, metadata) {\n        if (metadata && metadata[\"class\"] === \"toggle\") input.checked = fromElementToBoolean({\n          input: input,\n          element: element,\n          inputValue: input.getAttribute(\"value\"),\n          read: read\n        });else if (input.tagName == \"SELECT\") {\n          fromElementToSelect({\n            input: input,\n            element: element,\n            read: read\n          });\n        } else if (input.tagName == \"COCREATE-SELECT\") {\n          fromElementToCCSelect({\n            input: input,\n            element: element,\n            read: read\n          });\n        } else {\n          var inputValue = fromElementToText({\n            element: element,\n            read: read\n          });\n          if (input.value.trim() == inputValue) return;\n          input.lastValue = input.value;\n          input.value = inputValue;\n        }\n      });\n    });\n  }\n\n  function parseClassList(str) {\n    if (str.split) return str.split(\" \").map(function (st) {\n      return st.trim();\n    });\n    return [];\n  }\n\n  function isSubset(obj1, obj2) {\n    for (var _i2 = 0, _Object$entries = Object.entries(obj2); _i2 < _Object$entries.length; _i2++) {\n      var _Object$entries$_i = _slicedToArray(_Object$entries[_i2], 2),\n          key = _Object$entries$_i[0],\n          value = _Object$entries$_i[1];\n\n      if (obj1[key] !== value) return false;\n    }\n\n    return true;\n  }\n\n  function fromInput(input, callback) {\n    switch (input.tagName.toLowerCase()) {\n      case \"input\":\n        switch (input.type.toLowerCase()) {\n          case \"text\":\n          case \"color\":\n          case \"date\":\n            callback(\"value\");\n            break;\n\n          case \"checkbox\":\n            callback(\"value\", {\n              \"class\": \"toggle\",\n              type: \"checkbox\",\n              read: \"checked\"\n            });\n            break;\n\n          case \"radio\":\n            callback(\"value\", {\n              \"class\": \"toggle\",\n              type: \"radio\",\n              read: \"checked\"\n            });\n            break;\n\n          default:\n            callback(\"value\");\n        }\n\n        break;\n\n      case \"select\":\n        callback(\"value\", {\n          type: \"select\",\n          \"class\": input.multiple ? \"multiselect\" : \"select\"\n        });\n        break;\n\n      case \"textarea\":\n        callback(\"value\");\n        break;\n\n      case \"cocreate-select\":\n        callback(\"COCREATE-SELECT\", {\n          type: \"cocreate-select\",\n          \"class\": input.multiple ? \"multiselect\" : \"select\"\n        });\n        break;\n\n      default:\n        if (input.getAttribute(\"contenteditable\") !== null) callback(\"innerText\");else callback(\"value\");\n    }\n  }\n\n  function fromElementToBoolean(_ref2) {\n    var input = _ref2.input,\n        element = _ref2.element,\n        inputValue = _ref2.inputValue,\n        read = _ref2.read;\n\n    switch (read) {\n      case \"style\":\n        var parsedCss = parseCssRules(inputValue);\n        var elementStyle = element.style;\n        return isSubset(elementStyle, parsedCss);\n        break;\n\n      case \"class\":\n        var classList = parseClassList(inputValue);\n        var targetClassList = Array.from(element.classList);\n        return classList.every(function (className) {\n          return targetClassList.includes(className);\n        });\n        break;\n\n      default:\n        return element.getAttribute(read) ? true : false;\n    }\n  }\n\n  function fromElementToText(_ref3) {\n    var element = _ref3.element,\n        read = _ref3.read;\n\n    switch (read) {\n      case \"style\":\n        return element.getAttribute(read);\n        break;\n\n      case \"class\":\n        return element.classList.toString();\n        break;\n\n      case \"innerText\":\n        return element.innerText;\n        break;\n\n      default:\n        return element.getAttribute(read);\n    }\n  }\n\n  function __addToElement(input, element, type, read, values) {\n    if (!values) {\n      if (_typeof(type) === \"object\") values = type;else values = [input.getAttribute(type) || input[type]];\n      collaborate({\n        method: \"add\",\n        values: values,\n        element: element,\n        type: type,\n        read: read\n      });\n    }\n\n    values.forEach(function (value) {\n      switch (read) {\n        case \"style\":\n          if (!value) return;\n          var parsedCss = parseCssRules(value);\n          Object.assign(element.style, parsedCss);\n          break;\n\n        case \"class\":\n          // value\n          //   .split(\" \")\n          //   .forEach((classname) => element.classList.remove(classname));\n          if (!value) return;\n          value.split(\" \").forEach(function (classname) {\n            return classname && element.classList.add(classname);\n          });\n          break;\n\n        case \"innerText\":\n          element[read] = value;\n          triggerElementMutation({\n            type: \"characterData\",\n            target: {\n              parentElement: element\n            }\n          });\n          break;\n\n        default:\n          if (value) element.setAttribute(read, value);else element.removeAttribute(read);\n      }\n    });\n  }\n\n  function __removeToElement(input, element, type, read, values) {\n    if (!values) {\n      if (_typeof(type) === \"object\") values = type;else values = [input.getAttribute(type) || input[type]];\n      collaborate({\n        method: \"remove\",\n        values: values,\n        element: element,\n        type: type,\n        read: read\n      });\n    }\n\n    values.forEach(function (value) {\n      switch (read) {\n        case \"style\":\n          if (!value) return;\n          var parsedCss = parseCssRules(value);\n          Object.keys(parsedCss).forEach(function (key) {\n            if (parsedCss[key]) element.style[key] = \"\";\n          });\n          break;\n\n        case \"class\":\n          // value\n          //   .split(\" \")\n          //   .forEach((classname) => element.classList.remove(classname));\n          if (!value) return;\n          value.split(\" \").forEach(function (classname) {\n            return classname && element.classList.remove(classname);\n          });\n          break;\n\n        default: // element.removeAttribute(read);\n\n      }\n    });\n  }\n\n  function getSelectOptions(select, state) {\n    var options = Array.from(select.options);\n    return options.filter(function (o) {\n      return state === undefined ? true : o.selected == state;\n    }).map(function (o) {\n      return o.value;\n    });\n  }\n\n  function isObjectEqual(object1, object2) {\n    for (var _i3 = 0, _Object$entries2 = Object.entries(object1); _i3 < _Object$entries2.length; _i3++) {\n      var _Object$entries2$_i = _slicedToArray(_Object$entries2[_i3], 2),\n          key = _Object$entries2$_i[0],\n          value = _Object$entries2$_i[1];\n\n      if (object1[key] !== object2[key] || object1[key] === \"\") return false;\n    }\n\n    return true;\n  }\n\n  function fromElementToSelect(_ref4) {\n    var input = _ref4.input,\n        element = _ref4.element,\n        read = _ref4.read;\n\n    for (var i = 0, len = input.options.length; i < len; i++) {\n      switch (read) {\n        case \"style\":\n          var parsed = parseCssRules(input.options[i].value);\n          if (isObjectEqual(parsed, element.style)) input.options[i].selected = true;else input.options[i].selected = false; // if(unStyle.some(style => isObjectEqual(parsed, style)))\n\n          break;\n\n        case \"class\":\n          if (element.classList.contains(input.options[i].value)) input.options[i].selected = true;else input.options[i].selected = false;\n          break;\n\n        default:\n          if (element.getAttribute(read) == input.options[i].value) input.options[i].selected = true;else input.options[i].selected = false;\n      }\n    }\n  }\n\n  function fromElementToCCSelect(_ref5) {\n    var input = _ref5.input,\n        element = _ref5.element,\n        read = _ref5.read;\n    var options,\n        selOptions = [],\n        selOptions2;\n\n    switch (read) {\n      case \"style\":\n        // options = input.getAllOptions();\n        // for (let i = 0, len = options.length; i < len; i++) {\n        //   let parsed = parseCssRules(options[i]);\n        //   if (isObjectEqual(parsed, element.style))\n        //     selOptions.push( options[i] );\n        // }\n        // CoCreateSelect.renderValue(input, selOptions)\n        selOptions2 = parseCssRulesAsArray(element.getAttribute('style'));\n        CoCreateSelect.renderValue(input, selOptions2);\n        break;\n\n      case \"class\":\n        // options = input.getAllOptions();\n        // for (let i = 0, len = options.length; i < len; i++) {\n        //   if (element.classList.contains(options[i]))\n        //     selOptions.push( options[i] );\n        // }\n        // CoCreateSelect.renderValue(input, selOptions)\n        selOptions2 = parseClassList(element.getAttribute('class'));\n        CoCreateSelect.renderValue(input, selOptions2);\n        break;\n\n      default:\n        if (element.getAttribute(read)) CoCreateSelect.renderValue(input, element.getAttribute(read));\n      // todo: might break\n      // if (element.getAttribute(read) == options[i])\n      //   input.selectOption(options[i]);\n      // else input.unselectOption(options[i]);\n    }\n  }\n\n  CoCreateSocket.listen(\"ccAttribute\", function (_ref6) {\n    var method = _ref6.method,\n        values = _ref6.values,\n        element = _ref6.element,\n        type = _ref6.type,\n        read = _ref6.read;\n    element = allFrame(function (frame) {\n      return frame.querySelector(\"[data-element_id=\" + element + \"]\");\n    })[0];\n\n    if (method === \"add\") {\n      __addToElement(null, element, type, read, values);\n    } else if (method === \"remove\") {\n      __removeToElement(null, element, type, read, values);\n    }\n  });\n\n  function collaborate(data) {\n    tools.onCollaboration({\n      value: Array.isArray(data.values) ? data.values.join(' ') : data.values,\n      read: data.read,\n      element: data.element\n    });\n    CoCreate.sendMessage({\n      broadcast_sender: false,\n      rooms: \"\",\n      emit: {\n        message: \"ccAttribute\",\n        data: _objectSpread(_objectSpread({}, data), {}, {\n          element: data.element.getAttribute(\"data-element_id\")\n        })\n      }\n    });\n  }\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/CoCreate-attributes.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		if(__webpack_module_cache__[moduleId]) {
/******/ 			return __webpack_module_cache__[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	// module exports must be returned from runtime so entry inlining is disabled
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__("./src/CoCreate-attributes.js");
/******/ })()
.default;
});
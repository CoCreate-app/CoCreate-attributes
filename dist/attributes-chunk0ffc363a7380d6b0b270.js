/*! For license information please see attributes-chunk0ffc363a7380d6b0b270.js.LICENSE.txt */
(this.webpackChunkCoCreate_attributes=this.webpackChunkCoCreate_attributes||[]).push([["attributes-chunk"],{"../../CoCreateJS/node_modules/@cocreate/attributes/src/common.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "parseClassRules": () => (/* binding */ parseClassRules),\n/* harmony export */   "getCoCreateStyle": () => (/* binding */ getCoCreateStyle),\n/* harmony export */   "setStyleClassIfDif": () => (/* binding */ setStyleClassIfDif),\n/* harmony export */   "setAttributeIfDif": () => (/* binding */ setAttributeIfDif),\n/* harmony export */   "setStyleIfDif": () => (/* binding */ setStyleIfDif),\n/* harmony export */   "removeAllSelectedOptions": () => (/* binding */ removeAllSelectedOptions),\n/* harmony export */   "renderOptions": () => (/* binding */ renderOptions),\n/* harmony export */   "parseCssRules": () => (/* binding */ parseCssRules),\n/* harmony export */   "rgba2hex": () => (/* binding */ rgba2hex),\n/* harmony export */   "parseUnit": () => (/* binding */ parseUnit),\n/* harmony export */   "toCamelCase": () => (/* binding */ toCamelCase),\n/* harmony export */   "elStore": () => (/* binding */ elStore)\n/* harmony export */ });\n/* harmony import */ var _cocreate_select__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cocreate/select */ "../../CoCreateJS/node_modules/@cocreate/select/src/index.js");\n/*global CoCreate*/\n\nfunction parseClassRules(str) {\n    return str.split(\' \').filter(cln => cln);\n\n}\n\nfunction getCoCreateStyle(classList) {\n    let styles = {};\n    classList.forEach((classname) => {\n        let [name, value] = classname.split(":");\n        styles[toCamelCase(name)] = value;\n    });\n\n    return styles;\n}\n\n\n\n\nfunction setStyleClassIfDif(element, { property, camelProperty, value, computedStyles }) {\n    let classList = element.classList;\n    let styleList = new Map();\n    classList.forEach((classname) => {\n        let [name, value] = classname.split(":");\n        value && styleList.set(name, value);\n    });\n\n    let elValue = styleList.get(property);\n\n    if (value) {\n        if (elValue) {\n            if (elValue != value)\n                return classList.replace(`${property}:${elValue}`, `${property}:${value}`);\n        }\n        else if (computedStyles[camelProperty] != value && !classList.contains(`${property}:${value}`))\n        {\n            classList.add(`${property}:${value}`);\n            return true;\n        }\n\n    }\n    else {\n        if (classList.contains(`${property}:${elValue}`)) {\n            classList.remove(`${property}:${elValue}`);\n            return true;\n        }\n\n    }\n\n    return false\n}\n\n\nfunction setAttributeIfDif(property, value) {\n    if (this.getAttribute(property) !== value) {\n        if (value)\n            this.setAttribute(property, value);\n        else\n            this.removeAttribute(property)\n        return true;\n    }\n    return false;\n}\n\nfunction setStyleIfDif({ property, camelProperty, value, computedStyles }) {\n    if (computedStyles[camelProperty] && computedStyles[camelProperty] !== value) {\n        this.style[property] = value;\n        return true;\n    }\n    else return false;\n}\n\n\n// CoCreate Select helper\n// export function getAllSelectedOptions() {\n//     let options = this.querySelectorAll(":scope > [selected]");\n//     return Array.from(options).map((o) => o.getAttribute("value"));\n// };\n\nfunction removeAllSelectedOptions() {\n    let options = this.querySelectorAll(":scope > [selected]");\n    return Array.from(options).forEach((o) => o.remove());\n};\n\n// export function getAllOptions() {\n//     let options = this.querySelectorAll(":scope > ul > [value]");\n//     return Array.from(options).map((o) => o.getAttribute("value"));\n// };\n\nfunction renderOptions(input, arrValue) {\n    if (arrValue && arrValue.length)\n        _cocreate_select__WEBPACK_IMPORTED_MODULE_0__.default.renderValue(input, arrValue)\n    else\n        removeAllSelectedOptions.call(input)\n}\n// CoCreate Select helper end  \nfunction parseCssRules(str) {\n    let styleObject = {};\n    if (str.split)\n        str.split(";").forEach((rule) => {\n            let ruleSplit = rule.split(":");\n            let key = ruleSplit.shift().trim();\n            let value = ruleSplit.join().trim();\n            if (key) styleObject[key] = value;\n        });\n\n    return styleObject;\n}\n\n\n\n\n\n\n\n\n\n\n\n\nfunction rgba2hex(orig) {\n    let a, isPercent,\n        rgb = orig.replace(/\\s/g, \'\').match(/^rgba?\\((\\d+),(\\d+),(\\d+),?([^,\\s)]+)?/i),\n        alpha = (rgb && rgb[4] || "").trim(),\n        hex = rgb ?\n        (rgb[1] | 1 << 8).toString(16).slice(1) +\n        (rgb[2] | 1 << 8).toString(16).slice(1) +\n        (rgb[3] | 1 << 8).toString(16).slice(1) : orig;\n\n    if (alpha !== "") {\n        a = alpha;\n    }\n    else {\n        a = 1;\n    }\n    // multiply before convert to HEX\n    a = ((a * 255) | 1 << 8).toString(16).slice(1)\n    hex = hex + a;\n\n    return hex;\n}\n\n\n\nfunction parseUnit(style) {\n    let value = parseFloat(style);\n    if (isNaN(value))\n        return [style, \'\']\n    else {\n        let valueLength = (value + "").length;\n        return [value, style.substr(valueLength)];\n\n    }\n}\n\n\nfunction toCamelCase(str) {\n    let index = 0;\n    do {\n        index = str.indexOf("-", index);\n        if (index !== -1) {\n            let t = str.substring(0, index);\n            t += String.fromCharCode(str.charCodeAt(index + 1) - 32);\n            t += str.substr(index + 2);\n            str = t;\n        }\n        else break;\n    } while (true);\n    return str;\n}\n\n// export function setCCStyle({ property, camelProperty, value, computedStyles }) {\n//     let hasChanged = false;\n//     if (computedStyles[camelProperty]  && computedStyles[camelProperty] !== value) {\n//         for (let classname of this.classList) {\n//             let [name, styleValue] = classname.split(":");\n//             if (name === property && styleValue) {\n//                 if (value)\n//                     this.classList.replace(classname, property + ":" + value);\n//                 else\n//                     this.classList.remove(classname)\n//                 hasChanged = true;\n//                 break;\n//             }\n//         }\n//         if (!hasChanged)\n//             this.classList.add(property + ":" + value);\n//         return true;\n//     } else\n//         return false;\n// }\n\n\n\n\n\n\n\nfunction elStore() {\n    this.cache = new Map();\n    this.spread = function set(key, object) {\n        this.cache.set(key, { ...this.cache.get(key), ...object })\n    }\n    this.set = function set(key, property, value) {\n        this.cache.set(key, { ...this.cache.get(key), [property]: value })\n    }\n    this.get = function get(key, property) {\n        let value = this.cache.get(key)\n        return value ? value[property] : undefined;\n    }\n    this.reset = function reset(key) {\n        this.cache.delete(key)\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../CoCreateJS/node_modules/@cocreate/attributes/src/common.js\n')},"../../CoCreateJS/node_modules/@cocreate/attributes/src/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common.js */ \"../../CoCreateJS/node_modules/@cocreate/attributes/src/common.js\");\n/* harmony import */ var _cocreate_observer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @cocreate/observer */ \"../../CoCreateJS/node_modules/@cocreate/observer/src/index.js\");\n/* harmony import */ var _cocreate_crdt__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @cocreate/crdt */ \"../../CoCreateJS/node_modules/@cocreate/crdt/src/index.js\");\n/* harmony import */ var _cocreate_pickr__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @cocreate/pickr */ \"../../CoCreateJS/node_modules/@cocreate/pickr/src/index.js\");\n/* harmony import */ var _cocreate_cocreatejs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @cocreate/cocreatejs */ \"../../CoCreateJS/node_modules/@cocreate/cocreatejs/src/index.js\");\n/*global CoCreate*/\n\n\n\n\n\n\n\n// // dev start\n// import '@cocreate/select'\n// import selected from '@cocreate/selected'\n// import domToText from '@cocreate/domToText'\n\n\n// selected.config({\n//     srcDocument: document,\n//     destDocument: document,\n//     selector: \"#container *\",\n//     target: \"[data-attributes]:not(.styleunit)\",\n//     callback: (element, target) => {\n//         target.setAttribute('data-attributes_target', `[data-element_id=${element.getAttribute('data-element_id')}]`);\n//         target.setAttribute('name', target.id + '-' + element.getAttribute('data-element_id'))\n//     }\n// });\n\n\n\n\n\n\n// //profile observer\n// let profile = []\n\n// function profileObserver(mutation, extra = {}) {\n\n//     // get time\n//     let date = new Date();\n//     let time = date.getSeconds() + '.' + date.getMilliseconds()\n//     profile.push({ time, ...extra, ...mutation })\n// }\n\n\n// // dev end\n\nlet cache = new _common_js__WEBPACK_IMPORTED_MODULE_0__.elStore();\nlet types = ['attribute', 'classstyle', 'style', 'innerText']\n\nfunction attributes({ document: initDocument, exclude = \"\", callback = () => {} }) {\n    this.exclude = exclude;\n    this.callback = callback;\n    this.initDocument = initDocument;\n\n}\n\n\nattributes.prototype.init = function init() {\n\n\n    this.scanNewElement()\n    // this.initDocument.defaultView.CoCreate.observer.init({\n    _cocreate_observer__WEBPACK_IMPORTED_MODULE_1__.default.init({\n        name: \"ccAttribute\",\n        observe: [\"attributes\"],\n        attributes: [\"data-attributes_target\", \"value\", \"data-attributes_unit\"],\n        include: \"INPUT, .pickr, cocreate-select\",\n        callback: async m => await this.watchInputChange(m),\n    });\n    this.initDocument.addEventListener(\"input\", async(e) => {\n        let input = e.target;\n        // input.tagName == \"COCREATE-SELECT\" && \n        this.perInput(input, (inputMeta, element) =>\n            this.updateElement({ ...inputMeta, input, element, isColl: true }))\n    });\n\n\n    // observer elements change to reflect inputs (data-units)\n    this.observerElements(this.initDocument.defaultView);\n\n    _cocreate_cocreatejs__WEBPACK_IMPORTED_MODULE_4__.socket.listen(\"ccStyle\", (args) => this.listen(args));\n\n\n\n}\n\n\nattributes.prototype.listen = async function listen({\n    value,\n    unit,\n    type,\n    property,\n    camelProperty,\n    elementId,\n    elementSelector\n}) {\n\n\n    let selector = property ? `[data-attributes=${type}][data-attributes_property=${property}]:not(${this.exclude})` : `[data-attributes=${type}]:not(${this.exclude})`;\n\n    let input = this.initDocument.querySelector(\n        selector\n    );\n    // if (selector.indexOf(';') !== -1)\n    // let element\n    let element = await this.complexSelector(elementSelector,\n        (canvasDoc, selector) => canvasDoc.querySelector(selector));\n    // else\n    //     element = this.initDocument.querySelector(elementSelector)\n\n    this.updateElement({ type, property, camelProperty, input, element, collValue: value, unit, isColl: false })\n\n\n}\n\nattributes.prototype.collaborate = function collaborate({\n    element,\n    ...rest\n}) {\n    // if (value != input.value) return;\n    let elementId = element.getAttribute('data-element_id');\n    if (!elementId)\n        return console.warn('no element id, collaboration skiped');\n    let elementSelector = rest.input.getAttribute('data-attributes_target');\n\n\n\n    _cocreate_cocreatejs__WEBPACK_IMPORTED_MODULE_4__.message.send({\n        broadcast_sender: false,\n        rooms: \"\",\n        emit: {\n            message: \"ccStyle\",\n            data: {\n                ...rest,\n                elementId,\n                elementSelector\n            },\n\n        },\n    });\n}\n\nattributes.prototype.scanNewElement = function scanNewElement() {\n    this.initDocument.querySelectorAll(`[data-attributes]:not(${this.exclude})`).forEach(async(input) => {\n        this.perInput(input, (inputMeta, element) =>\n            this.updateInput({ ...inputMeta, input, element, isColl: true }))\n    });\n}\nattributes.prototype.observerElements = function observerElements(initWindow) {\n    // initWindow.CoCreate.observer.init({\n    // let observer = initWindow.CoCreate.observer ?\n    _cocreate_observer__WEBPACK_IMPORTED_MODULE_1__.default.init({\n        name: 'ccAttribute',\n        observe: [\"attributes\", \"characterData\"],\n        callback: (mutation) => {\n            let element = mutation.target;\n            if (!element) return;\n            this.getInputFromElement(mutation.target).forEach(input => {\n                let inputMeta = this.validateInput(input);\n                if (!inputMeta) return;\n                this.updateInput({ ...inputMeta, input, element });\n            })\n\n        },\n    });\n}\n\n//convention based (all elements should use data-elememet_id and it's faster)\n// made it also support \"id\"\nattributes.prototype.getInputFromElement = function getInputFromElement(element) {\n\n\n    let elId = element.getAttribute('data-element_id') || element.id && `\"#${element.id }\"`;\n    if (elId)\n        return this.initDocument.querySelectorAll(`[data-attributes_target=${elId}]`)\n    return []\n\n}\n\n// todo: discuss with\n// attributes.prototype.getInputFromElement = function getInputFromElement(element) {\n\n//     // let inputs = [];\n\n//     //todo: fix add textarea\n//     let elId = element.getAttribute('data-element_id');\n//     if(elId)\n//      this.initDocument.querySelectorAll(`[data-attributes_target]`).forEach\n\n// }\n\nattributes.prototype.watchInputChange = async function watchInputChange(mutation) {\n    try {\n        // return;\n        let element, input = mutation.target;\n        let inputMeta = this.validateInput(input);\n\n\n        element = inputMeta && await this.getElementFromInput(input);\n\n        if (!element) return\n\n\n        if (mutation.attributeName === \"data-attributes_target\") {\n            // if (element) \n            this.updateInput({ ...inputMeta, input, element });\n            // element.isFirst = element.isFirst === true ? false : true;\n        }\n        else if (mutation.attributeName === \"data-attributes_unit\") {\n            // if (element.isFirst) return;\n            this.updateElement({ ...inputMeta, input, element, isColl: true })\n        }\n    }\n    catch (err) {\n\n    }\n\n}\n\n\nattributes.prototype.perInput = async function perInput(input, callback) {\n\n\n    try {\n        let inputMeta, element;\n        inputMeta = this.validateInput(input);\n        element = inputMeta && await this.getElementFromInput(input);\n        if (!element) return;\n        callback(inputMeta, element)\n    }\n    catch (error) {\n        console.error(error)\n    }\n\n}\n\n\n\n\nattributes.prototype.validateInput = function validateInput(input) {\n    let type = input.getAttribute(\"data-attributes\");\n    if (!type) {\n        // console.warn(\"cc-style: input doesn't have data-attributes\")\n        return;\n    }\n    type = type.toLowerCase();\n\n\n    let camelProperty, property = input.getAttribute(\"data-attributes_property\");\n    if (property) {\n        camelProperty = (0,_common_js__WEBPACK_IMPORTED_MODULE_0__.toCamelCase)(property);\n        property = property.toLowerCase();\n    }\n\n\n    return {\n        type,\n        property,\n        camelProperty,\n\n    };\n}\n\n\nattributes.prototype.updateElementByValue = function updateElementByValue({ type, property, camelProperty, input, element, inputValue, hasCollValue }) {\n    let computedStyles, value, removeValue, hasUpdated, unit, parsedInt;\n    switch (type) {\n\n\n\n        case 'classstyle':\n            parsedInt = parseInt(value)\n\n            unit = (input.getAttribute('data-attributes_unit') || '');\n            value = inputValue && !hasCollValue ? inputValue + unit : inputValue;\n            value = value || '';\n            computedStyles = this.getRealStaticCompStyle(element);\n            return (0,_common_js__WEBPACK_IMPORTED_MODULE_0__.setStyleClassIfDif)(element, {\n                property,\n                camelProperty,\n                value,\n                computedStyles\n            })\n\n\n        case 'style':\n            unit = (input.getAttribute('data-attributes_unit') || '');\n            value = inputValue && !hasCollValue ? inputValue + unit : inputValue;\n            value = value || '';\n            computedStyles = this.getRealStaticCompStyle(element);\n            return _common_js__WEBPACK_IMPORTED_MODULE_0__.setStyleIfDif.call(element, { property, camelProperty, value, computedStyles })\n\n        case 'innerText':\n            if (element.innerText != inputValue) {\n                element.innerText = inputValue;\n                return true;\n            }\n            else return false;\n        default:\n            if (typeof inputValue == 'string') {\n\n                return _common_js__WEBPACK_IMPORTED_MODULE_0__.setAttributeIfDif.call(element, type, inputValue)\n            }\n            else {\n                for (let inputSValue of inputValue) {\n                    if (inputSValue.checked) {\n                        // unconventional change\n                        if (type === 'data-attributes_unit' && ['auto', 'inherit', 'initial'].includes(inputSValue.value)) {\n                            element.value = inputSValue.value;\n                            _common_js__WEBPACK_IMPORTED_MODULE_0__.removeAllSelectedOptions.call(input)\n                        }\n                        else\n                            // unconventional change\n                            return _common_js__WEBPACK_IMPORTED_MODULE_0__.setAttributeIfDif.call(element, type, inputSValue.value)\n\n                    }\n\n                }\n\n\n            }\n\n            break;\n\n    }\n\n\n}\n\n\nattributes.prototype.removeZeros = function removeZeros(str) {\n    let i = 0;\n    for (let len = str.length; i < len; i++) {\n        if (str[i] !== '0')\n            break;\n    }\n    return str.substr(i) || str && '0';\n}\n\nattributes.prototype.updateElement = function updateElement({ input, element, collValue, isColl, unit, type, property, ...rest }) {\n\n\n\n    let inputValue = collValue != undefined ? collValue : this.getInputValue(input);\n\n    if (!Array.isArray(inputValue)) {\n        inputValue = unit && inputValue ? inputValue + unit : inputValue;\n        inputValue = this.removeZeros(inputValue)\n    }\n    else\n        inputValue.forEach(a => this.removeZeros(a.value))\n\n    let hasUpdated = this.updateElementByValue({ ...rest, type, property, input, element, inputValue, hasCollValue: collValue != undefined })\n\n    cache.reset(element)\n\n    // attribute is default when it's not attribute\n\n\n\n    hasUpdated &&\n        isColl &&\n        this.collaborate({\n            value: inputValue,\n            unit: input.getAttribute('data-attributes_unit'),\n            input,\n            element,\n            type,\n            property,\n            ...rest,\n\n        });\n    if (!types.includes(type)) {\n        property = type;\n        type = 'attribute';\n    }\n\n    hasUpdated &&\n        isColl &&\n        this.callback({\n            value: Array.isArray(inputValue) ? inputValue[0].value : inputValue,\n            unit: input.getAttribute('data-attributes_unit'),\n            input,\n            element,\n            type,\n            property,\n            ...rest,\n\n        });\n\n    // not needed since crdt\n    // when function called on collboration\n    // todo: use setInputValue directly in updateElementByValue\n    // if (newValue) {\n    //     updateInput({...rest, element, input, })\n    // }\n\n}\n\nattributes.prototype.updateInput = function updateInput({ type, property, camelProperty, element, input }) {\n    let computedStyles, value, value2, styleValue, unit;\n    if (!input) return console.error('CoCreate Attributes: input not found/dev')\n    switch (type) {\n        case 'classstyle':\n            let ccStyle = (0,_common_js__WEBPACK_IMPORTED_MODULE_0__.getCoCreateStyle)(element.classList);\n            if (ccStyle[camelProperty])\n                value2 = ccStyle[camelProperty];\n            else {\n                computedStyles = this.getRealStaticCompStyle(element);\n                value2 = computedStyles[camelProperty];\n            }\n            if (!value2) {\n                return console.warn(`\"${property}\" can not be found in style object`)\n            }\n            ([styleValue, unit] = (0,_common_js__WEBPACK_IMPORTED_MODULE_0__.parseUnit)(value2));\n            value = styleValue;\n            _common_js__WEBPACK_IMPORTED_MODULE_0__.setAttributeIfDif.call(input, \"data-attributes_unit\", unit);\n            break;\n        case 'style':\n            computedStyles = this.getRealStaticCompStyle(element);\n            value2 = computedStyles[camelProperty];\n            if (!value2) {\n                return console.warn(`\"${property}\" can not be found in style object`)\n            }\n            ([styleValue, unit] = (0,_common_js__WEBPACK_IMPORTED_MODULE_0__.parseUnit)(value2));\n            value = styleValue;\n            _common_js__WEBPACK_IMPORTED_MODULE_0__.setAttributeIfDif.call(input, \"data-attributes_unit\", unit);\n        case 'innerText':\n            value = element.innerText;\n            break;\n        default:\n            value = element.getAttribute(type);\n            break;\n    }\n\n    this.setInputValue(input, value != undefined ? value : '');\n\n}\n\nattributes.prototype.setInputValue = function setInputValue(input, value) {\n    // console.log(input.getAttribute('name'))\n\n    let inputType = input.tagName.toLowerCase() || input.classList.has('.pickr') && 'pickr';\n    switch (inputType) {\n        // case 'input':\n        //     switch (input.type) {\n        //         case 'checkbox':\n        //         case 'radio':\n        //             input.checked = value == input.value ? true : false;\n        //             break;\n        //         default:\n        //             input.value = value;\n        //     }\n        //     break;\n        // case \"textarea\":\n        //     input.value = value;\n        //     break;\n        case 'select':\n            let options = Array.from(input.options)\n            options.forEach(option => {\n                if (value == option.value)\n                    input.selectedIndex = options.indexOf(option);\n            })\n            break;\n        case 'cocreate-select':\n            (0,_common_js__WEBPACK_IMPORTED_MODULE_0__.renderOptions)(input, value)\n            break;\n        case 'pickr':\n            // todo: how to perform validation\n            let pickrIns = _cocreate_pickr__WEBPACK_IMPORTED_MODULE_3__.default.refs.get(input);\n            _cocreate_pickr__WEBPACK_IMPORTED_MODULE_3__.default.disabledEvent = true;\n            pickrIns.setColor(value); // todo: style or value\n            _cocreate_pickr__WEBPACK_IMPORTED_MODULE_3__.default.disabledEvent = false;\n\n        default:\n            _cocreate_crdt__WEBPACK_IMPORTED_MODULE_2__.default.replaceText({\n                collection: 'aaaaa',\n                document_id: 'null',\n                name: input.getAttribute('name'),\n                value: value + '',\n                position: '0',\n            })\n            // console.warn('CoCreateStyle: unidentified input: ', inputType, 'input ', input)\n    }\n}\n\n\n\n\nattributes.prototype.packMultiValue = function packMultiValue({\n    inputs,\n    stateProperty,\n    valueProperty = \"value\",\n    forceState,\n}) {\n    let value = [];\n    Array.from(inputs).forEach(input => {\n        value.push({ checked: forceState || input[stateProperty], value: input[valueProperty] || input.getAttribute(valueProperty) })\n    })\n    return value\n}\n\nattributes.prototype.getInputValue = function getInputValue(input) {\n    if (!input) return;\n    let inputType = input.tagName.toLowerCase() || input.classList.has('.pickr') && 'pickr';\n\n    switch (inputType) {\n        case 'input':\n            switch (input.type) {\n                case 'checkbox':\n                case 'radio':\n                    return this.packMultiValue({\n                        inputs: this.initDocument.getElementsByName(input.name),\n                        stateProperty: 'checked',\n                    });\n\n                default:\n                    return input.value;\n\n            }\n\n        case \"textarea\":\n            return input.value;\n\n        case 'select':\n            return this.packMultiValue({\n                inputs: input.options,\n                stateProperty: 'selected'\n            })\n\n        case 'cocreate-select':\n            return this.packMultiValue({\n                inputs: input.querySelectorAll(\":scope > [selected]\"),\n                forceState: true\n            });\n\n        case 'pickr':\n            // todo: how to perform validation\n            // if (!CoCreate.pickr.refs.has(input)) return; \n            let pickrIns = _cocreate_pickr__WEBPACK_IMPORTED_MODULE_3__.default.refs.get(input);\n            return pickrIns ? pickrIns.getColor().toHEXA().toString() : '';\n\n\n\n        default:\n            console.warn('CoCreateStyle: unidentified input');\n            break;\n    }\n\n\n}\n\n\n\nattributes.prototype.getElementFromInput = async function getElementFromInput(input) {\n    let id = input.getAttribute(\"data-attributes_target\");\n\n    if (id) {\n        if (id.indexOf(';') !== -1) {\n            let el = await this.complexSelector(id,\n                (canvasDoc, selector) => canvasDoc.querySelector(selector));\n            return el;\n        }\n        else\n            return this.initDocument.querySelector(id)\n    }\n    else\n        return false;\n\n}\n\n\n\nattributes.prototype.getRealStaticCompStyle = function getRealStaticCompStyle(element) {\n    if (cache.get(element, 'valid'))\n        return cache.get(element, 'computedStyles');\n    setTimeout(() => {\n        cache.reset(element)\n    }, 5000);\n    let oldDispaly = element.style.display;\n    element.style.display = \"none\";\n    let computedStylesLive = window.getComputedStyle(element);\n    let computedStyles = Object.assign({}, computedStylesLive);\n    computedStyles.display = oldDispaly;\n\n    element.style.display = oldDispaly;\n    if (element.getAttribute(\"style\") == \"\") element.removeAttribute(\"style\");\n    element.removeAttribute('no-observe')\n    cache.spread(element, { computedStyles, valid: true })\n    return computedStyles;\n}\n\n\nattributes.prototype.complexSelector = async function complexSelector(comSelector, callback) {\n    let [canvasSelector, selector] = comSelector.split(';');\n    let canvas = document.querySelector(canvasSelector);\n    if (!canvas) {\n        console.warn('complex selector canvas now found for', comSelector)\n        return\n    }\n\n    if ( /*!canvas.contentWindow.observedByCCAttributes &&*/ canvas.contentDocument.readyState === 'loading') {\n        try {\n            await new Promise((resolve, reject) => {\n                canvas.contentWindow.addEventListener('load', (e) => resolve())\n            });\n        }\n        catch (err) {\n            console.error('iframe can not be loaded')\n        }\n        // this.observerElements(canvas.contentWindow)\n        // canvas.contentWindow.observedByCCAttributes = true;\n    }\n\n    return callback(canvas.contentWindow.document, selector);\n}\n\n\n\n\n\n\n\n// attributes.prototype.getInputs = function getInputs(element) {\n//     let inputs = [];\n//     let allInputs = Array.from(document.getElementsByTagName(\"input\"));\n//     allInputs.forEach((inputCandidate) => {\n//         let inputMeta = getInputMetaData(inputCandidate);\n//         if (!inputMeta) return;\n\n//         let allReferencedEl = allFrame((frame) =>\n//             frame.querySelectorAll(\n//                 inputMeta.input.getAttribute(\"data-attributes_target\")\n//             )\n//         );\n//         if (Array.from(allReferencedEl).includes(element)) {\n//             inputs.push(inputMeta.input);\n//         }\n//     });\n//     return inputs;\n// }\n//attributes.prototype.perInput =  async function perInput(input, callback) {\n//     let inputMeta, element, group = input.getAttribute(\"data-attributes_group\");\n//     if (group) {\n//         [inputMeta, element] = getInputsMetaData(input);\n//     } else {\n//         inputMeta = validateInput(input);\n//         element = await getElementFromInput(input);\n//     }\n\n//     if (!inputMeta || !element) return;\n\n//     if (Array.isArray(inputMeta))\n//         inputMeta.forEach(async(metas) => callback(metas, element))\n//     else\n//         callback(inputMeta, element)\n// }\n\n//attributes.prototype.getInputsMetaData =  function getInputsMetaData(input) {\n//     let list = [],\n//         inputs = [];\n//     let element = getElementFromInput(input)\n//     let realInputs = input.querySelectorAll(group);\n//     realInputs.forEach(inp => {\n//         \n//         inputs.push(inp)\n//         list.push(validateInput(inp))\n//     })\n//     groupEl.set(input, inputs);\n//     return [list, element];\n// }\n\n\n\n// window.addEventListener('load', () => {\n//     let attribute = new attributes({ document, exclude: '#ghostEffect,.vdom-item ',\n//       callback: ({\n//         value,\n//         type,\n//         property,\n//         element,\n//     }) => {\n//           if (document.contains(element))\n//         domToText.domToText({\n//           method: type == 'attribute' ? 'setAttribute' : type, \n//           property: property,\n//           target: element.getAttribute(\"data-element_id\"),\n//           tagName: element.tagName,\n//           value,\n//           ...crdtCon\n//         })\n\n//     },})\n//     attribute.init()\n// })\n\n// let s = new attributes({\n//     document,\n//     exclude: '#ghostEffect,.vdom-item ',\n//     callback: ({\n//         value,\n//         type,\n//         property,\n//         element,\n//     }) => {\n//           if (document.contains(element))\n//         domToText.domToText({\n//           method: type == 'attribute' ? 'setAttribute' : type, \n//           property: property,\n//           target: element.getAttribute(\"data-element_id\"),\n//           tagName: element.tagName,\n//           value,\n//           ...crdtCon\n//         })\n\n//     },\n// })\n// s.init();\n\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    init: (params) => {\n        let s = new attributes(params)\n        s.init();\n        return s;\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../CoCreateJS/node_modules/@cocreate/attributes/src/index.js\n")}}]);
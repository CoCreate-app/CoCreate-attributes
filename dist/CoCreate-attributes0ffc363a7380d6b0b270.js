/*! For license information please see CoCreate-attributes0ffc363a7380d6b0b270.js.LICENSE.txt */
!function(Q,F){"object"==typeof exports&&"object"==typeof module?module.exports=F():"function"==typeof define&&define.amd?define([],F):"object"==typeof exports?exports.CoCreate=F():(Q.CoCreate=Q.CoCreate||{},Q.CoCreate.attributes=F())}(this,(function(){return(()=>{"use strict";var __webpack_modules__={"../CoCreate-action/src/index.js":(__unused_webpack_module,exports)=>{eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = void 0;\n// -testing1\nconst CoCreateAction = {\n  attribute: 'data-actions',\n  actions: {},\n  selectedStage: [],\n  stageIndex: 0,\n  selectedElement: null,\n  completedEventName: 'completedEvent',\n  __init: function () {\n    this.actionButtonEvent();\n  },\n  actionButtonEvent: function () {\n    const self = this;\n    document.addEventListener('click', function (event) {\n      let btn = event.target;\n\n      if (!btn.getAttribute('data-actions')) {\n        btn = event.target.closest('[data-actions]');\n      }\n\n      if (!btn) return;\n      event.preventDefault();\n      let actions = (btn.getAttribute(self.attribute) || \"\").replace(/\\s/g, '').split(',');\n      if (actions.length == 0) return;\n      self.stageIndex = 0;\n      self.selectedStage = actions; //. run function\n\n      self.selectedElement = btn;\n\n      self.__runActionFunc();\n    });\n  },\n  init: function ({\n    action,\n    callback,\n    endEvent\n  }) {\n    this.registerEvent(action, callback, null, endEvent);\n  },\n\n  /**\n   * key: string\n   * runFunc: function\n   * instance: object\n   * endEvent: string\n   **/\n  registerEvent: function (key, runFunc, instance, endEvent) {\n    if (this.actions[key]) {\n      return;\n    }\n\n    this.actions[key] = {\n      key: key,\n      runFunc: runFunc,\n      instance: instance || window,\n      endEvent: endEvent\n    }; //. register events\n\n    for (let __key in this.actions) {\n      if (__key != key && this.actions[__key]['endEvent'] === endEvent) {\n        return;\n      }\n    } //. register events\n\n\n    const _this = this;\n\n    document.addEventListener(endEvent, function (e) {\n      _this.__nextAction(endEvent, e.detail);\n    });\n  },\n  __runActionFunc: function (data) {\n    if (this.stageIndex >= this.selectedStage.length) {\n      //. if latest case, it will be run aTag\n      if (this.stageIndex == this.selectedStage.length) {\n        this.__runAtag(this.selectedElement);\n      }\n\n      return;\n    }\n\n    const actionName = this.selectedStage[this.stageIndex]; //. run function\n\n    const action = this.actions[actionName];\n\n    if (action) {\n      if (action.runFunc) {\n        action.runFunc.call(null, this.selectedElement, data);\n      } else {\n        this.__nextAction(action.endEvent, {});\n      }\n    } else {\n      let status = this.__runSpecialAction(actionName, data);\n\n      if (status === \"next\") {\n        this.__moveNextAction();\n      }\n    }\n  },\n  __nextAction: function (eventName, data) {\n    const key = this.selectedStage[this.stageIndex];\n\n    if (!key) {\n      return;\n    }\n\n    if (eventName !== this.actions[key].endEvent) {\n      return;\n    }\n\n    this.__moveNextAction(data);\n  },\n  __runAtag: function (button) {\n    var aTag = button.querySelector('a');\n\n    if (aTag) {// CoCreate.logic.setLinkProcess(aTag)\n    }\n  },\n  //. special action\n  __runSpecialAction: function (actionName, data) {\n    let matches = /(\\w+)\\{([a-zA-Z0-9_ \\-#$.]+)\\}/gm.exec(actionName);\n\n    if (!matches || matches.length < 3) {\n      return \"next\";\n    }\n\n    let type = matches[1],\n        param = matches[2].trim();\n    if (!param) return \"next\";\n    const self = this;\n\n    switch (type) {\n      case 'event':\n        console.log(\"Waiting Event....\");\n        document.addEventListener(param, eventData => {\n          console.log('Event Action (Received event from other section) ====== ' + param);\n\n          self.__moveNextAction(eventData);\n        }, {\n          once: true\n        });\n        break;\n\n      case 'timeout':\n        let delayTime = parseInt(param);\n\n        if (delayTime > 0) {\n          setTimeout(function () {\n            console.log(\"Timeout ======= \" + param);\n\n            self.__moveNextAction(data);\n          }, parseInt(param));\n        }\n\n        break;\n\n      case 'action':\n        let btn = document.querySelector(param);\n\n        if (btn) {\n          btn.click();\n        }\n\n        break;\n\n      default:\n        return \"next\";\n    }\n  },\n  __moveNextAction: function (data) {\n    this.stageIndex++;\n\n    this.__runActionFunc(data);\n  }\n};\n\nCoCreateAction.__init();\n\nvar _default = CoCreateAction;\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../CoCreate-action/src/index.js\n")},"./src/common.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.parseClassRules = parseClassRules;\nexports.getCoCreateStyle = getCoCreateStyle;\nexports.setStyleClassIfDif = setStyleClassIfDif;\nexports.setAttributeIfDif = setAttributeIfDif;\nexports.setStyleIfDif = setStyleIfDif;\nexports.removeAllSelectedOptions = removeAllSelectedOptions;\nexports.renderOptions = renderOptions;\nexports.parseCssRules = parseCssRules;\nexports.rgba2hex = rgba2hex;\nexports.parseUnit = parseUnit;\nexports.toCamelCase = toCamelCase;\nexports.elStore = elStore;\n\nvar _select = _interopRequireDefault(__webpack_require__(/*! @cocreate/select */ "../CoCreate-select/src/index.js"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*global CoCreate*/\nfunction parseClassRules(str) {\n  return str.split(\' \').filter(cln => cln);\n}\n\nfunction getCoCreateStyle(classList) {\n  let styles = {};\n  classList.forEach(classname => {\n    let [name, value] = classname.split(":");\n    styles[toCamelCase(name)] = value;\n  });\n  return styles;\n}\n\nfunction setStyleClassIfDif(element, {\n  property,\n  camelProperty,\n  value,\n  computedStyles\n}) {\n  let classList = element.classList;\n  let styleList = new Map();\n  classList.forEach(classname => {\n    let [name, value] = classname.split(":");\n    value && styleList.set(name, value);\n  });\n  let elValue = styleList.get(property);\n\n  if (value) {\n    if (elValue) {\n      if (elValue != value) return classList.replace(`${property}:${elValue}`, `${property}:${value}`);\n    } else if (computedStyles[camelProperty] != value && !classList.contains(`${property}:${value}`)) {\n      classList.add(`${property}:${value}`);\n      return true;\n    }\n  } else {\n    if (classList.contains(`${property}:${elValue}`)) {\n      classList.remove(`${property}:${elValue}`);\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction setAttributeIfDif(property, value) {\n  if (this.getAttribute(property) !== value) {\n    if (value) this.setAttribute(property, value);else this.removeAttribute(property);\n    return true;\n  }\n\n  return false;\n}\n\nfunction setStyleIfDif({\n  property,\n  camelProperty,\n  value,\n  computedStyles\n}) {\n  if (computedStyles[camelProperty] && computedStyles[camelProperty] !== value) {\n    this.style[property] = value;\n    return true;\n  } else return false;\n} // CoCreate Select helper\n// export function getAllSelectedOptions() {\n//     let options = this.querySelectorAll(":scope > [selected]");\n//     return Array.from(options).map((o) => o.getAttribute("value"));\n// };\n\n\nfunction removeAllSelectedOptions() {\n  let options = this.querySelectorAll(":scope > [selected]");\n  return Array.from(options).forEach(o => o.remove());\n}\n\n; // export function getAllOptions() {\n//     let options = this.querySelectorAll(":scope > ul > [value]");\n//     return Array.from(options).map((o) => o.getAttribute("value"));\n// };\n\nfunction renderOptions(input, arrValue) {\n  if (arrValue && arrValue.length) _select.default.renderValue(input, arrValue);else removeAllSelectedOptions.call(input);\n} // CoCreate Select helper end  \n\n\nfunction parseCssRules(str) {\n  let styleObject = {};\n  if (str.split) str.split(";").forEach(rule => {\n    let ruleSplit = rule.split(":");\n    let key = ruleSplit.shift().trim();\n    let value = ruleSplit.join().trim();\n    if (key) styleObject[key] = value;\n  });\n  return styleObject;\n}\n\nfunction rgba2hex(orig) {\n  let a,\n      isPercent,\n      rgb = orig.replace(/\\s/g, \'\').match(/^rgba?\\((\\d+),(\\d+),(\\d+),?([^,\\s)]+)?/i),\n      alpha = (rgb && rgb[4] || "").trim(),\n      hex = rgb ? (rgb[1] | 1 << 8).toString(16).slice(1) + (rgb[2] | 1 << 8).toString(16).slice(1) + (rgb[3] | 1 << 8).toString(16).slice(1) : orig;\n\n  if (alpha !== "") {\n    a = alpha;\n  } else {\n    a = 1;\n  } // multiply before convert to HEX\n\n\n  a = (a * 255 | 1 << 8).toString(16).slice(1);\n  hex = hex + a;\n  return hex;\n}\n\nfunction parseUnit(style) {\n  let value = parseFloat(style);\n  if (isNaN(value)) return [style, \'\'];else {\n    let valueLength = (value + "").length;\n    return [value, style.substr(valueLength)];\n  }\n}\n\nfunction toCamelCase(str) {\n  let index = 0;\n\n  do {\n    index = str.indexOf("-", index);\n\n    if (index !== -1) {\n      let t = str.substring(0, index);\n      t += String.fromCharCode(str.charCodeAt(index + 1) - 32);\n      t += str.substr(index + 2);\n      str = t;\n    } else break;\n  } while (true);\n\n  return str;\n} // export function setCCStyle({ property, camelProperty, value, computedStyles }) {\n//     let hasChanged = false;\n//     if (computedStyles[camelProperty]  && computedStyles[camelProperty] !== value) {\n//         for (let classname of this.classList) {\n//             let [name, styleValue] = classname.split(":");\n//             if (name === property && styleValue) {\n//                 if (value)\n//                     this.classList.replace(classname, property + ":" + value);\n//                 else\n//                     this.classList.remove(classname)\n//                 hasChanged = true;\n//                 break;\n//             }\n//         }\n//         if (!hasChanged)\n//             this.classList.add(property + ":" + value);\n//         return true;\n//     } else\n//         return false;\n// }\n\n\nfunction elStore() {\n  this.cache = new Map();\n\n  this.spread = function set(key, object) {\n    this.cache.set(key, { ...this.cache.get(key),\n      ...object\n    });\n  };\n\n  this.set = function set(key, property, value) {\n    this.cache.set(key, { ...this.cache.get(key),\n      [property]: value\n    });\n  };\n\n  this.get = function get(key, property) {\n    let value = this.cache.get(key);\n    return value ? value[property] : undefined;\n  };\n\n  this.reset = function reset(key) {\n    this.cache.delete(key);\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/common.js\n')},"./src/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = void 0;\n\nvar _common = __webpack_require__(/*! ./common.js */ \"./src/common.js\");\n\nvar _observer = _interopRequireDefault(__webpack_require__(/*! @cocreate/observer */ \"../CoCreate-observer/src/index.js\"));\n\nvar _crdt = _interopRequireDefault(__webpack_require__(/*! @cocreate/crdt */ \"../CoCreate-crdt/src/index.js\"));\n\nvar _pickr = _interopRequireDefault(__webpack_require__(/*! @cocreate/pickr */ \"../../CoCreate-plugins/CoCreate-pickr/src/index.js\"));\n\nvar _message = _interopRequireDefault(__webpack_require__(/*! @cocreate/message */ \"../CoCreate-message/src/index.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*global CoCreate*/\n// // dev start\n// import '@cocreate/select'\n// import selected from '@cocreate/selected'\n// import domToText from '@cocreate/domToText'\n// selected.config({\n//     srcDocument: document,\n//     destDocument: document,\n//     selector: \"#container *\",\n//     target: \"[data-attributes]:not(.styleunit)\",\n//     callback: (element, target) => {\n//         target.setAttribute('data-attributes_target', `[data-element_id=${element.getAttribute('data-element_id')}]`);\n//         target.setAttribute('name', target.id + '-' + element.getAttribute('data-element_id'))\n//     }\n// });\n// //profile observer\n// let profile = []\n// function profileObserver(mutation, extra = {}) {\n//     // get time\n//     let date = new Date();\n//     let time = date.getSeconds() + '.' + date.getMilliseconds()\n//     profile.push({ time, ...extra, ...mutation })\n// }\n// // dev end\nlet cache = new _common.elStore();\nlet types = ['attribute', 'classstyle', 'style', 'innerText'];\n\nfunction attributes({\n  document: initDocument,\n  exclude = \"\",\n  callback = () => {}\n}) {\n  this.exclude = exclude;\n  this.callback = callback;\n  this.initDocument = initDocument;\n}\n\nattributes.prototype.init = function init() {\n  this.scanNewElement(); // this.initDocument.defaultView.CoCreate.observer.init({\n\n  _observer.default.init({\n    name: \"ccAttribute\",\n    observe: [\"attributes\"],\n    attributes: [\"data-attributes_target\", \"value\", \"data-attributes_unit\"],\n    include: \"INPUT, .pickr, cocreate-select\",\n    callback: async m => await this.watchInputChange(m)\n  });\n\n  this.initDocument.addEventListener(\"input\", async e => {\n    let input = e.target; // input.tagName == \"COCREATE-SELECT\" && \n\n    this.perInput(input, (inputMeta, element) => this.updateElement({ ...inputMeta,\n      input,\n      element,\n      isColl: true\n    }));\n  }); // observer elements change to reflect inputs (data-units)\n\n  this.observerElements(this.initDocument.defaultView);\n\n  _message.default.listen(\"ccStyle\", args => this.listen(args));\n};\n\nattributes.prototype.listen = async function listen({\n  value,\n  unit,\n  type,\n  property,\n  camelProperty,\n  elementId,\n  elementSelector\n}) {\n  let selector = property ? `[data-attributes=${type}][data-attributes_property=${property}]:not(${this.exclude})` : `[data-attributes=${type}]:not(${this.exclude})`;\n  let input = this.initDocument.querySelector(selector); // if (selector.indexOf(';') !== -1)\n  // let element\n\n  let element = await this.complexSelector(elementSelector, (canvasDoc, selector) => canvasDoc.querySelector(selector)); // else\n  //     element = this.initDocument.querySelector(elementSelector)\n\n  this.updateElement({\n    type,\n    property,\n    camelProperty,\n    input,\n    element,\n    collValue: value,\n    unit,\n    isColl: false\n  });\n};\n\nattributes.prototype.collaborate = function collaborate({\n  element,\n  ...rest\n}) {\n  // if (value != input.value) return;\n  let elementId = element.getAttribute('data-element_id');\n  if (!elementId) return console.warn('no element id, collaboration skiped');\n  let elementSelector = rest.input.getAttribute('data-attributes_target');\n\n  _message.default.send({\n    broadcast_sender: false,\n    rooms: \"\",\n    emit: {\n      message: \"ccStyle\",\n      data: { ...rest,\n        elementId,\n        elementSelector\n      }\n    }\n  });\n};\n\nattributes.prototype.scanNewElement = function scanNewElement() {\n  this.initDocument.querySelectorAll(`[data-attributes]:not(${this.exclude})`).forEach(async input => {\n    this.perInput(input, (inputMeta, element) => this.updateInput({ ...inputMeta,\n      input,\n      element,\n      isColl: true\n    }));\n  });\n};\n\nattributes.prototype.observerElements = function observerElements(initWindow) {\n  // initWindow.CoCreate.observer.init({\n  // let observer = initWindow.CoCreate.observer ?\n  _observer.default.init({\n    name: 'ccAttribute',\n    observe: [\"attributes\", \"characterData\"],\n    callback: mutation => {\n      let element = mutation.target;\n      if (!element) return;\n      this.getInputFromElement(mutation.target).forEach(input => {\n        let inputMeta = this.validateInput(input);\n        if (!inputMeta) return;\n        this.updateInput({ ...inputMeta,\n          input,\n          element\n        });\n      });\n    }\n  });\n}; //convention based (all elements should use data-elememet_id and it's faster)\n// made it also support \"id\"\n\n\nattributes.prototype.getInputFromElement = function getInputFromElement(element) {\n  let elId = element.getAttribute('data-element_id') || element.id && `\"#${element.id}\"`;\n  if (elId) return this.initDocument.querySelectorAll(`[data-attributes_target=${elId}]`);\n  return [];\n}; // todo: discuss with\n// attributes.prototype.getInputFromElement = function getInputFromElement(element) {\n//     // let inputs = [];\n//     //todo: fix add textarea\n//     let elId = element.getAttribute('data-element_id');\n//     if(elId)\n//      this.initDocument.querySelectorAll(`[data-attributes_target]`).forEach\n// }\n\n\nattributes.prototype.watchInputChange = async function watchInputChange(mutation) {\n  try {\n    // return;\n    let element,\n        input = mutation.target;\n    let inputMeta = this.validateInput(input);\n    element = inputMeta && (await this.getElementFromInput(input));\n    if (!element) return;\n\n    if (mutation.attributeName === \"data-attributes_target\") {\n      // if (element) \n      this.updateInput({ ...inputMeta,\n        input,\n        element\n      }); // element.isFirst = element.isFirst === true ? false : true;\n    } else if (mutation.attributeName === \"data-attributes_unit\") {\n      // if (element.isFirst) return;\n      this.updateElement({ ...inputMeta,\n        input,\n        element,\n        isColl: true\n      });\n    }\n  } catch (err) {}\n};\n\nattributes.prototype.perInput = async function perInput(input, callback) {\n  try {\n    let inputMeta, element;\n    inputMeta = this.validateInput(input);\n    element = inputMeta && (await this.getElementFromInput(input));\n    if (!element) return;\n    callback(inputMeta, element);\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nattributes.prototype.validateInput = function validateInput(input) {\n  let type = input.getAttribute(\"data-attributes\");\n\n  if (!type) {\n    // console.warn(\"cc-style: input doesn't have data-attributes\")\n    return;\n  }\n\n  type = type.toLowerCase();\n  let camelProperty,\n      property = input.getAttribute(\"data-attributes_property\");\n\n  if (property) {\n    camelProperty = (0, _common.toCamelCase)(property);\n    property = property.toLowerCase();\n  }\n\n  return {\n    type,\n    property,\n    camelProperty\n  };\n};\n\nattributes.prototype.updateElementByValue = function updateElementByValue({\n  type,\n  property,\n  camelProperty,\n  input,\n  element,\n  inputValue,\n  hasCollValue\n}) {\n  let computedStyles, value, removeValue, hasUpdated, unit, parsedInt;\n\n  switch (type) {\n    case 'classstyle':\n      parsedInt = parseInt(value);\n      unit = input.getAttribute('data-attributes_unit') || '';\n      value = inputValue && !hasCollValue ? inputValue + unit : inputValue;\n      value = value || '';\n      computedStyles = this.getRealStaticCompStyle(element);\n      return (0, _common.setStyleClassIfDif)(element, {\n        property,\n        camelProperty,\n        value,\n        computedStyles\n      });\n\n    case 'style':\n      unit = input.getAttribute('data-attributes_unit') || '';\n      value = inputValue && !hasCollValue ? inputValue + unit : inputValue;\n      value = value || '';\n      computedStyles = this.getRealStaticCompStyle(element);\n      return _common.setStyleIfDif.call(element, {\n        property,\n        camelProperty,\n        value,\n        computedStyles\n      });\n\n    case 'innerText':\n      if (element.innerText != inputValue) {\n        element.innerText = inputValue;\n        return true;\n      } else return false;\n\n    default:\n      if (typeof inputValue == 'string') {\n        return _common.setAttributeIfDif.call(element, type, inputValue);\n      } else {\n        for (let inputSValue of inputValue) {\n          if (inputSValue.checked) {\n            // unconventional change\n            if (type === 'data-attributes_unit' && ['auto', 'inherit', 'initial'].includes(inputSValue.value)) {\n              element.value = inputSValue.value;\n\n              _common.removeAllSelectedOptions.call(input);\n            } else // unconventional change\n              return _common.setAttributeIfDif.call(element, type, inputSValue.value);\n          }\n        }\n      }\n\n      break;\n  }\n};\n\nattributes.prototype.removeZeros = function removeZeros(str) {\n  let i = 0;\n\n  for (let len = str.length; i < len; i++) {\n    if (str[i] !== '0') break;\n  }\n\n  return str.substr(i) || str && '0';\n};\n\nattributes.prototype.updateElement = function updateElement({\n  input,\n  element,\n  collValue,\n  isColl,\n  unit,\n  type,\n  property,\n  ...rest\n}) {\n  let inputValue = collValue != undefined ? collValue : this.getInputValue(input);\n\n  if (!Array.isArray(inputValue)) {\n    inputValue = unit && inputValue ? inputValue + unit : inputValue;\n    inputValue = this.removeZeros(inputValue);\n  } else inputValue.forEach(a => this.removeZeros(a.value));\n\n  let hasUpdated = this.updateElementByValue({ ...rest,\n    type,\n    property,\n    input,\n    element,\n    inputValue,\n    hasCollValue: collValue != undefined\n  });\n  cache.reset(element); // attribute is default when it's not attribute\n\n  hasUpdated && isColl && this.collaborate({\n    value: inputValue,\n    unit: input.getAttribute('data-attributes_unit'),\n    input,\n    element,\n    type,\n    property,\n    ...rest\n  });\n\n  if (!types.includes(type)) {\n    property = type;\n    type = 'attribute';\n  }\n\n  hasUpdated && isColl && this.callback({\n    value: Array.isArray(inputValue) ? inputValue[0].value : inputValue,\n    unit: input.getAttribute('data-attributes_unit'),\n    input,\n    element,\n    type,\n    property,\n    ...rest\n  }); // not needed since crdt\n  // when function called on collboration\n  // todo: use setInputValue directly in updateElementByValue\n  // if (newValue) {\n  //     updateInput({...rest, element, input, })\n  // }\n};\n\nattributes.prototype.updateInput = function updateInput({\n  type,\n  property,\n  camelProperty,\n  element,\n  input\n}) {\n  let computedStyles, value, value2, styleValue, unit;\n  if (!input) return console.error('CoCreate Attributes: input not found/dev');\n\n  switch (type) {\n    case 'classstyle':\n      let ccStyle = (0, _common.getCoCreateStyle)(element.classList);\n      if (ccStyle[camelProperty]) value2 = ccStyle[camelProperty];else {\n        computedStyles = this.getRealStaticCompStyle(element);\n        value2 = computedStyles[camelProperty];\n      }\n\n      if (!value2) {\n        return console.warn(`\"${property}\" can not be found in style object`);\n      }\n\n      [styleValue, unit] = (0, _common.parseUnit)(value2);\n      value = styleValue;\n\n      _common.setAttributeIfDif.call(input, \"data-attributes_unit\", unit);\n\n      break;\n\n    case 'style':\n      computedStyles = this.getRealStaticCompStyle(element);\n      value2 = computedStyles[camelProperty];\n\n      if (!value2) {\n        return console.warn(`\"${property}\" can not be found in style object`);\n      }\n\n      [styleValue, unit] = (0, _common.parseUnit)(value2);\n      value = styleValue;\n\n      _common.setAttributeIfDif.call(input, \"data-attributes_unit\", unit);\n\n    case 'innerText':\n      value = element.innerText;\n      break;\n\n    default:\n      value = element.getAttribute(type);\n      break;\n  }\n\n  this.setInputValue(input, value != undefined ? value : '');\n};\n\nattributes.prototype.setInputValue = function setInputValue(input, value) {\n  // console.log(input.getAttribute('name'))\n  let inputType = input.tagName.toLowerCase() || input.classList.has('.pickr') && 'pickr';\n\n  switch (inputType) {\n    // case 'input':\n    //     switch (input.type) {\n    //         case 'checkbox':\n    //         case 'radio':\n    //             input.checked = value == input.value ? true : false;\n    //             break;\n    //         default:\n    //             input.value = value;\n    //     }\n    //     break;\n    // case \"textarea\":\n    //     input.value = value;\n    //     break;\n    case 'select':\n      let options = Array.from(input.options);\n      options.forEach(option => {\n        if (value == option.value) input.selectedIndex = options.indexOf(option);\n      });\n      break;\n\n    case 'cocreate-select':\n      (0, _common.renderOptions)(input, value);\n      break;\n\n    case 'pickr':\n      // todo: how to perform validation\n      let pickrIns = _pickr.default.refs.get(input);\n\n      _pickr.default.disabledEvent = true;\n      pickrIns.setColor(value); // todo: style or value\n\n      _pickr.default.disabledEvent = false;\n\n    default:\n      _crdt.default.replaceText({\n        collection: 'aaaaa',\n        document_id: 'null',\n        name: input.getAttribute('name'),\n        value: value + '',\n        position: '0'\n      });\n\n    // console.warn('CoCreateStyle: unidentified input: ', inputType, 'input ', input)\n  }\n};\n\nattributes.prototype.packMultiValue = function packMultiValue({\n  inputs,\n  stateProperty,\n  valueProperty = \"value\",\n  forceState\n}) {\n  let value = [];\n  Array.from(inputs).forEach(input => {\n    value.push({\n      checked: forceState || input[stateProperty],\n      value: input[valueProperty] || input.getAttribute(valueProperty)\n    });\n  });\n  return value;\n};\n\nattributes.prototype.getInputValue = function getInputValue(input) {\n  if (!input) return;\n  let inputType = input.tagName.toLowerCase() || input.classList.has('.pickr') && 'pickr';\n\n  switch (inputType) {\n    case 'input':\n      switch (input.type) {\n        case 'checkbox':\n        case 'radio':\n          return this.packMultiValue({\n            inputs: this.initDocument.getElementsByName(input.name),\n            stateProperty: 'checked'\n          });\n\n        default:\n          return input.value;\n      }\n\n    case \"textarea\":\n      return input.value;\n\n    case 'select':\n      return this.packMultiValue({\n        inputs: input.options,\n        stateProperty: 'selected'\n      });\n\n    case 'cocreate-select':\n      return this.packMultiValue({\n        inputs: input.querySelectorAll(\":scope > [selected]\"),\n        forceState: true\n      });\n\n    case 'pickr':\n      // todo: how to perform validation\n      // if (!CoCreate.pickr.refs.has(input)) return; \n      let pickrIns = _pickr.default.refs.get(input);\n\n      return pickrIns ? pickrIns.getColor().toHEXA().toString() : '';\n\n    default:\n      console.warn('CoCreateStyle: unidentified input');\n      break;\n  }\n};\n\nattributes.prototype.getElementFromInput = async function getElementFromInput(input) {\n  let id = input.getAttribute(\"data-attributes_target\");\n\n  if (id) {\n    if (id.indexOf(';') !== -1) {\n      let el = await this.complexSelector(id, (canvasDoc, selector) => canvasDoc.querySelector(selector));\n      return el;\n    } else return this.initDocument.querySelector(id);\n  } else return false;\n};\n\nattributes.prototype.getRealStaticCompStyle = function getRealStaticCompStyle(element) {\n  if (cache.get(element, 'valid')) return cache.get(element, 'computedStyles');\n  setTimeout(() => {\n    cache.reset(element);\n  }, 5000);\n  let oldDispaly = element.style.display;\n  element.style.display = \"none\";\n  let computedStylesLive = window.getComputedStyle(element);\n  let computedStyles = Object.assign({}, computedStylesLive);\n  computedStyles.display = oldDispaly;\n  element.style.display = oldDispaly;\n  if (element.getAttribute(\"style\") == \"\") element.removeAttribute(\"style\");\n  element.removeAttribute('no-observe');\n  cache.spread(element, {\n    computedStyles,\n    valid: true\n  });\n  return computedStyles;\n};\n\nattributes.prototype.complexSelector = async function complexSelector(comSelector, callback) {\n  let [canvasSelector, selector] = comSelector.split(';');\n  let canvas = document.querySelector(canvasSelector);\n\n  if (!canvas) {\n    console.warn('complex selector canvas now found for', comSelector);\n    return;\n  }\n\n  if (\n  /*!canvas.contentWindow.observedByCCAttributes &&*/\n  canvas.contentDocument.readyState === 'loading') {\n    try {\n      await new Promise((resolve, reject) => {\n        canvas.contentWindow.addEventListener('load', e => resolve());\n      });\n    } catch (err) {\n      console.error('iframe can not be loaded');\n    } // this.observerElements(canvas.contentWindow)\n    // canvas.contentWindow.observedByCCAttributes = true;\n\n  }\n\n  return callback(canvas.contentWindow.document, selector);\n}; // attributes.prototype.getInputs = function getInputs(element) {\n//     let inputs = [];\n//     let allInputs = Array.from(document.getElementsByTagName(\"input\"));\n//     allInputs.forEach((inputCandidate) => {\n//         let inputMeta = getInputMetaData(inputCandidate);\n//         if (!inputMeta) return;\n//         let allReferencedEl = allFrame((frame) =>\n//             frame.querySelectorAll(\n//                 inputMeta.input.getAttribute(\"data-attributes_target\")\n//             )\n//         );\n//         if (Array.from(allReferencedEl).includes(element)) {\n//             inputs.push(inputMeta.input);\n//         }\n//     });\n//     return inputs;\n// }\n//attributes.prototype.perInput =  async function perInput(input, callback) {\n//     let inputMeta, element, group = input.getAttribute(\"data-attributes_group\");\n//     if (group) {\n//         [inputMeta, element] = getInputsMetaData(input);\n//     } else {\n//         inputMeta = validateInput(input);\n//         element = await getElementFromInput(input);\n//     }\n//     if (!inputMeta || !element) return;\n//     if (Array.isArray(inputMeta))\n//         inputMeta.forEach(async(metas) => callback(metas, element))\n//     else\n//         callback(inputMeta, element)\n// }\n//attributes.prototype.getInputsMetaData =  function getInputsMetaData(input) {\n//     let list = [],\n//         inputs = [];\n//     let element = getElementFromInput(input)\n//     let realInputs = input.querySelectorAll(group);\n//     realInputs.forEach(inp => {\n//         \n//         inputs.push(inp)\n//         list.push(validateInput(inp))\n//     })\n//     groupEl.set(input, inputs);\n//     return [list, element];\n// }\n// window.addEventListener('load', () => {\n//     let attribute = new attributes({ document, exclude: '#ghostEffect,.vdom-item ',\n//       callback: ({\n//         value,\n//         type,\n//         property,\n//         element,\n//     }) => {\n//           if (document.contains(element))\n//         domToText.domToText({\n//           method: type == 'attribute' ? 'setAttribute' : type, \n//           property: property,\n//           target: element.getAttribute(\"data-element_id\"),\n//           tagName: element.tagName,\n//           value,\n//           ...crdtCon\n//         })\n//     },})\n//     attribute.init()\n// })\n// let s = new attributes({\n//     document,\n//     exclude: '#ghostEffect,.vdom-item ',\n//     callback: ({\n//         value,\n//         type,\n//         property,\n//         element,\n//     }) => {\n//           if (document.contains(element))\n//         domToText.domToText({\n//           method: type == 'attribute' ? 'setAttribute' : type, \n//           property: property,\n//           target: element.getAttribute(\"data-element_id\"),\n//           tagName: element.tagName,\n//           value,\n//           ...crdtCon\n//         })\n//     },\n// })\n// s.init();\n\n\nvar _default = {\n  init: params => {\n    let s = new attributes(params);\n    s.init();\n    return s;\n  }\n};\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/index.js\n")},"../CoCreate-crdt/src/core.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.default = void 0;\n\nvar Y = _interopRequireWildcard(__webpack_require__(/*! yjs */ "../CoCreate-crdt/node_modules/yjs/dist/yjs.cjs"));\n\nvar _yWebsocket = __webpack_require__(/*! y-websocket */ "../CoCreate-crdt/node_modules/y-websocket/src/y-websocket.js");\n\nvar _yIndexeddb = __webpack_require__(/*! y-indexeddb */ "../CoCreate-crdt/node_modules/y-indexeddb/src/y-indexeddb.js");\n\nvar _cocreatejs = __webpack_require__(/*! @cocreate/cocreatejs */ "../../CoCreateJS/src/index.js");\n\nvar _cursors = _interopRequireDefault(__webpack_require__(/*! @cocreate/cursors */ "../CoCreate-cursors/src/index.js"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nconst debug = false;\n\nclass CoCreateYSocket {\n  constructor(org, ydoc) {\n    this.doc = ydoc;\n    this.orgName = org;\n    this.docs = {};\n    this._awarenessListener = null;\n    this.character = \'_\';\n\n    this.listenAwereness = function () {};\n  }\n\n  createDoc(id, element) {\n    if (!id || id == "") {\n      return null;\n    }\n\n    let newInfo = this.parseType(id); // if(debug)\n    // \tconsole.log(newInfo);\n\n    const newId = newInfo.id;\n\n    if (this.docs[newId]) {\n      if (element && !this.__checkExistElement(this.docs[newId].elements, element)) {\n        this.docs[newId].elements.push(element);\n      }\n\n      if (!this.docs[newId].types.some(type => type === id)) {\n        // register event\n        this.docs[newId].types.push(id);\n        this.registerUpdateEvent(this.docs[newId], id);\n      }\n\n      return false;\n    }\n\n    const yDoc = this.doc;\n\n    const url_socket = this.__getSocketUrl(); //draw cursor dinamially\n    // new UserCursor(socketProvider);\n\n\n    var socketProvider = new _yWebsocket.WebsocketProvider(url_socket, newId, yDoc);\n    let indexeddbProvider = null;\n\n    if (newInfo.document_id != "null") {\n      indexeddbProvider = new _yIndexeddb.IndexeddbPersistence(newId, this.doc);\n      indexeddbProvider.whenSynced.then(() => {\n        console.log(\'loaded data from indexed db\');\n      });\n    }\n\n    let awareness = socketProvider.awareness;\n    this._cursors = new Map();\n\n    this._awarenessListener = event => {\n      const f = clientId => {\n        if (clientId !== this.doc.clientID) {\n          this.updateRemoteSelection(yDoc, id, yDoc.getText(id), this._cursors, clientId, awareness);\n        }\n      };\n\n      event.added.forEach(f);\n      event.removed.forEach(f);\n      event.updated.forEach(f);\n    };\n\n    awareness.on(\'change\', this._awarenessListener);\n    /*\n    awareness.getStates().forEach((aw, clientId) => {\n    \tconsole.log("Update --")\n          })\n          */\n\n    this.docs[newId] = {\n      id: newId,\n      doc: yDoc,\n      socket: socketProvider,\n      awareness: awareness,\n      elements: element ? [element] : [],\n      types: [id],\n      indexeddb: indexeddbProvider\n    };\n    this.registerUpdateEvent(this.docs[newId], id);\n    return true;\n  }\n\n  registerUpdateEvent(docObject, id) {\n    const yDoc = docObject.doc;\n    const shardType = yDoc.getText(id);\n\n    let _this = this;\n\n    shardType.observe(event => {\n      _this.__setTypeObserveEvent(event, docObject.elements, id);\n    });\n  }\n\n  __checkExistElement(elements, element) {\n    for (var i = 0; i < elements.length; i++) {\n      if (elements[i].isSameNode(element)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  __getSocketUrl() {\n    console.log("get_socket url");\n    let w_location = window.location || window.parent.location;\n    let w_protocol = w_location.protocol;\n    let w_host = w_location.host;\n\n    if (w_location.protocol === "about:") {\n      w_protocol = w_location.protocol;\n      w_host = document.referrer;\n    }\n\n    let protocol = w_protocol === \'http:\' ? \'ws\' : \'wss\';\n    let url_socket = `${protocol}://${w_host}:8080/`;\n\n    if (window.config && window.config.host) {\n      if (window.config.host.includes("://")) {\n        url_socket = `${window.config.host}/`;\n      } else {\n        url_socket = `${protocol}://${window.config.host}/`;\n      }\n    }\n\n    console.log(url_socket);\n    url_socket += "crdt/";\n    return url_socket;\n  }\n\n  __setTypeObserveEvent(event, elements, id) {\n    if (!id) return;\n    const eventDelta = event.delta;\n    const info = JSON.parse(atob(id));\n    let is_save_value = false;\n    const wholestring = event.target.toString();\n    const store_event = new CustomEvent(\'store-content-db\', {\n      detail: wholestring\n    });\n    const update_event = new CustomEvent(\'cocreate-y-update\', {\n      detail: eventDelta\n    });\n    elements.forEach(el => {\n      if (_cocreatejs.utils.isReadValue(el) && el.getAttribute(\'name\') === info.name) {\n        el.dispatchEvent(update_event);\n      }\n    });\n\n    if (typeof info !== \'object\') {\n      return;\n    }\n\n    if (event.transaction.local) {\n      if (elements.length == 0) {\n        is_save_value = true;\n      }\n\n      elements.forEach(el => {\n        if (el.getAttribute(\'data-save_value\') != \'false\' && el.getAttribute(\'name\') === info.name && info.document_id != "null") {\n          is_save_value = true;\n          el.dispatchEvent(store_event);\n        }\n      });\n\n      if (is_save_value) {\n        _cocreatejs.crud.updateDocument({\n          collection: info.collection,\n          document_id: info.document_id,\n          data: {\n            [info.name]: wholestring\n          },\n          metadata: \'yjs-change\'\n        });\n      }\n    } else {}\n  }\n\n  deleteDoc(id) {\n    const info = this.parseType(id);\n\n    if (this.docs[info.id]) {\n      delete this.docs[info.id];\n    }\n  }\n\n  generateDocName(collection, document_id, name) {\n    const info = {\n      org: this.orgName,\n      collection,\n      document_id,\n      name\n    };\n    return btoa(JSON.stringify(info)); // return this.orgName + "_" + collection + "_" + document_id + "_" + name;\n  }\n\n  insertData(id, index, content, attribute) {\n    const info = this.parseType(id);\n\n    if (this.docs[info.id]) {\n      if (attribute) {\n        this.docs[info.id].doc.getText(id).insert(index, content, attribute);\n      } else {\n        this.docs[info.id].doc.getText(id).insert(index, content);\n      }\n    }\n  }\n\n  deleteData(id, index, length) {\n    const info = this.parseType(id);\n\n    if (this.docs[info.id]) {\n      this.docs[info.id].doc.getText(id).delete(index, length);\n    }\n  }\n\n  getWholeString(id) {\n    const info = this.parseType(id);\n\n    if (this.docs[info.id]) {\n      console.log("!Get data");\n      return this.docs[info.id].doc.getText(id).toString();\n    } else {\n      return "--";\n    }\n  }\n\n  updateRemoteSelection(y, cm, type, cursors, clientId, awareness) {\n    if (debug) console.log("CHANGE ---- DOCID ", this.doc.clientID, \' OTHER CLIENTEID \', clientId);\n\n    if (clientId !== this.doc.clientID) {\n      //console.log("TEXT -> updateRemoteSelection ",clientId,awareness,cursor)\n      //console.log("AW status",awareness.getLocalState())\n      // destroy current text mark\n      const m = cursors.get(clientId);\n\n      if (m !== undefined) {\n        m.caret.clear();\n\n        if (m.sel !== null) {\n          m.sel.clear();\n        }\n\n        cursors.delete(clientId);\n      } // redraw caret and selection for clientId\n\n\n      const aw = awareness.getStates().get(clientId);\n      if (debug) console.log(aw);\n\n      if (aw === undefined) {\n        if (debug) console.log(" Cursor OUT ", clientId); //awareness.setLocalStateField(\'cursor\', null);\n\n        let elements = document.querySelectorAll(\'[id*="socket_\' + clientId + \'"]\');\n        elements.forEach(function (element, index, array) {\n          element.parentNode.removeChild(element);\n        });\n        let sel_elements = document.querySelectorAll(\'[id*="sel-\' + clientId + \'"]\');\n        sel_elements.forEach(function (sel_element, index, array) {\n          sel_element.parentNode.removeChild(sel_element);\n        });\n        /*\n         let element = document.getElementById("socket_"+clientId)\n         let sel_element = document.getElementById("sel-"+clientId)\n         if(element)\n        element.parentNode.removeChild(element);\n        if(sel_element)\n        sel_element.parentNode.removeChild(sel_element);\n         */\n\n        return;\n      }\n\n      const user = aw.user || {};\n\n      if (user.color == null) {\n        user.color = \'#ffa500\';\n      }\n\n      if (user.name == null) {\n        user.name = `User: ${clientId}`;\n      }\n\n      const cursor = aw.cursor;\n      if (debug) console.log("Cursor ", cursor);\n\n      if (cursor == null || cursor.anchor == null || cursor.head == null) {\n        //let element = document.getElementById("socket_"+clientId)\n        let elements = document.querySelectorAll(\'[id*="socket_\' + clientId + \'"]\');\n        elements.forEach(function (element, index, array) {\n          element.parentNode.removeChild(element);\n        }); //let sel_element = document.getElementById("sel-"+clientId)  \n\n        let sel_elements = document.querySelectorAll(\'[id*="sel-\' + clientId + \'"]\');\n        sel_elements.forEach(function (sel_element, index, array) {\n          sel_element.parentNode.removeChild(sel_element);\n        });\n        return;\n      }\n\n      const anchor = Y.createAbsolutePositionFromRelativePosition(Y.createRelativePositionFromJSON(cursor.anchor), y);\n      const head = Y.createAbsolutePositionFromRelativePosition(Y.createRelativePositionFromJSON(cursor.head), y); //CoCreate.cursors.draw_cursor(1,11,12,66,{},true);\n\n      if (debug) {\n        console.log("PRE Draw Cursor ");\n        console.log("anchor  ", anchor, " head ", head, \' Type \', type);\n        console.log("anchor  Type", anchor.type === type);\n        console.log("anchor  Type", head.type === type);\n      } //if (anchor !== null && head !== null && anchor.type === type && head.type === type) {\n\n\n      if (anchor !== null && head !== null) {\n        let from, to;\n\n        if (head.index < anchor.index) {\n          from = head.index;\n          to = anchor.index;\n        } else {\n          if (debug) console.log(anchor.index);\n          from = anchor.index;\n          to = head.index;\n        }\n\n        if (debug) console.log("Draw Cursor ", from, to, clientId, aw.user);\n        let t_info = this.parseTypeName(cursor.anchor[\'tname\']);\n        let id_mirror = t_info.document_id + t_info.name + \'--mirror-div\';\n        let json = {};\n        let selector = \'[data-collection="\' + t_info.collection + \'"][data-document_id="\' + t_info.document_id + \'"][name="\' + t_info.name + \'"]\';\n        selector += \':not(.codemirror):not(.quill):not(.monaco)\';\n        let elements = document.querySelectorAll(selector);\n        let that = this;\n        elements.forEach(function (element, index, array) {\n          json = {\n            element: element,\n            startPosition: from,\n            selector: selector,\n            endPositon: to,\n            clientId: clientId,\n            user: {\n              \'color\': user.color,\n              \'name\': user.name\n            }\n          };\n          console.log(json);\n\n          _cursors.default.draw_cursor(json); //sent custom position\n\n\n          that.listen(json);\n        });\n      }\n    }\n  }\n\n  changeListenAwereness(callback) {\n    this.listenAwereness = callback;\n  }\n\n  listen(json) {\n    this.listenAwereness.apply(this, [json]);\n  }\n\n  destroyObserver(id, element) {\n    const info = this.parseType(id);\n    this.docs[info.id].doc.getText(id).unobserve(event => {});\n    this.docs[info.id].socket.awareness.off(\'change\', this._awarenessListener);\n  }\n\n  getProvider(id) {\n    const info = this.parseType(id);\n\n    if (!this.docs[info.id]) {\n      return null;\n    }\n\n    return this.docs[info.id].socket;\n  }\n\n  getType(id) {\n    const info = this.parseType(id);\n\n    if (!this.docs[info.id]) {\n      return null;\n    }\n\n    return this.docs[info.id].doc.getText(id);\n  }\n\n  setCursorNull(id) {\n    const info = this.parseType(id);\n\n    if (!this.docs[info.id]) {\n      return null;\n    }\n\n    this.docs[info.id].socket.awareness.setLocalStateField(\'cursor\', null);\n  }\n\n  setPositionYJS(id, from, to) {\n    const info = this.parseType(id);\n    const type = this.getType(id); //console.log("Type ",type)\n\n    if (!type) {\n      return;\n    }\n\n    var anchor = Y.createRelativePositionFromTypeIndex(type, from);\n    var head = Y.createRelativePositionFromTypeIndex(type, to);\n    if (debug) console.log("Sending Cursor ", {\n      anchor,\n      head\n    }, {\n      \'to\': to,\n      \'from\': from,\n      \'info.id\': info.id\n    });\n    this.docs[info.id].socket.awareness.setLocalStateField(\'cursor\', {\n      anchor,\n      head\n    });\n    /*\n    if(debug)\n    \tconsole.log("Cursor Send")\n    \t*/\n  } //send Position Custom\n\n\n  sendPosition(json) {\n    let collection = json[\'collection\'];\n    let document_id = json[\'document_id\'];\n    let name = json[\'name\'];\n    let from = json[\'startPosition\'];\n    let to = json[\'endPositon\'];\n    let id = this.generateID(config.organization_Id, collection, document_id, name);\n    this.setPositionYJS(id, from, to);\n  }\n\n  generateID(org, collection, document_id, name) {\n    const info = {\n      org,\n      collection,\n      document_id,\n      name\n    };\n    return btoa(JSON.stringify(info));\n  }\n\n  parseTypeName(name) {\n    const data = JSON.parse(atob(name));\n    return data;\n  }\n\n  parseType(id) {\n    let data = JSON.parse(atob(id));\n    let newId = {\n      org: data.org,\n      collection: data.collection,\n      document_id: data.document_id\n    };\n    return {\n      id: btoa(JSON.stringify(newId)),\n      name: data.name,\n      document_id: data.document_id\n    };\n  }\n\n}\n\nvar _default = CoCreateYSocket;\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../CoCreate-crdt/src/core.js\n')},"../CoCreate-crdt/src/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = void 0;\n\nvar _core = _interopRequireDefault(__webpack_require__(/*! ./core.js */ \"../CoCreate-crdt/src/core.js\"));\n\nvar Y = _interopRequireWildcard(__webpack_require__(/*! yjs */ \"../CoCreate-crdt/node_modules/yjs/dist/yjs.cjs\"));\n\nvar _cocreatejs = __webpack_require__(/*! @cocreate/cocreatejs */ \"../../CoCreateJS/src/index.js\");\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nclass CoCreateCRDTClass extends _core.default {\n  constructor(org, doc) {\n    super(org, doc);\n  }\n  /*\n  crdt.init({\n    collection: \"module\",\n    document_id: \"\",\n    name: \"\",\n    element: dom_object,\n    metadata: \"xxxx\"\n  })\n  */\n\n\n  init(info) {\n    try {\n      this.__validateKeysJson(info, ['collection', 'document_id', 'name']);\n\n      const id = this.__getYDocId(info['collection'], info['document_id'], info['name']);\n\n      if (!id) return;\n      const status = this.createDoc(id, info.element);\n      console.log(\"InitCrdt\");\n    } catch (e) {\n      console.log('Invalid param', e);\n    }\n  }\n  /*. init data function\n  crdt.replaceText({\n    collection: \"module\",\n    document_id: \"\",\n    name: \"\",\n    value: \"\",\n    updateCrud: true | false,\n    element: dom_object,\n    metadata: \"xxxx\"\n  })\n  */\n\n\n  replaceText(info) {\n    if (!info) return;\n\n    const id = this.__getYDocId(info.collection, info.document_id, info.name);\n\n    if (!id) return;\n    if (info.updateCrud != false) info.updateCrud = true;\n\n    if (this.getType(id)) {\n      let oldData = this.getType(id).toString();\n      let textValue = info.value.toString();\n\n      if (oldData && oldData.length > 0) {\n        this.deleteData(id, 0, Math.max(oldData.length, textValue.length));\n      }\n\n      this.insertData(id, 0, textValue);\n    }\n\n    if (info.updateCrud) {\n      _cocreatejs.crud.updateDocument({\n        collection: info.collection,\n        document_id: info.document_id,\n        data: {\n          [info.name]: info.value\n        },\n        element: info.element,\n        metadata: info.metadata,\n        namespace: info.namespace,\n        room: info.room,\n        broadcast: info.broadcast,\n        upsert: info.upsert,\n        broadcast_sender: info.broadcast_sender\n      });\n    }\n  }\n  /*\n  crdt.insertText({\n  \tcollection: 'module_activities',\n  \tdocument_id: '5e4802ce3ed96d38e71fc7e5',\n  \tname: 'name',\n  \tvalue: 'T',\n  \tposition: '8',\n  \tattributes: {bold: true}\n  })\n  */\n\n\n  insertText(info) {\n    try {\n      this.__validateKeysJson(info, ['collection', 'document_id', 'name', 'value', 'position']);\n\n      let id = this.__getYDocId(info['collection'], info['document_id'], info['name']);\n\n      if (id) {\n        this.insertData(id, info['position'], info['value'].toString(), info['attributes']);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  /*\n  crdt.deleteText({\n  \tcollection: 'module_activities',\n  \tdocument_id: '5e4802ce3ed96d38e71fc7e5',\n  \tname: 'name',\n  \tposition: '8',\n  \tlength: 2,\n  })\n  */\n\n\n  deleteText(info) {\n    try {\n      this.__validateKeysJson(info, ['collection', 'document_id', 'name', 'position', 'length']);\n\n      let id = this.__getYDocId(info['collection'], info['document_id'], info['name']);\n\n      if (id) {\n        this.deleteData(id, info['position'], info['length']);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  /*\n  crdt.getText({\n  \tcollection: 'module_activities',\n  \tdocument_id: '5e4802ce3ed96d38e71fc7e5',\n  \tname: 'name'\n  })\n  */\n\n\n  getText(info) {\n    try {\n      this.__validateKeysJson(info, ['collection', 'document_id', 'name']);\n\n      let id = this.__getYDocId(info['collection'], info['document_id'], info['name']);\n\n      if (id) {\n        return this.getWholeString(id);\n      } else {\n        return \"\";\n      }\n    } catch (e) {\n      console.error(e);\n      return \"\";\n    }\n  }\n  /* \n  crdt.getPosition(function(data))\n  crdt.getPosition(function(data){console.log(\" EScuchando ahora  \",data)})\n  */\n\n\n  getPosition(callback) {\n    if (typeof miFuncion === 'function') this.changeListenAwereness(callback);else console.error('Callback should be a function');\n  }\n\n  __getYDocId(collection, document_id, name) {\n    if (!_cocreatejs.utils.checkValue(collection) || !_cocreatejs.utils.checkValue(document_id) || !_cocreatejs.utils.checkValue(name)) {\n      return null;\n    }\n\n    return this.generateID(config.organization_Id, collection, document_id, name);\n  }\n\n  __validateKeysJson(json, rules) {\n    let keys_json = Object.keys(json);\n    keys_json.forEach(key => {\n      const index = rules.indexOf(key);\n      if (index != -1) rules.splice(index, 1);\n    });\n    if (rules.length) throw \"Requires the following \" + rules.toString();\n  }\n\n}\n\nconst g_yDoc = new Y.Doc();\nlet CoCreateCrdt = new CoCreateCRDTClass(config.organization_Id, g_yDoc);\nwindow.Y = Y;\nvar _default = CoCreateCrdt;\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../CoCreate-crdt/src/index.js\n")},"../CoCreate-crud/src/common-fun.js":(__unused_webpack_module,exports)=>{eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.getCommonParams = getCommonParams;\nexports.getCommonParamsExtend = getCommonParamsExtend;\nexports.generateSocketClient = generateSocketClient;\n\nfunction getCommonParams() {\n  return {\n    "apiKey": config.apiKey,\n    "securityKey": config.securityKey,\n    "organization_id": config.organization_Id\n  };\n}\n\nfunction getCommonParamsExtend(info) {\n  return {\n    "apiKey": info.apiKey || config.apiKey,\n    "securityKey": info.securityKey || config.securityKey,\n    "organization_id": info.organization_id || config.organization_Id\n  };\n}\n\nfunction generateSocketClient(namespace, room) {\n  let ns = namespace || config.organization_Id;\n  let rr = room || \'\';\n\n  if (rr) {\n    return `${ns}/${rr}`;\n  } else {\n    return ns;\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS5hdHRyaWJ1dGVzLy4uL0NvQ3JlYXRlLWNydWQvc3JjL2NvbW1vbi1mdW4uanM/YWM5NiJdLCJuYW1lcyI6WyJnZXRDb21tb25QYXJhbXMiLCJjb25maWciLCJhcGlLZXkiLCJzZWN1cml0eUtleSIsIm9yZ2FuaXphdGlvbl9JZCIsImdldENvbW1vblBhcmFtc0V4dGVuZCIsImluZm8iLCJvcmdhbml6YXRpb25faWQiLCJnZW5lcmF0ZVNvY2tldENsaWVudCIsIm5hbWVzcGFjZSIsInJvb20iLCJucyIsInJyIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSxTQUFTQSxlQUFULEdBQ0E7QUFDRSxTQUFPO0FBQ0wsY0FBb0JDLE1BQU0sQ0FBQ0MsTUFEdEI7QUFFTCxtQkFBb0JELE1BQU0sQ0FBQ0UsV0FGdEI7QUFHTCx1QkFBb0JGLE1BQU0sQ0FBQ0c7QUFIdEIsR0FBUDtBQUtEOztBQUVELFNBQVNDLHFCQUFULENBQStCQyxJQUEvQixFQUNBO0FBQ0UsU0FBTztBQUNMLGNBQW9CQSxJQUFJLENBQUNKLE1BQUwsSUFBZUQsTUFBTSxDQUFDQyxNQURyQztBQUVMLG1CQUFvQkksSUFBSSxDQUFDSCxXQUFMLElBQW9CRixNQUFNLENBQUNFLFdBRjFDO0FBR0wsdUJBQW9CRyxJQUFJLENBQUNDLGVBQUwsSUFBd0JOLE1BQU0sQ0FBQ0c7QUFIOUMsR0FBUDtBQUtEOztBQUVELFNBQVNJLG9CQUFULENBQStCQyxTQUEvQixFQUEwQ0MsSUFBMUMsRUFDQTtBQUNFLE1BQUlDLEVBQUUsR0FBR0YsU0FBUyxJQUFJUixNQUFNLENBQUNHLGVBQTdCO0FBQ0EsTUFBSVEsRUFBRSxHQUFHRixJQUFJLElBQUksRUFBakI7O0FBQ0EsTUFBSUUsRUFBSixFQUFRO0FBQ04sV0FBUSxHQUFFRCxFQUFHLElBQUdDLEVBQUcsRUFBbkI7QUFDRCxHQUZELE1BRU87QUFDTCxXQUFPRCxFQUFQO0FBQ0Q7QUFDRiIsImZpbGUiOiIuLi9Db0NyZWF0ZS1jcnVkL3NyYy9jb21tb24tZnVuLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gZ2V0Q29tbW9uUGFyYW1zKCkgXG57XG4gIHJldHVybiB7XG4gICAgXCJhcGlLZXlcIjogICAgICAgICAgIGNvbmZpZy5hcGlLZXksXG4gICAgXCJzZWN1cml0eUtleVwiOiAgICAgIGNvbmZpZy5zZWN1cml0eUtleSxcbiAgICBcIm9yZ2FuaXphdGlvbl9pZFwiOiAgY29uZmlnLm9yZ2FuaXphdGlvbl9JZCxcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRDb21tb25QYXJhbXNFeHRlbmQoaW5mbykgXG57XG4gIHJldHVybiB7XG4gICAgXCJhcGlLZXlcIjogICAgICAgICAgIGluZm8uYXBpS2V5IHx8IGNvbmZpZy5hcGlLZXksXG4gICAgXCJzZWN1cml0eUtleVwiOiAgICAgIGluZm8uc2VjdXJpdHlLZXkgfHwgY29uZmlnLnNlY3VyaXR5S2V5LFxuICAgIFwib3JnYW5pemF0aW9uX2lkXCI6ICBpbmZvLm9yZ2FuaXphdGlvbl9pZCB8fCBjb25maWcub3JnYW5pemF0aW9uX0lkLFxuICB9XG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlU29ja2V0Q2xpZW50IChuYW1lc3BhY2UsIHJvb20pIFxue1xuICBsZXQgbnMgPSBuYW1lc3BhY2UgfHwgY29uZmlnLm9yZ2FuaXphdGlvbl9JZFxuICBsZXQgcnIgPSByb29tIHx8ICcnO1xuICBpZiAocnIpIHtcbiAgICByZXR1cm4gYCR7bnN9LyR7cnJ9YFxuICB9IGVsc2Uge1xuICAgIHJldHVybiBucztcbiAgfVxufVxuXG5leHBvcnQge2dldENvbW1vblBhcmFtcywgZ2V0Q29tbW9uUGFyYW1zRXh0ZW5kLCBnZW5lcmF0ZVNvY2tldENsaWVudH07Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../CoCreate-crud/src/common-fun.js\n')},"../CoCreate-crud/src/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = void 0;\n\nvar _socket = _interopRequireDefault(__webpack_require__(/*! @cocreate/socket */ \"../CoCreate-socket/src/index.js\"));\n\nvar _commonFun = __webpack_require__(/*! @cocreate/crud/src/common-fun.js */ \"../CoCreate-crud/src/common-fun.js\");\n\nvar _utilsCrud = _interopRequireDefault(__webpack_require__(/*! @cocreate/crud/src/utils.crud.js */ \"../CoCreate-crud/src/utils.crud.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nlet crud_socket = new _socket.default('ws'); // let crud = CRUD(socket)\n// var data = {\n//   \"org_id\": \"xxx\",\n//   \"customer.name\": \"Jin\",\n//   \"customer.fristname\": \"Jin\",\n//   \"customer.lastname\": \"CF\",\n//   \"customer.address.line1\": \"line1\",\n//   \"customer.address.line2\": \"line2\",\n//   'scope[0]': 'testing',\n//   'scope[1]': '---',\n//   \"customer.orders[0]\": 123,\n//   \"customer.orders[1]\": 243,\n// }\n// var obj = {\n//   test: {\n//     \"name\": '123',\n//     \"address\": 'address',\n//     \"customer\": {\n//       \"name\": 'tttt'\n//     },\n//     \"orders\": [1,2,3]\n//   }\n// }\n// console.log('----- convert object -----')\n// console.log(utilsCrud.decodeObject(data));\n// console.log(utilsCrud.encodeObject(obj));\n\nconst CoCreateCRUD = {\n  socket: null,\n  setSocket: function (socket) {\n    this.socket = socket;\n  },\n\n  /*\n   \n    CoCreate.crud.readDcoumentList {\n      collection: \"modules\",\n      element: \"xxxx\",\n      metadata: \"\",\n      operator: {\n        fetch: {\n          name: 'xxxx',\n          value: 'xxxxx'\n        },\n        filters: [{\n          name: 'field1',\n          operator: \"contain | range | eq | ne | lt | lte | gt | gte | in | nin\",\n          value: [v1, v2, ...]\n        }, {\n          name: \"_id\",\n          opreator: \"in\",\n          value: [\"id1\"]\n        }, {\n          ....\n        }],\n        orders: [{\n          name: 'field-x',\n          type: 1 | -1\n        }],\n        search: {\n          type: 'or | and',\n          value: [value1, value2]\n        },\n        \n        startIndex: 0 (integer),\n        count: 0 (integer)\n      },\n      \n      is_collection: true | false,\n      //. case fetch document case\n      created_ids : [id1, id2, ...],\n      \n      \n      -------- additional response data -----------\n      data: [] // array\n    }\n  */\n  readDocumentList(info) {\n    if (!info) return;\n    let request_data = (0, _commonFun.getCommonParams)();\n\n    if (!info.collection || !info.operator) {\n      return;\n    }\n\n    request_data = { ...request_data,\n      ...info\n    };\n    this.socket.send('readDocumentList', request_data);\n  },\n\n  /*\n  CoCreate.crud.createDocument({\n    namespace:'',\n    room:'',\n    broadcast: true/false, (default=ture)\n    broadcast_sender: true/false, (default=true) \n    \n    collection: \"test123\",\n    data:{\n    \tname1:“hello”,\n    \tname2:  “hello1”\n    },\n    element: “xxxx”,\n    metaData: \"xxxx\"\n  }),\n  */\n  // data param needs organization_id field added to pass security check\n  createDocument: function (info) {\n    if (info === null) {\n      return;\n    }\n\n    let commonData = (0, _commonFun.getCommonParamsExtend)(info);\n    let request_data = { ...info,\n      ...commonData\n    };\n    let data = info.data || {};\n\n    if (!data['organization_id']) {\n      data['organization_id'] = config.organization_Id;\n    }\n\n    if (info['data']) {\n      data = { ...data,\n        ...info['data']\n      };\n    } //. rebuild data\n\n\n    request_data['data'] = data;\n    /** socket parameters **/\n    // if (info['broadcast'] === undefined) {\n    //   request_data['broadcast'] = true;\n    // }\n    // if (info['broadcast_sender'] === undefined) {\n    //   request_data['broadcast_sender'] = true;\n    // }\n\n    const room = (0, _commonFun.generateSocketClient)(info.namespace, info.room);\n    this.socket.send('createDocument', request_data, room);\n  },\n\n  /*\n  CoCreate.crud.updateDocument({\n    namespace: '',\n    room: '',\n    broadcast: true/false,\n    broadcast_sender: true/false,\n    \n    collection: \"test123\",\n    document_id: \"document_id\",\n    data:{\n    \tname1:“hello”,\n    \tname2:  “hello1”\n    },\n    delete_fields:[\"name3\", \"name4\"],\n    element: “xxxx”,\n    metaData: \"xxxx\"\n  }),\n  */\n  updateDocument: function (info) {\n    if (!info || !info['document_id']) return;\n    let commonData = (0, _commonFun.getCommonParamsExtend)(info);\n    let request_data = { ...info,\n      ...commonData\n    };\n\n    if (typeof info['data'] === 'object') {\n      request_data['set'] = info['data'];\n    }\n\n    if (Array.isArray(info['delete_fields'])) request_data['unset'] = info['delete_fields'];\n    if (!request_data['set'] && !request_data['unset']) return;\n\n    if (info.broadcast === false) {\n      request_data['broadcast'] = false;\n    }\n    /** socket parameters **/\n\n\n    if (info['broadcast_sender'] === undefined) {\n      request_data['broadcast_sender'] = true;\n    }\n\n    const room = (0, _commonFun.generateSocketClient)(info.namespace, info.room);\n    this.socket.send('updateDocument', request_data, room);\n  },\n\n  /*\n  CoCreate.crud.readDocument({\n    collection: \"test123\",\n    document_id: \"document_id\",\n    element: “xxxx”,\n    metaData: \"xxxx\",\n    exclude_fields: [] \n  }),\n  */\n  readDocument: function (info) {\n    if (info === null) {\n      return;\n    }\n\n    if (!info['document_id'] || !info) {\n      return;\n    }\n\n    let commonData = (0, _commonFun.getCommonParams)();\n    let request_data = { ...info,\n      ...commonData\n    };\n    this.socket.send('readDocument', request_data);\n  },\n\n  /*\n  CoCreate.crud.deleteDocument({\n    namespace: '',\n    room: '',\n    broadcast: true/false,\n    broadcast_sender: true/false,\n    \n    collection: \"module\",\n    document_id: \"\",\n    element: “xxxx”,\n    metadata: \"xxxx\"\n  }),\n  */\n  deleteDocument: function (info) {\n    if (!info['document_id'] || !info) {\n      return;\n    }\n\n    let commonData = (0, _commonFun.getCommonParams)();\n    let request_data = { ...info,\n      ...commonData\n    };\n    /** socket parameters **/\n    // if (info['broadcast'] === undefined) {\n    //   request_data['broadcast'] = true;\n    // }\n    // if (info['broadcast_sender'] === undefined) {\n    //   request_data['broadcast_sender'] = true;\n    // }\n\n    const room = (0, _commonFun.generateSocketClient)(info.namespace, info.room);\n    this.socket.send('deleteDocument', request_data, room);\n  },\n\n  /** export / import db functions **/\n\n  /*\n  readDocument({\n   collection: \"test123\",\n   element: “xxxx”,\n   metaData: \"xxxx\",\n  }),\n  */\n  exportCollection: function (info) {\n    if (info === null) {\n      return;\n    }\n\n    let request_data = (0, _commonFun.getCommonParams)();\n    request_data['collection'] = info['collection'];\n    request_data['export_type'] = info['export_type'];\n    request_data['metadata'] = info['metadata'];\n    this.socket.send('exportDB', request_data);\n  },\n\n  /*\n  readDocument({\n    collection: \"test123\",\n    file: file\n  }),\n  */\n  importCollection: function (info) {\n    const {\n      file\n    } = info;\n\n    if (info === null || !(file instanceof File)) {\n      return;\n    }\n\n    const extension = file.name.split(\".\").pop();\n\n    if (!['json', 'csv'].some(item => item === extension)) {\n      return;\n    }\n\n    let request_data = (0, _commonFun.getCommonParams)();\n    request_data['collection'] = info['collection'];\n    request_data['import_type'] = extension;\n    this.socket.send('importDB', request_data);\n    this.socket.sendFile(file);\n  },\n  listen: function (message, fun) {\n    this.socket.listen(message, fun);\n  },\n  listenAsync: function (eventname) {\n    this.socket.listenAsync(eventname);\n  },\n  createSocket: function (host, namespace) {\n    if (namespace) {\n      this.socket.create({\n        namespace: namespace,\n        room: null,\n        host: host\n      });\n      this.socket.setGlobalScope(namespace);\n    } else {\n      this.socket.create({\n        namespace: null,\n        room: null,\n        host: host\n      });\n    }\n  }\n};\nCoCreateCRUD.setSocket(crud_socket);\nCoCreateCRUD.createSocket(window.config.host ? window.config.host : 'server.cocreate.app', window.config.organization_Id);\nvar _default = CoCreateCRUD;\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS5hdHRyaWJ1dGVzLy4uL0NvQ3JlYXRlLWNydWQvc3JjL2luZGV4LmpzPzRmNzUiXSwibmFtZXMiOlsiY3J1ZF9zb2NrZXQiLCJDb0NyZWF0ZVNvY2tldCIsIkNvQ3JlYXRlQ1JVRCIsInNvY2tldCIsInNldFNvY2tldCIsInJlYWREb2N1bWVudExpc3QiLCJpbmZvIiwicmVxdWVzdF9kYXRhIiwiY29sbGVjdGlvbiIsIm9wZXJhdG9yIiwic2VuZCIsImNyZWF0ZURvY3VtZW50IiwiY29tbW9uRGF0YSIsImRhdGEiLCJjb25maWciLCJvcmdhbml6YXRpb25fSWQiLCJyb29tIiwibmFtZXNwYWNlIiwidXBkYXRlRG9jdW1lbnQiLCJBcnJheSIsImlzQXJyYXkiLCJicm9hZGNhc3QiLCJ1bmRlZmluZWQiLCJyZWFkRG9jdW1lbnQiLCJkZWxldGVEb2N1bWVudCIsImV4cG9ydENvbGxlY3Rpb24iLCJpbXBvcnRDb2xsZWN0aW9uIiwiZmlsZSIsIkZpbGUiLCJleHRlbnNpb24iLCJuYW1lIiwic3BsaXQiLCJwb3AiLCJzb21lIiwiaXRlbSIsInNlbmRGaWxlIiwibGlzdGVuIiwibWVzc2FnZSIsImZ1biIsImxpc3RlbkFzeW5jIiwiZXZlbnRuYW1lIiwiY3JlYXRlU29ja2V0IiwiaG9zdCIsImNyZWF0ZSIsInNldEdsb2JhbFNjb3BlIiwid2luZG93Il0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7Ozs7QUFFQSxJQUFJQSxXQUFXLEdBQUcsSUFBSUMsZUFBSixDQUFtQixJQUFuQixDQUFsQixDLENBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxNQUFNQyxZQUFZLEdBQUc7QUFDbkJDLFFBQU0sRUFBRSxJQURXO0FB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QixTQUEzQjtBQUNBLEtBUEQsTUFPTztBQUNOLFdBQUtkLE1BQUwsQ0FBWXdDLE1BQVosQ0FBbUI7QUFDbEIxQixpQkFBUyxFQUFFLElBRE87QUFFbEJELFlBQUksRUFBRSxJQUZZO0FBR2xCMEIsWUFBSSxFQUFFQTtBQUhZLE9BQW5CO0FBS0E7QUFDRDtBQWhTbUIsQ0FBckI7QUFtU0F4QyxZQUFZLENBQUNFLFNBQWIsQ0FBdUJKLFdBQXZCO0FBQ0FFLFlBQVksQ0FBQ3VDLFlBQWIsQ0FBMEJJLE1BQU0sQ0FBQy9CLE1BQVAsQ0FBYzRCLElBQWQsR0FBcUJHLE1BQU0sQ0FBQy9CLE1BQVAsQ0FBYzRCLElBQW5DLEdBQTBDLHFCQUFwRSxFQUEyRkcsTUFBTSxDQUFDL0IsTUFBUCxDQUFjQyxlQUF6RztlQUVlYixZIiwiZmlsZSI6Ii4uL0NvQ3JlYXRlLWNydWQvc3JjL2luZGV4LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IENvQ3JlYXRlU29ja2V0IGZyb20gXCJAY29jcmVhdGUvc29ja2V0XCJcbmltcG9ydCB7Z2V0Q29tbW9uUGFyYW1zLCBnZXRDb21tb25QYXJhbXNFeHRlbmQsIGdlbmVyYXRlU29ja2V0Q2xpZW50fSBmcm9tIFwiQGNvY3JlYXRlL2NydWQvc3JjL2NvbW1vbi1mdW4uanNcIlxuaW1wb3J0IHV0aWxzQ3J1ZCBmcm9tIFwiQGNvY3JlYXRlL2NydWQvc3JjL3V0aWxzLmNydWQuanNcIlxuXG5sZXQgY3J1ZF9zb2NrZXQgPSBuZXcgQ29DcmVhdGVTb2NrZXQoJ3dzJyk7XG5cbi8vIGxldCBjcnVkID0gQ1JVRChzb2NrZXQpXG5cbi8vIHZhciBkYXRhID0ge1xuLy8gICBcIm9yZ19pZFwiOiBcInh4eFwiLFxuLy8gICBcImN1c3RvbWVyLm5hbWVcIjogXCJKaW5cIixcbi8vICAgXCJjdXN0b21lci5mcmlzdG5hbWVcIjogXCJKaW5cIixcbi8vICAgXCJjdXN0b21lci5sYXN0bmFtZVwiOiBcIkNGXCIsXG4vLyAgIFwiY3VzdG9tZXIuYWRkcmVzcy5saW5lMVwiOiBcImxpbmUxXCIsXG4vLyAgIFwiY3VzdG9tZXIuYWRkcmVzcy5saW5lMlwiOiBcImxpbmUyXCIsXG4vLyAgICdzY29wZVswXSc6ICd0ZXN0aW5nJyxcbi8vICAgJ3Njb3BlWzFdJzogJy0tLScsXG4vLyAgIFwiY3VzdG9tZXIub3JkZXJzWzBdXCI6IDEyMyxcbi8vICAgXCJjdXN0b21lci5vcmRlcnNbMV1cIjogMjQzLFxuLy8gfVxuXG4vLyB2YXIgb2JqID0ge1xuLy8gICB0ZXN0OiB7XG4vLyAgICAgXCJuYW1lXCI6ICcxMjMnLFxuLy8gICAgIFwiYWRkcmVzc1wiOiAnYWRkcmVzcycsXG4vLyAgICAgXCJjdXN0b21lclwiOiB7XG4vLyAgICAgICBcIm5hbWVcIjogJ3R0dHQnXG4vLyAgICAgfSxcbi8vICAgICBcIm9yZGVyc1wiOiBbMSwyLDNdXG4vLyAgIH1cbi8vIH1cbi8vIGNvbnNvbGUubG9nKCctLS0tLSBjb252ZXJ0IG9iamVjdCAtLS0tLScpXG4vLyBjb25zb2xlLmxvZyh1dGlsc0NydWQuZGVjb2RlT2JqZWN0KGRhdGEpKTtcbi8vIGNvbnNvbGUubG9nKHV0aWxzQ3J1ZC5lbmNvZGVPYmplY3Qob2JqKSk7XG5cbmNvbnN0IENvQ3JlYXRlQ1JVRCA9IHtcbiAgc29ja2V0OiBudWxsLFxuICBzZXRTb2NrZXQ6IGZ1bmN0aW9uKHNvY2tldCkge1xuICAgIHRoaXMuc29ja2V0ID0gc29ja2V0O1xuICB9LFxuICAvKlxuICAgXG4gICAgQ29DcmVhdGUuY3J1ZC5yZWFkRGNvdW1lbnRMaXN0IHtcbiAgICAgIGNvbGxlY3Rpb246IFwibW9kdWxlc1wiLFxuICAgICAgZWxlbWVudDogXCJ4eHh4XCIsXG4gICAgICBtZXRhZGF0YTogXCJcIixcbiAgICAgIG9wZXJhdG9yOiB7XG4gICAgICAgIGZldGNoOiB7XG4gICAgICAgICAgbmFtZTogJ3h4eHgnLFxuICAgICAgICAgIHZhbHVlOiAneHh4eHgnXG4gICAgICAgIH0sXG4gICAgICAgIGZpbHRlcnM6IFt7XG4gICAgICAgICAgbmFtZTogJ2ZpZWxkMScsXG4gICAgICAgICAgb3BlcmF0b3I6IFwiY29udGFpbiB8IHJhbmdlIHwgZXEgfCBuZSB8IGx0IHwgbHRlIHwgZ3QgfCBndGUgfCBpbiB8IG5pblwiLFxuICAgICAgICAgIHZhbHVlOiBbdjEsIHYyLCAuLi5dXG4gICAgICAgIH0sIHtcbiAgICAgICAgICBuYW1lOiBcIl9pZFwiLFxuICAgICAgICAgIG9wcmVhdG9yOiBcImluXCIsXG4gICAgICAgICAgdmFsdWU6IFtcImlkMVwiXVxuICAgICAgICB9LCB7XG4gICAgICAgICAgLi4uLlxuICAgICAgICB9XSxcbiAgICAgICAgb3JkZXJzOiBbe1xuICAgICAgICAgIG5hbWU6ICdmaWVsZC14JyxcbiAgICAgICAgICB0eXBlOiAxIHwgLTFcbiAgICAgICAgfV0sXG4gICAgICAgIHNlYXJjaDoge1xuICAgICAgICAgIHR5cGU6ICdvciB8IGFuZCcsXG4gICAgICAgICAgdmFsdWU6IFt2YWx1ZTEsIHZhbHVlMl1cbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIHN0YXJ0SW5kZXg6IDAgKGludGVnZXIpLFxuICAgICAgICBjb3VudDogMCAoaW50ZWdlcilcbiAgICAgIH0sXG4gICAgICBcbiAgICAgIGlzX2NvbGxlY3Rpb246IHRydWUgfCBmYWxzZSxcbiAgICAgIC8vLiBjYXNlIGZldGNoIGRvY3VtZW50IGNhc2VcbiAgICAgIGNyZWF0ZWRfaWRzIDogW2lkMSwgaWQyLCAuLi5dLFxuICAgICAgXG4gICAgICBcbiAgICAgIC0tLS0tLS0tIGFkZGl0aW9uYWwgcmVzcG9uc2UgZGF0YSAtLS0tLS0tLS0tLVxuICAgICAgZGF0YTogW10gLy8gYXJyYXlcbiAgICB9XG4gICovXG4gIFxuICByZWFkRG9jdW1lbnRMaXN0KGluZm8pe1xuICAgIGlmKCAhaW5mbyApIHJldHVybjtcbiAgICBsZXQgcmVxdWVzdF9kYXRhID0gZ2V0Q29tbW9uUGFyYW1zKCk7XG4gICAgXG4gICAgaWYgKCFpbmZvLmNvbGxlY3Rpb24gfHwgIWluZm8ub3BlcmF0b3IpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgXG4gICAgcmVxdWVzdF9kYXRhID0gey4uLnJlcXVlc3RfZGF0YSwgLi4uaW5mb307XG4gICAgXG4gICAgdGhpcy5zb2NrZXQuc2VuZCgncmVhZERvY3VtZW50TGlzdCcsIHJlcXVlc3RfZGF0YSk7XG4gIH0sXG4gIFxuICBcbiAgLypcbiAgQ29DcmVhdGUuY3J1ZC5jcmVhdGVEb2N1bWVudCh7XG4gICAgbmFtZXNwYWNlOicnLFxuICAgIHJvb206JycsXG4gICAgYnJvYWRjYXN0OiB0cnVlL2ZhbHNlLCAoZGVmYXVsdD10dXJlKVxuICAgIGJyb2FkY2FzdF9zZW5kZXI6IHRydWUvZmFsc2UsIChkZWZhdWx0PXRydWUpIFxuICAgIFxuICAgIGNvbGxlY3Rpb246IFwidGVzdDEyM1wiLFxuICAgIGRhdGE6e1xuICAgIFx0bmFtZTE64oCcaGVsbG/igJ0sXG4gICAgXHRuYW1lMjogIOKAnGhlbGxvMeKAnVxuICAgIH0sXG4gICAgZWxlbWVudDog4oCceHh4eOKAnSxcbiAgICBtZXRhRGF0YTogXCJ4eHh4XCJcbiAgfSksXG4gICovXG4gIC8vIGRhdGEgcGFyYW0gbmVlZHMgb3JnYW5pemF0aW9uX2lkIGZpZWxkIGFkZGVkIHRvIHBhc3Mgc2VjdXJpdHkgY2hlY2tcbiAgY3JlYXRlRG9jdW1lbnQ6IGZ1bmN0aW9uKGluZm8pIHtcbiAgICBpZiAoaW5mbyA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsZXQgY29tbW9uRGF0YSA9IGdldENvbW1vblBhcmFtc0V4dGVuZChpbmZvKTtcbiAgICBsZXQgcmVxdWVzdF9kYXRhID0gey4uLmluZm8sIC4uLmNvbW1vbkRhdGF9O1xuXG4gICAgbGV0IGRhdGEgPSBpbmZvLmRhdGEgfHwge307XG4gICAgXG4gICAgaWYgKCFkYXRhWydvcmdhbml6YXRpb25faWQnXSkge1xuICAgICAgZGF0YVsnb3JnYW5pemF0aW9uX2lkJ10gPSBjb25maWcub3JnYW5pemF0aW9uX0lkXG4gICAgfVxuICAgIGlmIChpbmZvWydkYXRhJ10pIHtcbiAgICAgIGRhdGEgPSB7Li4uZGF0YSwgLi4uaW5mb1snZGF0YSddfVxuICAgIH1cbiAgICBcbiAgICAvLy4gcmVidWlsZCBkYXRhXG4gICAgcmVxdWVzdF9kYXRhWydkYXRhJ10gPSBkYXRhO1xuXG4gICAgLyoqIHNvY2tldCBwYXJhbWV0ZXJzICoqL1xuICAgIC8vIGlmIChpbmZvWydicm9hZGNhc3QnXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gICByZXF1ZXN0X2RhdGFbJ2Jyb2FkY2FzdCddID0gdHJ1ZTtcbiAgICAvLyB9XG4gICAgLy8gaWYgKGluZm9bJ2Jyb2FkY2FzdF9zZW5kZXInXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gICByZXF1ZXN0X2RhdGFbJ2Jyb2FkY2FzdF9zZW5kZXInXSA9IHRydWU7XG4gICAgLy8gfVxuICAgIFxuICAgIGNvbnN0IHJvb20gPSBnZW5lcmF0ZVNvY2tldENsaWVudChpbmZvLm5hbWVzcGFjZSwgaW5mby5yb29tKTtcbiAgICB0aGlzLnNvY2tldC5zZW5kKCdjcmVhdGVEb2N1bWVudCcsIHJlcXVlc3RfZGF0YSwgcm9vbSk7XG4gIH0sXG4gIFxuXG4gIFxuXG4gIC8qXG4gIENvQ3JlYXRlLmNydWQudXBkYXRlRG9jdW1lbnQoe1xuICAgIG5hbWVzcGFjZTogJycsXG4gICAgcm9vbTogJycsXG4gICAgYnJvYWRjYXN0OiB0cnVlL2ZhbHNlLFxuICAgIGJyb2FkY2FzdF9zZW5kZXI6IHRydWUvZmFsc2UsXG4gICAgXG4gICAgY29sbGVjdGlvbjogXCJ0ZXN0MTIzXCIsXG4gICAgZG9jdW1lbnRfaWQ6IFwiZG9jdW1lbnRfaWRcIixcbiAgICBkYXRhOntcbiAgICBcdG5hbWUxOuKAnGhlbGxv4oCdLFxuICAgIFx0bmFtZTI6ICDigJxoZWxsbzHigJ1cbiAgICB9LFxuICAgIGRlbGV0ZV9maWVsZHM6W1wibmFtZTNcIiwgXCJuYW1lNFwiXSxcbiAgICBlbGVtZW50OiDigJx4eHh44oCdLFxuICAgIG1ldGFEYXRhOiBcInh4eHhcIlxuICB9KSxcbiAgKi9cbiAgdXBkYXRlRG9jdW1lbnQ6IGZ1bmN0aW9uKGluZm8pIHtcbiAgICBpZiggIWluZm8gfHwgIWluZm9bJ2RvY3VtZW50X2lkJ10gKSByZXR1cm47XG4gICAgXG4gICAgbGV0IGNvbW1vbkRhdGEgPSBnZXRDb21tb25QYXJhbXNFeHRlbmQoaW5mbyk7XG4gICAgXG4gICAgbGV0IHJlcXVlc3RfZGF0YSA9IHsuLi5pbmZvLCAuLi5jb21tb25EYXRhfTtcbiAgICBcbiAgICBpZiggdHlwZW9mIGluZm9bJ2RhdGEnXSA9PT0gJ29iamVjdCcgKSB7XG4gICAgICByZXF1ZXN0X2RhdGFbJ3NldCddID0gaW5mb1snZGF0YSddXG4gICAgfVxuICAgIGlmKCBBcnJheS5pc0FycmF5KGluZm9bJ2RlbGV0ZV9maWVsZHMnXSkgKSByZXF1ZXN0X2RhdGFbJ3Vuc2V0J10gPSBpbmZvWydkZWxldGVfZmllbGRzJ107XG4gICAgXG4gICAgaWYoIXJlcXVlc3RfZGF0YVsnc2V0J10gJiYgIXJlcXVlc3RfZGF0YVsndW5zZXQnXSkgcmV0dXJuO1xuICAgIFxuICAgIGlmIChpbmZvLmJyb2FkY2FzdCA9PT0gZmFsc2UpIHtcbiAgICAgIHJlcXVlc3RfZGF0YVsnYnJvYWRjYXN0J10gPSBmYWxzZTtcbiAgICB9XG4gICAgXG4gICAgLyoqIHNvY2tldCBwYXJhbWV0ZXJzICoqL1xuICAgIGlmIChpbmZvWydicm9hZGNhc3Rfc2VuZGVyJ10gPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmVxdWVzdF9kYXRhWydicm9hZGNhc3Rfc2VuZGVyJ10gPSB0cnVlO1xuICAgIH1cbiAgICBcbiAgICBjb25zdCByb29tID0gZ2VuZXJhdGVTb2NrZXRDbGllbnQoaW5mby5uYW1lc3BhY2UsIGluZm8ucm9vbSk7XG4gICAgdGhpcy5zb2NrZXQuc2VuZCgndXBkYXRlRG9jdW1lbnQnLCByZXF1ZXN0X2RhdGEsIHJvb20pO1xuICB9LFxuICBcbiAgXG4gIC8qXG4gIENvQ3JlYXRlLmNydWQucmVhZERvY3VtZW50KHtcbiAgICBjb2xsZWN0aW9uOiBcInRlc3QxMjNcIixcbiAgICBkb2N1bWVudF9pZDogXCJkb2N1bWVudF9pZFwiLFxuICAgIGVsZW1lbnQ6IOKAnHh4eHjigJ0sXG4gICAgbWV0YURhdGE6IFwieHh4eFwiLFxuICAgIGV4Y2x1ZGVfZmllbGRzOiBbXSBcbiAgfSksXG4gICovXG4gIHJlYWREb2N1bWVudDogZnVuY3Rpb24oaW5mbykge1xuICAgIGlmIChpbmZvID09PSBudWxsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICghaW5mb1snZG9jdW1lbnRfaWQnXSB8fCAhaW5mbykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBcbiAgICBsZXQgY29tbW9uRGF0YSA9IGdldENvbW1vblBhcmFtcygpO1xuICAgIGxldCByZXF1ZXN0X2RhdGEgPSB7Li4uaW5mbywgLi4uY29tbW9uRGF0YX07XG4gICAgdGhpcy5zb2NrZXQuc2VuZCgncmVhZERvY3VtZW50JywgcmVxdWVzdF9kYXRhKTtcbiAgfSxcbiAgXG4gIFxuICAvKlxuICBDb0NyZWF0ZS5jcnVkLmRlbGV0ZURvY3VtZW50KHtcbiAgICBuYW1lc3BhY2U6ICcnLFxuICAgIHJvb206ICcnLFxuICAgIGJyb2FkY2FzdDogdHJ1ZS9mYWxzZSxcbiAgICBicm9hZGNhc3Rfc2VuZGVyOiB0cnVlL2ZhbHNlLFxuICAgIFxuICAgIGNvbGxlY3Rpb246IFwibW9kdWxlXCIsXG4gICAgZG9jdW1lbnRfaWQ6IFwiXCIsXG4gICAgZWxlbWVudDog4oCceHh4eOKAnSxcbiAgICBtZXRhZGF0YTogXCJ4eHh4XCJcbiAgfSksXG4gICovXG4gIGRlbGV0ZURvY3VtZW50OiBmdW5jdGlvbihpbmZvKSB7XG4gICAgaWYgKCFpbmZvWydkb2N1bWVudF9pZCddIHx8ICFpbmZvKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIFxuICAgIGxldCBjb21tb25EYXRhID0gZ2V0Q29tbW9uUGFyYW1zKCk7XG4gICAgbGV0IHJlcXVlc3RfZGF0YSA9IHsuLi5pbmZvLCAuLi5jb21tb25EYXRhfTtcbiAgICBcbiAgICAvKiogc29ja2V0IHBhcmFtZXRlcnMgKiovXG4gICAgLy8gaWYgKGluZm9bJ2Jyb2FkY2FzdCddID09PSB1bmRlZmluZWQpIHtcbiAgICAvLyAgIHJlcXVlc3RfZGF0YVsnYnJvYWRjYXN0J10gPSB0cnVlO1xuICAgIC8vIH1cbiAgICAvLyBpZiAoaW5mb1snYnJvYWRjYXN0X3NlbmRlciddID09PSB1bmRlZmluZWQpIHtcbiAgICAvLyAgIHJlcXVlc3RfZGF0YVsnYnJvYWRjYXN0X3NlbmRlciddID0gdHJ1ZTtcbiAgICAvLyB9XG4gICAgXG4gICAgY29uc3Qgcm9vbSA9IGdlbmVyYXRlU29ja2V0Q2xpZW50KGluZm8ubmFtZXNwYWNlLCBpbmZvLnJvb20pO1xuICAgIHRoaXMuc29ja2V0LnNlbmQoJ2RlbGV0ZURvY3VtZW50JywgcmVxdWVzdF9kYXRhLCByb29tKTtcbiAgfSxcblxuXG4gLyoqIGV4cG9ydCAvIGltcG9ydCBkYiBmdW5jdGlvbnMgKiovXG4gXG4gICAvKlxuICByZWFkRG9jdW1lbnQoe1xuICAgIGNvbGxlY3Rpb246IFwidGVzdDEyM1wiLFxuICAgIGVsZW1lbnQ6IOKAnHh4eHjigJ0sXG4gICAgbWV0YURhdGE6IFwieHh4eFwiLFxuICB9KSxcbiAgKi9cbiAgZXhwb3J0Q29sbGVjdGlvbjogZnVuY3Rpb24oaW5mbykge1xuICAgIGlmIChpbmZvID09PSBudWxsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbGV0IHJlcXVlc3RfZGF0YSA9IGdldENvbW1vblBhcmFtcygpO1xuICAgIHJlcXVlc3RfZGF0YVsnY29sbGVjdGlvbiddID0gaW5mb1snY29sbGVjdGlvbiddO1xuICAgIHJlcXVlc3RfZGF0YVsnZXhwb3J0X3R5cGUnXSA9IGluZm9bJ2V4cG9ydF90eXBlJ107XG5cbiAgICByZXF1ZXN0X2RhdGFbJ21ldGFkYXRhJ10gPSBpbmZvWydtZXRhZGF0YSddXG4gICAgdGhpcy5zb2NrZXQuc2VuZCgnZXhwb3J0REInLCByZXF1ZXN0X2RhdGEpO1xuICB9LFxuICBcbiAgLypcbiAgcmVhZERvY3VtZW50KHtcbiAgICBjb2xsZWN0aW9uOiBcInRlc3QxMjNcIixcbiAgICBmaWxlOiBmaWxlXG4gIH0pLFxuICAqL1xuICBpbXBvcnRDb2xsZWN0aW9uOiBmdW5jdGlvbihpbmZvKSB7XG4gICAgY29uc3Qge2ZpbGV9ID0gaW5mbztcbiAgICBpZiAoaW5mbyA9PT0gbnVsbCB8fCAhKGZpbGUgaW5zdGFuY2VvZiBGaWxlKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGV4dGVuc2lvbiA9IGZpbGUubmFtZS5zcGxpdChcIi5cIikucG9wKCk7XG4gICAgXG4gICAgaWYgKCFbJ2pzb24nLCdjc3YnXS5zb21lKChpdGVtKSA9PiBpdGVtID09PSBleHRlbnNpb24pKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIFxuICAgIGxldCByZXF1ZXN0X2RhdGEgPSBnZXRDb21tb25QYXJhbXMoKVxuICAgIHJlcXVlc3RfZGF0YVsnY29sbGVjdGlvbiddID0gaW5mb1snY29sbGVjdGlvbiddXG4gICAgcmVxdWVzdF9kYXRhWydpbXBvcnRfdHlwZSddID0gZXh0ZW5zaW9uO1xuICAgIHRoaXMuc29ja2V0LnNlbmQoJ2ltcG9ydERCJywgcmVxdWVzdF9kYXRhKVxuICAgIHRoaXMuc29ja2V0LnNlbmRGaWxlKGZpbGUpO1xuICB9LFxuICBcbiAgbGlzdGVuOiBmdW5jdGlvbihtZXNzYWdlLCBmdW4pIHtcbiAgICB0aGlzLnNvY2tldC5saXN0ZW4obWVzc2FnZSwgZnVuKTtcbiAgfSxcbiAgXG4gIGxpc3RlbkFzeW5jOiBmdW5jdGlvbihldmVudG5hbWUpIHtcbiAgICB0aGlzLnNvY2tldC5saXN0ZW5Bc3luYyhldmVudG5hbWUpO1xuICB9LFxuXG5cdGNyZWF0ZVNvY2tldDogZnVuY3Rpb24oaG9zdCwgbmFtZXNwYWNlKSB7XG5cdFx0aWYgKG5hbWVzcGFjZSkge1xuXHRcdFx0dGhpcy5zb2NrZXQuY3JlYXRlKHtcblx0XHRcdFx0bmFtZXNwYWNlOiBuYW1lc3BhY2UsIFxuXHRcdFx0XHRyb29tOiBudWxsLFxuXHRcdFx0XHRob3N0OiBob3N0XG5cdFx0XHR9KTtcblx0XHRcdHRoaXMuc29ja2V0LnNldEdsb2JhbFNjb3BlKG5hbWVzcGFjZSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMuc29ja2V0LmNyZWF0ZSh7XG5cdFx0XHRcdG5hbWVzcGFjZTogbnVsbCwgXG5cdFx0XHRcdHJvb206IG51bGwsXG5cdFx0XHRcdGhvc3Q6IGhvc3Rcblx0XHRcdH0pO1xuXHRcdH1cblx0fSxcbn1cblxuQ29DcmVhdGVDUlVELnNldFNvY2tldChjcnVkX3NvY2tldCk7XG5Db0NyZWF0ZUNSVUQuY3JlYXRlU29ja2V0KHdpbmRvdy5jb25maWcuaG9zdCA/IHdpbmRvdy5jb25maWcuaG9zdCA6ICdzZXJ2ZXIuY29jcmVhdGUuYXBwJywgd2luZG93LmNvbmZpZy5vcmdhbml6YXRpb25fSWQpXG5cbmV4cG9ydCBkZWZhdWx0IENvQ3JlYXRlQ1JVRDtcblxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../CoCreate-crud/src/index.js\n")},"../CoCreate-crud/src/utils.crud.js":(__unused_webpack_module,exports)=>{eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = void 0;\n\nfunction __mergeObject(target, source) {\n  target = target || {};\n\n  for (let key of Object.keys(source)) {\n    if (source[key] instanceof Object) {\n      Object.assign(source[key], __mergeObject(target[key], source[key]));\n    }\n  }\n\n  Object.assign(target || {}, source);\n  return target;\n}\n\nfunction __createObject(data, path) {\n  if (!path) return data;\n  let keys = path.split('.');\n  let newObject = data;\n\n  for (var i = keys.length - 1; i >= 0; i--) {\n    newObject = {\n      [keys[i]]: newObject\n    };\n  }\n\n  return newObject;\n}\n\nfunction __createArray(key, data) {\n  try {\n    let item = /([\\w\\W]+)\\[(\\d+)\\]/gm.exec(key);\n\n    if (item && item.length == 3) {\n      let arrayKey = item[1];\n      let index = parseInt(item[2]);\n\n      if (!data[arrayKey] || !Array.isArray(data[arrayKey])) {\n        data[arrayKey] = [];\n      }\n\n      data[arrayKey][index] = data[key];\n      delete data[key];\n      key = arrayKey;\n    }\n  } catch {\n    console.log('create array error');\n  }\n\n  return key;\n}\n\nfunction isObject(item) {\n  return !!item && item.constructor === Object;\n}\n\nfunction isArray(item) {\n  return !!item && item.constructor === Array;\n}\n\nfunction decodeObject(data) {\n  let keys = Object.keys(data);\n  let objectData = {};\n  keys.forEach(k => {\n    k = __createArray(k, data);\n\n    if (k.split('.').length > 1) {\n      let newData = __createObject(data[k], k);\n\n      delete data[k];\n      objectData = __mergeObject(objectData, newData);\n    } else {\n      objectData[k] = data[k];\n    }\n  });\n  return objectData;\n}\n\nfunction encodeObject(data) {\n  let keys = Object.keys(data);\n  let newData = {};\n  keys.forEach(k => {\n    let data_value = data[k];\n\n    if (isObject(data[k])) {\n      let new_obj = encodeObject(data[k]);\n      let newKeys = Object.keys(new_obj);\n      newKeys.forEach(newKey => {\n        let value = new_obj[newKey];\n        newKey = k + \".\" + newKey;\n        newData[newKey] = value;\n      });\n    } else if (isArray(data_value)) {\n      data_value.forEach((v, index) => {\n        newData[`${k}[${index}]`] = v;\n      });\n    } else {\n      newData[k] = data[k];\n    }\n  });\n  return newData;\n}\n\nvar _default = {\n  decodeObject,\n  encodeObject\n};\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS5hdHRyaWJ1dGVzLy4uL0NvQ3JlYXRlLWNydWQvc3JjL3V0aWxzLmNydWQuanM/YzIzNSJdLCJuYW1lcyI6WyJfX21lcmdlT2JqZWN0IiwidGFyZ2V0Iiwic291cmNlIiwia2V5IiwiT2JqZWN0Iiwia2V5cyIsImFzc2lnbiIsIl9fY3JlYXRlT2JqZWN0IiwiZGF0YSIsInBhdGgiLCJzcGxpdCIsIm5ld09iamVjdCIsImkiLCJsZW5ndGgiLCJfX2NyZWF0ZUFycmF5IiwiaXRlbSIsImV4ZWMiLCJhcnJheUtleSIsImluZGV4IiwicGFyc2VJbnQiLCJBcnJheSIsImlzQXJyYXkiLCJjb25zb2xlIiwibG9nIiwiaXNPYmplY3QiLCJjb25zdHJ1Y3RvciIsImRlY29kZU9iamVjdCIsIm9iamVjdERhdGEiLCJmb3JFYWNoIiwiayIsIm5ld0RhdGEiLCJlbmNvZGVPYmplY3QiLCJkYXRhX3ZhbHVlIiwibmV3X29iaiIsIm5ld0tleXMiLCJuZXdLZXkiLCJ2YWx1ZSIsInYiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSxTQUFVQSxhQUFWLENBQXdCQyxNQUF4QixFQUFnQ0MsTUFBaEMsRUFDQTtBQUNDRCxRQUFNLEdBQUdBLE1BQU0sSUFBSSxFQUFuQjs7QUFDQSxPQUFLLElBQUlFLEdBQVQsSUFBZ0JDLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZSCxNQUFaLENBQWhCLEVBQXFDO0FBQ3BDLFFBQUlBLE1BQU0sQ0FBQ0MsR0FBRCxDQUFOLFlBQXVCQyxNQUEzQixFQUFtQztBQUNsQ0EsWUFBTSxDQUFDRSxNQUFQLENBQWNKLE1BQU0sQ0FBQ0MsR0FBRCxDQUFwQixFQUEyQkgsYUFBYSxDQUFDQyxNQUFNLENBQUNFLEdBQUQsQ0FBUCxFQUFjRCxNQUFNLENBQUNDLEdBQUQsQ0FBcEIsQ0FBeEM7QUFDQTtBQUNEOztBQUVEQyxRQUFNLENBQUNFLE1BQVAsQ0FBY0wsTUFBTSxJQUFJLEVBQXhCLEVBQTRCQyxNQUE1QjtBQUNBLFNBQU9ELE1B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bnQiOlsiZnVuY3Rpb24gXHRfX21lcmdlT2JqZWN0KHRhcmdldCwgc291cmNlKSBcbntcblx0dGFyZ2V0ID0gdGFyZ2V0IHx8IHt9O1xuXHRmb3IgKGxldCBrZXkgb2YgT2JqZWN0LmtleXMoc291cmNlKSkge1xuXHRcdGlmIChzb3VyY2Vba2V5XSBpbnN0YW5jZW9mIE9iamVjdCkge1xuXHRcdFx0T2JqZWN0LmFzc2lnbihzb3VyY2Vba2V5XSwgX19tZXJnZU9iamVjdCh0YXJnZXRba2V5XSwgc291cmNlW2tleV0pKVxuXHRcdH1cblx0fVxuXHRcblx0T2JqZWN0LmFzc2lnbih0YXJnZXQgfHwge30sIHNvdXJjZSlcblx0cmV0dXJuIHRhcmdldFxufVxuXG5mdW5jdGlvbiBfX2NyZWF0ZU9iamVjdChkYXRhLCBwYXRoKSBcbntcblx0aWYgKCFwYXRoKSByZXR1cm4gZGF0YTtcblx0XG5cdGxldCBrZXlzID0gcGF0aC5zcGxpdCgnLicpXG5cdGxldCBuZXdPYmplY3QgPSBkYXRhO1xuXG5cdGZvciAodmFyICBpID0ga2V5cy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuXHRcdG5ld09iamVjdCA9IHtba2V5c1tpXV06IG5ld09iamVjdH1cdFx0XHRcdFxuXHR9XG5cdHJldHVybiBuZXdPYmplY3Q7XG59XG5cbmZ1bmN0aW9uIF9fY3JlYXRlQXJyYXkoa2V5LCBkYXRhKVxue1xuICB0cnkge1xuICAgIGxldCBpdGVtID0gLyhbXFx3XFxXXSspXFxbKFxcZCspXFxdL2dtLmV4ZWMoa2V5KVxuICAgIGlmIChpdGVtICYmIGl0ZW0ubGVuZ3RoID09IDMpIHtcbiAgICAgIGxldCBhcnJheUtleSA9IGl0ZW1bMV07XG4gICAgICBsZXQgaW5kZXggPSBwYXJzZUludChpdGVtWzJdKTtcbiAgICAgIFxuICAgICAgaWYgKCFkYXRhW2FycmF5S2V5XSB8fCAhQXJyYXkuaXNBcnJheShkYXRhW2FycmF5S2V5XSkpIHtcbiAgICAgICAgZGF0YVthcnJheUtleV0gPSBbXTtcbiAgICAgIH0gXG4gICAgICBkYXRhW2FycmF5S2V5XVtpbmRleF0gPSBkYXRhW2tleV07XG4gICAgICBkZWxldGUgZGF0YVtrZXldO1xuICAgICAga2V5ID0gYXJyYXlLZXk7XG4gICAgfVxuICB9IGNhdGNoIHtcbiAgICBjb25zb2xlLmxvZygnY3JlYXRlIGFycmF5IGVycm9yJyk7XG4gIH1cbiAgcmV0dXJuIGtleTtcbn1cblxuXG5cbmZ1bmN0aW9uIGlzT2JqZWN0KGl0ZW0pIHtcbiAgcmV0dXJuICghIWl0ZW0pICYmIChpdGVtLmNvbnN0cnVjdG9yID09PSBPYmplY3QpO1xufVxuZnVuY3Rpb24gaXNBcnJheShpdGVtKSB7XG4gIHJldHVybiAoISFpdGVtKSAmJiAoaXRlbS5jb25zdHJ1Y3RvciA9PT0gQXJyYXkpO1xufVxuXG5mdW5jdGlvbiBkZWNvZGVPYmplY3QoZGF0YSkge1xuICBsZXQga2V5cyA9IE9iamVjdC5rZXlzKGRhdGEpXG4gIGxldCBvYmplY3REYXRhID0ge307XG4gIFxuICBrZXlzLmZvckVhY2goKGspID0+IHtcbiAgICBrID0gX19jcmVhdGVBcnJheShrLCBkYXRhKTtcbiAgICBpZiAoay5zcGxpdCgnLicpLmxlbmd0aCA+IDEpIHtcbiAgICAgIGxldCBuZXdEYXRhID0gX19jcmVhdGVPYmplY3QoZGF0YVtrXSwgayk7XG4gICAgICBkZWxldGUgZGF0YVtrXTtcbiAgICAgIFxuICAgICAgb2JqZWN0RGF0YSA9IF9fbWVyZ2VPYmplY3Qob2JqZWN0RGF0YSwgbmV3RGF0YSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9iamVjdERhdGFba10gPSBkYXRhW2tdO1xuICAgIH1cbiAgfSlcbiAgcmV0dXJuIG9iamVjdERhdGE7XG59XG5cbmZ1bmN0aW9uIGVuY29kZU9iamVjdChkYXRhKSB7XG4gIGxldCBrZXlzID0gT2JqZWN0LmtleXMoZGF0YSk7XG4gIGxldCBuZXdEYXRhID0ge307XG4gIGtleXMuZm9yRWFjaCgoaykgPT4ge1xuICAgIGxldCBkYXRhX3ZhbHVlID0gZGF0YVtrXTtcbiAgICBpZiAoaXNPYmplY3QoZGF0YVtrXSkpIHtcbiAgICAgIGxldCBuZXdfb2JqID0gZW5jb2RlT2JqZWN0KGRhdGFba10pO1xuICAgICAgXG4gICAgICBsZXQgbmV3S2V5cyA9IE9iamVjdC5rZXlzKG5ld19vYmopO1xuICAgICAgbmV3S2V5cy5mb3JFYWNoKChuZXdLZXkpID0+IHtcbiAgICAgICAgbGV0IHZhbHVlID0gbmV3X29ialtuZXdLZXldO1xuICAgICAgICBuZXdLZXkgPSBrICsgXCIuXCIgKyBuZXdLZXk7XG4gICAgICAgIG5ld0RhdGFbbmV3S2V5XSA9IHZhbHVlO1xuICAgICAgfSlcbiAgICAgIFxuICAgIH0gZWxzZSBpZiAoaXNBcnJheShkYXRhX3ZhbHVlKSl7XG4gICAgICBkYXRhX3ZhbHVlLmZvckVhY2goKHYsIGluZGV4KSA9PiB7XG4gICAgICAgIG5ld0RhdGFbYCR7a31bJHtpbmRleH1dYF0gPSB2O1xuICAgICAgfSlcbiAgICB9IGVsc2Uge1xuICAgICAgbmV3RGF0YVtrXSA9IGRhdGFba107XG4gICAgfVxuICB9KVxuICByZXR1cm4gbmV3RGF0YTtcbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICBkZWNvZGVPYmplY3QsXG4gIGVuY29kZU9iamVjdFxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../CoCreate-crud/src/utils.crud.js\n")},"../CoCreate-cursors/src/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = void 0;\n\nvar _observer = _interopRequireDefault(__webpack_require__(/*! @cocreate/observer */ \"../CoCreate-observer/src/index.js\"));\n\nvar _utils = _interopRequireDefault(__webpack_require__(/*! @cocreate/utils */ \"../CoCreate-utils/src/index.js\"));\n\nvar _crud = _interopRequireDefault(__webpack_require__(/*! @cocreate/crud */ \"../CoCreate-crud/src/index.js\"));\n\nvar _input = _interopRequireDefault(__webpack_require__(/*! @cocreate/input */ \"../CoCreate-input/src/index.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*global Element*/\n\n/**Uso esta variable para mostrar errores en caso que no este en prod*/\nvar element_multicursors = document.querySelectorAll('input,textarea,[contenteditable]'); //console.log(element_multicursors)\n\nvar debug = false;\nvar enviroment_prod = true;\nvar properties = ['boxSizing', 'borderTopWidth', 'borderRightWidth', 'borderBottomWidth', 'borderLeftWidth', 'paddingTop', 'paddingRight', 'paddingBottom', 'paddingLeft', 'marginTop', 'marginRight', 'marginBottom', 'marginLeft', 'fontStyle', 'fontVariant', 'fontWeight', 'fontStretch', 'fontSize', 'lineHeight', 'fontFamily', 'textAlign', 'textTransform', 'textIndent', 'textDecoration', 'letterSpacing', 'wordSpacing', 'textRendering', 'webkitWritingMode', 'textTransform', 'textIndent', 'overflowWrap'];\nvar length_uuid = 30;\n\nclass CocreateUtilsCursor {\n  static print(message, debug) {\n    debug = debug || false;\n    if (debug) console.log(message);\n  }\n\n  static generateUUID(length = null) {\n    var d = new Date().getTime();\n    var d2 = performance && performance.now && performance.now() * 1000 || 0; //Time in microseconds since page-load or 0 if unsupported\n\n    var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n      var r = Math.random() * 16;\n\n      if (d > 0) {\n        var r = (d + r) % 16 | 0;\n        d = Math.floor(d / 16);\n      } else {\n        var r = (d2 + r) % 16 | 0;\n        d2 = Math.floor(d2 / 16);\n      }\n\n      return (c == 'x' ? r : r & 0x7 | 0x8).toString(16);\n    });\n\n    if (length != null) {\n      uuid = uuid.substr(0, length);\n    }\n\n    return uuid;\n  }\n\n}\n\nvar getParents = function (elem, selector) {// \tif (!Element.prototype.matches) {\n  // \t\tElement.prototype.matches =\n  // \t\t\tElement.prototype.matchesSelector ||\n  // \t\t\tElement.prototype.mozMatchesSelector ||\n  // \t\t\tElement.prototype.msMatchesSelector ||\n  // \t\t\tElement.prototype.oMatchesSelector ||\n  // \t\t\tElement.prototype.webkitMatchesSelector ||\n  // \t\t\tfunction(s) {\n  // \t\t\t\tvar matches = (this.document || this.ownerDocument).querySelectorAll(s),\n  // \t\t\t\t\ti = matches.length;\n  // \t\t\t\twhile (--i >= 0 && matches.item(i) !== this) {}\n  // \t\t\t\treturn i > -1;\n  // \t\t\t};\n  // \t}\n};\n\nvar mirrorDiv, computed, style, computedParentElement;\n\nvar getCaretCoordinates = function (element, position_start, position_end) {\n  // mirrored div\n  let name = element.getAttribute('name');\n  let document_id = element.getAttribute('data-document_id') || '';\n\n  if (document_id == '') {\n    return false;\n  }\n\n  var ID_MIRROR = element.dataset['mirror_id']; //document_id + name +  '--mirror-div';\n\n  mirrorDiv = document.getElementById(ID_MIRROR);\n  var add_class_scroll = element.className.indexOf('floating-label') == -1 ? false : true;\n\n  if (!mirrorDiv) {\n    mirrorDiv = document.createElement('div');\n    mirrorDiv.id = ID_MIRROR; //document_id +name+ '--mirror-div';\n\n    mirrorDiv.className = enviroment_prod ? 'mirror_color mirror_scroll mirror-width-scroll' : 'mirror-width-scroll'; //document.body.appendChild(mirrorDiv);\n\n    element.insertAdjacentElement('afterend', mirrorDiv);\n  }\n\n  var scrollwidth = element.offsetWidth - element.scrollWidth;\n  style = mirrorDiv.style;\n  computed = getComputedStyle(element);\n  computedParentElement = getComputedStyle(element.parentElement);\n  let margin_top = parseInt(computed['marginTop']);\n  let margin_left = parseInt(computed['marginLeft']);\n\n  if (element.nodeName !== 'INPUT') {\n    style.wordWrap = 'break-word'; // only for textarea-s\n\n    style.whiteSpace = 'pre-wrap';\n  } else {\n    style.whiteSpace = 'pre';\n  } // position off-screen\n\n\n  style.position = 'absolute'; // required to return coordinates properly\n\n  var rect = element.getBoundingClientRect(); // get Position from element\n\n  let scrrollTop_browser = document.documentElement.scrollTop; //style.top = ((rect.top+scrrollTop_browser)-1) - (parseInt(computed['marginTop']) - parseInt(computed['borderTopWidth']) ) + 'px'//parseInt(computed.borderTopWidth) + 'px'; //  element.offsetTop + parseInt(computed.borderTopWidth) + 'px';\n  //style.top = computedParentElement['top'];\n\n  style.top = element.offsetTop + 'px'; //style.left = rect.left - (parseInt(computed['marginLeft']) -  parseInt(computed['borderLeftWidth']) ) + 'px'//parseInt(computed.borderLeftWidth) + 'px'   // margin_left+\"px\";//\"400px\";\n  //style.left =  computedParentElement['left'];\n\n  style.left = element.offsetLeft + 'px';\n  style.width = rect.width + 'px'; // - (parseInt(computed.borderLeftWidth) + parseInt(computed.borderRightWidth)) + 'px'   // margin_left+\"px\";//\"400px\";\n\n  style.height = rect.height + 'px'; // - (parseInt(computed.borderTopWidth) + parseInt(computed.borderBottomWidth)) + 'px'   // margin_left+\"px\";//\"400px\";\n\n  style.visibility = 'visible';\n  properties.forEach(function (prop) {\n    if (['left', 'top'].indexOf(prop.toLowerCase()) === -1) style[prop] = computed[prop];\n  });\n  style.overflowX = 'auto';\n  style.overflowY = 'hidden';\n  style.margin = '0px'; //style.padding = '0px'\n\n  style.border = computed['border'];\n  style.borderColor = 'transparent';\n  /* \n  if(element.nodeName.toLowerCase()=='input'){\n    style.overflowX ='auto';\n    style.overflowY ='hidden';\n  }else{\n    style.overflow=\"visible\"\n  }*/\n  // style.paddingRight = (parseInt(style.paddingRight) + scrollwidth - parseInt(computed.borderRightWidth)) +'px';\n\n  let cursor_container = mirrorDiv.querySelectorAll('.cursor-container');\n  let selectors_by_users = mirrorDiv.querySelectorAll('.selectors_by_users');\n  let value_element = ['TEXTAREA', 'INPUT'].indexOf(element.nodeName) == -1 ? element.innerHTML : element.value;\n  mirrorDiv.textContent = value_element.substring(0, position_start);\n  if (element.nodeName === 'INPUT') mirrorDiv.textContent = mirrorDiv.textContent.replace(/\\s/g, \"\\u00a0\");\n  var span = document.createElement('span');\n  span.id = element.nodeName + 'span_selections';\n  let value_span = value_element.substring(position_start, position_end) || '';\n  span.textContent = value_span; // || because a completely empty faux span doesn't render at all\n  //span.style.backgroundColor = \"lightgrey\";\n\n  mirrorDiv.appendChild(span);\n\n  if (cursor_container) {\n    cursor_container.forEach(function (child_cursor, index, array) {\n      mirrorDiv.appendChild(child_cursor);\n    });\n  }\n\n  if (selectors_by_users) {\n    selectors_by_users.forEach(function (child_selection, index, array) {\n      mirrorDiv.appendChild(child_selection);\n    });\n  }\n\n  let value_end = value_element.substring(position_end) || '';\n  var span_end = document.createElement('span');\n  mirrorDiv.appendChild(span_end);\n  span_end.textContent = value_end;\n  var rect = element.getBoundingClientRect(); // get Position from element\n\n  var coordinates = {\n    start: {\n      top: span.offsetTop,\n      left: span.offsetLeft\n    },\n    end: {\n      top: span_end.offsetTop,\n      //+ parseInt(computed['borderTopWidth']),\n      left: span_end.offsetLeft // + parseInt(computed['borderLeftWidth'])\n\n    }\n  };\n  return coordinates;\n};\n\nfunction getStyle(el, styleProp) {\n  if (window.getComputedStyle) var y = document.defaultView.getComputedStyle(el, null).getPropertyValue(styleProp);\n  return y;\n}\n\nfunction getDocument(collection, module_id) {\n  _crud.default.readDocument({\n    'collection': collection,\n    'document_id': module_id\n  });\n}\n\n_crud.default.listen('readDocument', function (data) {\n  let cursor = document.querySelector('.cursor-flag[data-document_id=\"' + data['document_id'] + '\"]');\n  if (cursor) cursor.innerHTML = data.result[cursor.getAttribute('name')];\n});\n\nfunction draw_cursor(json) {\n  CocreateUtilsCursor.print([\"draw Cursor \", json], debug);\n  let element = json['element'];\n  let activate_cursor = element.dataset['cursors'] ? element.dataset['mirror_id'] : true;\n\n  if (activate_cursor) {\n    let start = json['startPosition'];\n    let end = json['endPositon'];\n    let socket_id = json['clientId'];\n    let document_id = element.getAttribute('data-document_id') || '';\n\n    if (document_id != '') {\n      CocreateUtilsCursor.print(\"action document_id \" + document_id, debug);\n      if (typeof element.dataset['mirror_id'] == 'undefined' || element.dataset['mirror_id'] == '') element.dataset['mirror_id'] = CocreateUtilsCursor.generateUUID(length_uuid);\n      let coordinates = getCaretCoordinates(element, start, end);\n      if (!coordinates) return false;\n      let name = element.getAttribute('name');\n      let id_mirror = element.dataset['mirror_id']; //document_id+name+'--mirror-div'\n\n      let mi_mirror = document.getElementById(id_mirror);\n      let cursor = false;\n      let selection_user = false;\n      let identify = '_' + id_mirror;\n      let user = typeof json != 'undefined' && json.hasOwnProperty('user') ? json.user : false;\n      let user_id = typeof json != 'undefined' && json.hasOwnProperty('user_id') ? user.user_id : false;\n\n      if (socket_id) {\n        //if(data && data.hasOwnProperty('id_mirror')){\n        var cursores_other_elements = document.querySelectorAll('#socket_' + socket_id + identify);\n        cursores_other_elements.forEach(function (child_cursor, index, array) {\n          if (child_cursor.parentElement.getAttribute('id') != id_mirror) {\n            CocreateUtilsCursor.print(\"remove old cursor others elements\", debug);\n            child_cursor.remove();\n          }\n        }); //}\n\n        cursor = mi_mirror.querySelector('.cursor-container#socket_' + socket_id + identify);\n\n        if (!cursor && json.hasOwnProperty('user')) {\n          if (user) {\n            CocreateUtilsCursor.print(\"Create Cursor\", debug);\n            let cursor_template = '<div style=\"color:blue;\" class=\"cursor-container\" \\\n                                                  id=\"socket_' + socket_id + identify + '\" \\\n                                                  ><div class=\"cursor\" \\\n                                                  style=\"background-color:' + user.color + '\"></div>\\\n                                                  <div class=\"cursor-flag\" data-collection=\"users\" \\\n                                                  name=\"name\" \\\n                                                  data-user_name=\"' + user.name + '\" \\\n                                                  data-user_color=\"' + user.color + '\" \\\n                                                  data-socket_id=\"' + socket_id + '\" \\\n                                                  data-id_mirror=\"' + id_mirror + '\" \\\n                                                  data-document_id=\"' + user_id + '\" \\\n                                                  style=\"background-color:' + user.color + '\" \\\n                                                  flag>' + user.name + '</div></div>';\n            mi_mirror.innerHTML = cursor_template + mi_mirror.innerHTML;\n          }\n\n          if (user_id) {\n            // si tiene user_id actualiza el nombre del cursor usando crud\n            _crud.default.readDocument({\n              'collection': 'users',\n              'document_id': user_id\n            });\n          }\n        }\n\n        cursor = mi_mirror.querySelector('.cursor-container#socket_' + socket_id + identify);\n      }\n\n      if (cursor) {\n        CocreateUtilsCursor.print([\"Update Cursor\", cursor, coordinates], debug);\n        let font_size = getStyle(element, 'font-size');\n        font_size = parseFloat(font_size.substring(0, font_size.length - 2));\n        let cursor_height = font_size * 112.5 / 100;\n        let my_cursor = cursor.querySelector('.cursor');\n        cursor.dataset.start = start;\n        cursor.dataset.end = end;\n        cursor.dataset.socket_id = socket_id;\n        /*cursor.dataset.user_name = user.name\n        cursor.dataset.user_color = user.color*/\n\n        cursor.style[\"top\"] = coordinates.end.top + \"px\";\n        cursor.style[\"width\"] = \"2px\"; //2px\n\n        my_cursor.style[\"height\"] = cursor_height + \"px\";\n        cursor.style[\"left\"] = coordinates.end.left + \"px\"; //add selections\n\n        selection_user = document.getElementById('sel-' + socket_id + identify);\n\n        if (start != end && user) {\n          selection_user = document.getElementById('sel-' + socket_id + identify);\n\n          if (selection_user) {\n            selection_user.remove();\n          }\n\n          var scrollwidth = element.offsetWidth - element.scrollWidth;\n          var padding_right = parseInt(getComputedStyle(element)[\"paddingRight\"]);\n          selection_user = document.createElement('span');\n          selection_user.id = 'sel-' + socket_id + identify;\n          selection_user.className = 'selectors_by_users';\n          let style_mirror = getComputedStyle(mi_mirror);\n          selection_user.style[\"position\"] = \"absolute\";\n          selection_user.style[\"top\"] = style_mirror.paddingTop;\n          selection_user.style[\"left\"] = style_mirror.paddingLeft;\n          selection_user.style[\"padding-right\"] = scrollwidth + padding_right + \"px\";\n          mi_mirror.insertBefore(selection_user, mi_mirror.firstChild);\n          let selection_span_by_user = document.createElement('span');\n          selection_span_by_user.id = 'selection-' + socket_id + identify;\n          selection_span_by_user.style.backgroundColor = user.color;\n          let value_element = ['TEXTAREA', 'INPUT'].indexOf(element.nodeName) == -1 ? element.innerHTML : element.value;\n          selection_user.textContent = value_element.substring(0, start);\n          let value_span_selection = value_element.substring(start, end) || '';\n          console.log(\"Selection \", value_span_selection, start, end); //selection_span_by_user.style.opacity = 0.5;\n\n          selection_span_by_user.textContent = value_span_selection;\n          selection_user.appendChild(selection_span_by_user);\n        } //end Selections\n        else {\n            if (selection_user) {\n              selection_user.remove();\n            }\n          }\n      }\n    } //end if document_id\n\n  } //end activate_cursors\n\n} //draw_cursor\n\n\nfunction refresh_mirror(element) {\n  var id_mirror = '';\n  let document_id = element.getAttribute('data-document_id') || '';\n\n  if (document_id != '') {\n    name = element.getAttribute('name');\n    if (element.dataset['mirror_id']) id_mirror = element.dataset['mirror_id'];else return; //console.log(\"Refresh \",id_mirror)\n\n    var mi_mirror = document.getElementById(id_mirror);\n    CocreateUtilsCursor.print([\"refresh_mirror \", mi_mirror], debug);\n    var selector_element = element.nodeName + \"[name='\" + name + \"'][data-document_id='\" + document_id + \"']\";\n    CocreateUtilsCursor.print([\"selector -> \" + selector_element], debug);\n\n    if (mi_mirror) {\n      computed = getComputedStyle(element);\n      style = mi_mirror.style;\n      style.width = element.offsetWidth - (parseInt(computed.borderLeftWidth) + parseInt(computed.borderRightWidth)) + 'px';\n      style.height = element.offsetHeight - (parseInt(computed.borderTopWidth) + parseInt(computed.borderBottomWidth)) + 'px';\n      var cursor_container = mi_mirror.querySelectorAll('.cursor-container');\n      cursor_container.forEach(function (child_cursor, index, array) {\n        //console.log(\"REdraw cursor\")\n        let child = child_cursor.querySelector('.cursor-flag');\n        let dataset_child = child.dataset;\n        let dataset = child_cursor.dataset;\n        draw_cursor({\n          element: element,\n          startPosition: dataset.start,\n          endPositon: dataset.end,\n          clientId: dataset.socket_id,\n          user: {\n            'color': dataset_child.user_color,\n            'name': dataset.user_name\n          }\n        });\n      });\n    }\n  } //end document\n\n} //end verify \n\n\nElement.prototype.remove = function () {\n  if (this.parentElement) {\n    this.parentElement.removeChild(this);\n  }\n};\n\nfunction recalculate_local_cursors(element, count) {\n  CocreateUtilsCursor.print(\"count \" + count, debug);\n  let my_start = !element.hasAttribute('contenteditable') ? element.selectionStart : parseInt(element.getAttribute(\"selection_start\")); //let my_start   = element.selectionStart\n\n  let name = element.getAttribute('name') || '';\n  let document_id = element.getAttribute('data-document_id') || '';\n  let collection = element.getAttribute('data-collection') || '';\n  let selector = '[data-collection=\"' + collection + '\"][data-document_id=\"' + document_id + '\"][name=\"' + name + '\"]';\n  let id_mirror = element.dataset['mirror_id']; //let id_mirror = document_id+name+'--mirror-div';\n\n  let mirrorDiv = document.getElementById(id_mirror);\n  let cursor_container = mirrorDiv ? mirrorDiv.querySelectorAll('.cursor-container') : null;\n\n  if (cursor_container) {\n    let containers_cursors = [];\n    cursor_container.forEach(function (child_cursor, index, array) {\n      let start = parseInt(child_cursor.getAttribute('data-start'));\n      let user_name = child_cursor.getAttribute('data-user_name');\n      CocreateUtilsCursor.print([\"my_start local\", my_start, 'start cursor ' + user_name + \" = \", start], debug);\n\n      if (start > my_start && containers_cursors.indexOf(user_name) == -1) {\n        CocreateUtilsCursor.print(\"Es mayor\", debug);\n        let end = parseInt(child_cursor.getAttribute('data-end'));\n        let pos_start = start + count;\n        let pos_end = end + count;\n        CocreateUtilsCursor.print(['pos_start', pos_start, 'pos_end', pos_end], debug);\n        let dataset = child_cursor.querySelector('.cursor-flag').dataset;\n        let clientId = dataset.socket_id;\n        let json = {\n          element: element,\n          startPosition: pos_start,\n          endPositon: pos_end,\n          clientId: clientId,\n          'user': {\n            'color': dataset.user_color,\n            'name': dataset.user_name\n          }\n        };\n        CocreateUtilsCursor.print([\"sent Draw Cursor \", json], debug);\n        draw_cursor(json);\n        containers_cursors.push(user_name);\n      } //mirrorDiv.appendChild(child_cursor);\n\n    });\n  }\n}\n\nfunction initCursorEl(element) {\n  let formulario = getParents(element, 'form');\n  let realtime = element.hasAttribute('data-realtime') ? element.getAttribute('data-realtime') : 'true';\n\n  if (realtime == 'true' || formulario && formulario.getAttribute('data-realtime') == 'true') {\n    if (realtime == 'false') return false;\n    CocreateUtilsCursor.print([\"Init Events \", element], debug);\n    /*\n    element.addEventListener('input',function(event){\n        let start = element.selectionStart;\n        let end = element.selectionEnd;\n        let coordinates = getCaretCoordinates(element,start,end);\n        let count = 0;\n        switch(event.inputType){\n          case 'insertText':\n            count = 1;\n          break;\n          case 'insertFromPaste':\n           // count = event.clipboardData.getData('Text').length\n          break;\n          case 'deleteContentBackward':\n          //case 'insertFromPaste':\n            count = -1;\n          break;\n        }\n        if(count)\n          recalculate_local_cursors(this,count)\n    },false)\n    */\n\n    element.addEventListener('scroll', function () {\n      CocreateUtilsCursor.print([\"Move Scroll \", element], true);\n      let name = element.getAttribute('name');\n      let document_id = element.getAttribute('data-document_id') || '';\n      let id_mirror = element.dataset['mirror_id'];\n      let mi_mirror = document.getElementById(id_mirror);\n\n      if (mi_mirror) {\n        mi_mirror.scrollTo(element.scrollLeft, element.scrollTop);\n      }\n    }, false); //resize\n\n    function outputsize() {\n      element_multicursors.forEach(function (element_for, index, array) {\n        let name = element_for.getAttribute('name');\n        let id_mirror = element.dataset['mirror_id'];\n        CocreateUtilsCursor.print([\"Resize id_mirror -> \" + id_mirror], debug);\n        let mi_mirror = document.getElementById(id_mirror);\n\n        if (mi_mirror) {\n          mi_mirror.style[\"width\"] = element_for.offsetWidth + \"px\";\n          mi_mirror.style[\"height\"] = element_for.offsetHeight + \"px\"; //var isFocused = (document.activeElement === element_for);\n          //verify_cursor(element_for,isFocused)\n\n          var isFocused = document.activeElement === element;\n          if (isFocused) getCaretCoordinates(element, element.selectionStart, element.selectionEnd);\n          refresh_mirror(element);\n        }\n      });\n    }\n\n    new ResizeObserver(outputsize).observe(element); //if (element.nodeName == 'INPUT'){\n\n    element.addEventListener('mousemove', function (event) {\n      let name = element.getAttribute('name');\n      let document_id = element.getAttribute('data-document_id');\n      let id_mirror = element.dataset['mirror_id'];\n      let mi_mirror = document.getElementById(id_mirror);\n      if (mi_mirror) mi_mirror.scrollTo(element.scrollLeft, element.scrollTop);\n    });\n    element.addEventListener('focusout', function (event) {\n      let name = element.getAttribute('name');\n      let document_id = element.getAttribute('data-document_id') || '';\n      let id_mirror = element.dataset['mirror_id'];\n      let mi_mirror = document.getElementById(id_mirror);\n      if (mi_mirror) mi_mirror.scrollTo(element.scrollLeft, element.scrollTop);\n    });\n    element.addEventListener('keydown', function (event) {\n      //console.log(\"keydown L,T => \",element.scrollLeft,element.scrollTop)\n      let name = element.getAttribute('name');\n      let id_mirror = element.dataset['mirror_id'];\n      let mi_mirror = document.getElementById(id_mirror);\n\n      if (mi_mirror) {\n        mi_mirror.scrollTo(element.scrollLeft, element.scrollTop);\n        refresh_mirror(element);\n      }\n    });\n    element.addEventListener('keyup', function (event) {\n      //console.log(\"keyup L,T => \",element.scrollLeft,element.scrollTop)\n      let name = element.getAttribute('name');\n      let id_mirror = element.dataset['mirror_id'];\n      let mi_mirror = document.getElementById(id_mirror);\n      if (mi_mirror) mi_mirror.scrollTo(element.scrollLeft, element.scrollTop);\n    }); //}\n  } //end if realtime TRUE\n\n}\n\nvar initialize_multicursor = function (element_multicursors) {\n  element_multicursors.forEach(function (element, index, array) {\n    initCursorEl(element);\n  }); // element_multicursors.forEach\n}; //end initialize_multicursor \n\n\nwindow.addEventListener('resize', function (e) {\n  //console.log(\"resize windows\")\n  document.querySelectorAll('[data-mirror_id]').forEach(function (element, index, array) {\n    refresh_mirror(element);\n  }); // element_multicursors.forEach\n}, true);\ndocument.addEventListener('scroll', function (e) {\n  //console.log(\"Scroll \")\n  //console.log(\"scroll windows\",document.body.scrollLeft,document.body.scrollTop)\n  //element_multicursors.forEach(function (element, index, array) {\n  document.querySelectorAll('[data-mirror_id]').forEach(function (element, index, array) {\n    refresh_mirror(element);\n  }); // element_multicursors.forEach\n}, true);\n\nfunction initCursorElements(container) {\n  let mainContainer = container || window;\n\n  if (!mainContainer.querySelectorAll) {\n    return;\n  }\n\n  let elements = mainContainer.querySelectorAll('[data-realtime=true]');\n  elements.forEach(el => {\n    initCursorEl(el);\n  });\n}\n\nif (debug) console.log(\"elements to INIT -> \", element_multicursors);\ninitialize_multicursor(element_multicursors); // CoCreateInit.register_old('[data-realtime=true]',initCursorEl);\n// CoCreateInit.register('CoCreateCursor', window, initCursorElements);\n\n_observer.default.init({\n  name: 'CoCreateCursor',\n  observe: ['subtree', 'childList'],\n  include: '[data-collection][data-document_id][name][data-realtime=true]',\n  callback: function (mutation) {\n    initCursorElements(mutation.target);\n  }\n});\n\nconst CoCreateCursors = {\n  draw_cursor,\n  refresh_mirror,\n  recalculate_local_cursors\n};\nvar _default = CoCreateCursors;\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../CoCreate-cursors/src/index.js\n")},"../CoCreate-form/src/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = void 0;\n\nvar _observer = _interopRequireDefault(__webpack_require__(/*! @cocreate/observer */ \"../CoCreate-observer/src/index.js\"));\n\nvar _utils = _interopRequireDefault(__webpack_require__(/*! @cocreate/utils */ \"../CoCreate-utils/src/index.js\"));\n\nvar _crud = _interopRequireDefault(__webpack_require__(/*! @cocreate/crud */ \"../CoCreate-crud/src/index.js\"));\n\nvar _action = _interopRequireDefault(__webpack_require__(/*! @cocreate/action */ \"../CoCreate-action/src/index.js\"));\n\nvar _utils2 = _interopRequireDefault(__webpack_require__(/*! ./utils */ \"../CoCreate-form/src/utils.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst CoCreateForm = {\n  requestAttr: \"data-document_request\",\n  selectors: [],\n  modules: [],\n  init: function ({\n    name,\n    selector,\n    callback\n  }) {\n    this.modules.push({\n      name,\n      selector,\n      callback\n    });\n\n    if (selector) {\n      this.selectors.push(selector);\n    }\n  },\n  get: function () {\n    return {\n      selectors: this.selectors\n    };\n  },\n  checkID: function (element, attr = \"data-document_id\") {\n    let document_id = element.getAttribute(attr) || \"\";\n\n    if (document_id === \"\" || document_id === \"pending\" || !_utils.default.checkValue(document_id)) {\n      return false;\n    }\n\n    return true;\n  },\n  request: function ({\n    form,\n    element,\n    nameAttr,\n    value\n  }) {\n    if (!form && element) {\n      form = element.closest('form');\n    }\n\n    if (form) {\n      this.__requestDocumentIdOfForm(form);\n    } else if (element) {\n      nameAttr = nameAttr || \"name\";\n\n      this.__requestDocumentId(element, nameAttr, value);\n    }\n  },\n  initElement: function (container) {\n    const __container = container || document;\n\n    if (!__container.querySelectorAll) {\n      return;\n    }\n\n    let forms = __container.querySelectorAll('form');\n\n    if (forms.length === 0 && __container != document && __container.tagName === \"FORM\") {\n      forms = [__container];\n    }\n\n    forms.forEach(form => {\n      _utils2.default.setAttribute(form);\n\n      _utils2.default.disableAutoFill(form);\n    });\n  },\n  __init: function () {\n    const forms = document.querySelectorAll('form');\n\n    this.__initEvent();\n\n    forms.forEach(form => {\n      _utils2.default.setAttribute(form);\n    });\n  },\n  __initEvent: function () {\n    const self = this;\n\n    _crud.default.listen('createDocument', function (data) {\n      const {\n        metadata\n      } = data;\n\n      self.__receivedDocumentId(data);\n\n      if (metadata == \"createDocument-action\") {//. dispatch EndAction\n      }\n    });\n\n    _crud.default.listen('deleteDocument', function (data) {\n      const {\n        metadata\n      } = data;\n\n      if (metadata === \"deleteDocument-action\") {//.dispatch End Action\n      }\n    });\n\n    document.addEventListener('clicked-submitBtn', function (event) {\n      const {\n        element\n      } = event.detail;\n      self.modules.forEach(({\n        selector,\n        callback\n      }) => {\n        if (callback && element.matches(selector)) {\n          callback.call(null, element);\n        }\n      });\n    });\n  },\n  __deleteDocumentAction: function (btn) {\n    const collection = btn.getAttribute('data-collection');\n    const document_id = btn.getAttribute('data-document_id');\n\n    if (_utils.default.checkValue(collection) && _utils.default.checkValue(document_id)) {\n      _crud.default.deleteDocument({\n        'collection': collection,\n        'document_id': document_id,\n        'metadata': 'deleteDocument-action'\n      });\n\n      document.dispatchEvent(new CustomEvent('deletedDocument', {\n        detail: {}\n      }));\n    }\n  },\n  __deleteDocumentsAction: function (btn) {\n    const collection = btn.getAttribute('data-collection');\n    const selector = btn.getAttribute('data-document_target');\n    if (!selector) return;\n    const selectedEls = document.querySelectorAll(selector);\n\n    if (_utils2.default.checkValue(collection)) {\n      selectedEls.forEach(el => {\n        const document_id = el.getAttribute('data-document_id');\n\n        if (_utils.default.checkValue(document_id)) {\n          _crud.default.deleteDocument({\n            'collection': collection,\n            'document_id': document_id,\n            'metadata': ''\n          });\n        }\n      });\n      document.dispatchEvent(new CustomEvent('deletedDocuments', {\n        detail: {}\n      }));\n    }\n  },\n  __createDocumentAction: function (btn) {\n    const form = btn.closest(\"form\");\n    const self = this;\n\n    let collections = _utils2.default.getCOllections(form);\n\n    collections.forEach(collection => {\n      let data = _utils2.default.getFormData(form, \"\", collection);\n\n      if (Object.keys(data).length == 0 && data.constructor === Object) {\n        return;\n      }\n\n      if (_utils.default.checkValue(collection)) {\n        _crud.default.createDocument({\n          'collection': collection,\n          'data': data,\n          'metadata': 'createDocument-action',\n          'element': 'empty'\n        });\n\n        document.dispatchEvent(new CustomEvent('createdDocument', {\n          detail: {}\n        }));\n      }\n    });\n  },\n  __saveDocumentAction: function (btn) {\n    const form = btn.closest(\"form\");\n\n    if (!_utils2.default.checkFormValidate(form)) {\n      alert('Values are not unique');\n      return;\n    }\n\n    const selectors = this.selectors || [];\n    const elements = form.querySelectorAll(selectors.join(','));\n    let request_document_id = false;\n\n    for (var i = 0; i < elements.length; i++) {\n      let el = elements[i];\n      const data_document_id = el.getAttribute('data-document_id');\n\n      if (el.getAttribute('data-save_value') == 'false') {\n        continue;\n      }\n\n      if (!data_document_id) {\n        if (el.getAttribute('name')) {\n          request_document_id = true;\n        }\n\n        continue;\n      }\n\n      if (input.isUsageY(el)) {\n        continue;\n      }\n\n      if (_utils2.default.isTemplateInput(el)) return;\n      var new_event = new CustomEvent(\"clicked-submitBtn\", {\n        bubbles: true,\n        detail: {\n          type: \"submitBtn\",\n          element: el\n        }\n      });\n      el.dispatchEvent(new_event);\n    }\n\n    if (request_document_id) {\n      this.requestDocumentIdOfForm(form);\n    }\n\n    document.dispatchEvent(new CustomEvent('savedDocument', {\n      detail: {}\n    }));\n  },\n  __requestDocumentId: function (element, nameAttr = \"name\", value = null) {\n    const collection = element.getAttribute('data-collection');\n    const name = element.getAttribute(nameAttr);\n    if (!collection || !name) return;\n\n    const request_id = _utils.default.generateUUID();\n\n    element.setAttribute(this.requestAttr, request_id);\n\n    _crud.default.createDocument({\n      \"collection\": collection,\n      \"element\": request_id,\n      \"metadata\": \"\"\n    });\n  },\n  __requestDocumentIdOfForm: function (form) {\n    let self = this;\n    let elemens = form.querySelectorAll('[name], [data-pass_to]');\n    let collections = [];\n\n    for (var i = 0; i < elemens.length; i++) {\n      let el = elemens[i];\n\n      if (el.parentNode.classList.contains('template')) {\n        continue;\n      }\n\n      const collection = el.getAttribute(\"data-collection\") || el.getAttribute(\"data-pass_collection\") || \"\";\n\n      if (collection !== \"\" && !collections.includes(collection) && !self.checkID(el, 'data-document_id') && !self.checkID(el, 'data-pass_document_id')) {\n        const request_id = _utils.default.generateUUID();\n\n        collections.push(collection);\n        el.setAttribute(this.requestAttr, request_id); //. get Data\n\n        let data = _utils2.default.getFormData(form, \"\", collection);\n        /* FixME Create Document request */\n\n\n        _crud.default.createDocument({\n          \"collection\": collection,\n          \"element\": request_id,\n          'data': data,\n          \"metadata\": \"\"\n        });\n      }\n    }\n  },\n  __setNewIdProcess: function (element, document_id, pass) {\n    if (!element) return;\n    element.removeAttribute(this.requestAttr);\n    const event_data = {\n      document_id: document_id\n    };\n\n    if (!pass && !this.checkID(element) && element.hasAttribute('name')) {\n      element.setAttribute('data-document_id', document_id);\n    }\n\n    if (pass && !this.checkID(element, 'data-pass_document_id') && element.hasAttribute('data-pass_to')) {\n      element.setAttribute('data-pass_document_id', document_id); // CoCreateLogic.storePassData(element)\n\n      if (element.parentNode.classList.contains('submitBtn')) {\n        element.click();\n      }\n    }\n\n    var event = new CustomEvent('set-document_id', {\n      detail: event_data\n    });\n    element.dispatchEvent(event);\n  },\n  __receivedDocumentId: function (data) {\n    if (!data['document_id']) {\n      return;\n    }\n\n    let element = document.querySelector(`[${this.requestAttr}=\"${data['element']}\"]`);\n    if (!element) return;\n    let self = this;\n    const form = element.tagName === \"FORM\" ? element : _utils2.default.getParents(element, 'form');\n    const collection = data['collection'];\n    const id = data['document_id'];\n\n    if (form && id) {\n      form.setAttribute('data-form_id', data['element']);\n      const elements = form.querySelectorAll(`[data-collection=${collection}], [data-pass_collection=${collection}]`);\n      elements.forEach(function (el) {\n        el.removeAttribute(self.requestAttr);\n        if (el.hasAttribute('name')) self.__setNewIdProcess(el, id);\n        if (el.hasAttribute('data-pass_to')) self.__setNewIdProcess(el, id, true);\n      });\n    } else if (element) {\n      this.__setNewIdProcess(element, id);\n    }\n  }\n};\n\nCoCreateForm.__init(); // core.registerInit(CoCreateForm.initElement, CoCreateForm);\n\n\n_observer.default.init({\n  name: 'CoCreateForm',\n  observe: ['subtree', 'childList'],\n  include: 'form',\n  callback: function (mutation) {\n    CoCreateForm.initElement(mutation.target);\n  }\n});\n\n_action.default.init({\n  action: \"createDocument\",\n  endEvent: \"createdDocument\",\n  callback: (btn, data) => {\n    CoCreateForm.__createDocumentAction(btn);\n  }\n});\n\n_action.default.init({\n  action: \"deleteDocument\",\n  endEvent: \"deletedDocument\",\n  callback: (btn, data) => {\n    CoCreateForm.__deleteDocumentAction(btn);\n  }\n});\n\n_action.default.init({\n  action: \"deleteDocuments\",\n  endEvent: \"deletedDocuments\",\n  callback: (btn, data) => {\n    CoCreateDocument.__deleteDocumentsAction(btn);\n  }\n});\n\n_action.default.init({\n  action: \"saveDocument\",\n  endEvent: \"savedDocument\",\n  callback: (btn, data) => {\n    CoCreateForm.__saveDocumentAction(btn);\n  }\n});\n\nvar _default = CoCreateForm;\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../CoCreate-form/src/index.js\n")},"../CoCreate-form/src/utils.js":(__unused_webpack_module,exports)=>{eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = void 0;\nconst Utils = {\n  disableAutoFill: function (element) {\n    if (element.tagName == \"TEXTAREA\") {\n      element.value = \"\";\n      element.setAttribute(\"autocomplete\", \"off\");\n    }\n\n    if (!element.hasAttribute(\"autocomplete\")) {\n      element.setAttribute('autocomplete', \"off\");\n    }\n  },\n  setAttribute: function (form) {\n    const collection = form.getAttribute('data-collection') || \"\";\n    const dataRealTime = form.getAttribute('data-realtime');\n    const document_id = form.getAttribute('data-document_id') || \"\";\n    let elements = form.querySelectorAll('[name], [data-pass_to]');\n    elements.forEach(function (el) {\n      if (el.parentNode.classList.contains('template')) {\n        return;\n      }\n\n      if (el.getAttribute('data-realtime') == null && dataRealTime) {\n        // if (!['INPUT', 'TEXTAREA'].indexOf(el.tagName)) {\n        el.setAttribute('data-realtime', dataRealTime); // }\n      }\n\n      if (el.getAttribute('name') && !el.hasAttribute('data-collection') && collection) {\n        el.setAttribute('data-collection', collection);\n      }\n\n      if (el.getAttribute('data-pass_to') && !el.hasAttribute('data-pass_collection') && collection) {\n        el.setAttribute('data-pass_collection', collection);\n      }\n\n      if (el.getAttribute('name') && !el.getAttribute('data-document_id') && document_id) {\n        el.setAttribute('data-document_id', document_id);\n      }\n\n      if (!el.hasAttribute(\"data-document_id\") && document_id != null) {\n        el.setAttribute('data-document_id', document_id);\n      }\n    });\n  },\n  checkFormValidate: function (form) {\n    if (typeof CoCreate.unique !== 'undefined') {\n      return CoCreate.unique.checkValidate(form);\n    }\n\n    return true;\n  },\n  isTemplateInput: function (input) {\n    if (input.classList.contains('template')) return true;\n    let node = input.parentNode;\n\n    while (node) {\n      if (node.classList && node.classList.contains('template')) {\n        return true;\n      }\n\n      node = node.parentNode;\n    }\n\n    return false;\n  },\n  getFormData: function (form, document_id, collection) {\n    let data = {};\n    if (!collection) return {};\n    const elements = form.querySelectorAll(`[name][data-collection='${collection}']`);\n    elements.forEach(el => {\n      let el_document_id = el.getAttribute('data-document_id') || \"\";\n      let name = el.getAttribute('name');\n      let value = el.value || el.getAttribute('value');\n      if (name === \"_id\") return;\n      if (!name || !value) return;\n\n      if (document_id == el_document_id) {\n        data[name] = el.value;\n      }\n    });\n    return data;\n  },\n  // getFormData: function(form, selectors) {\n  // \tconst self = this; \n  // \tconst elements = form.querySelectorAll(selectors.join(','));\n  // \tlet request_document_id = false;\n  // \tlet dataList = [];\n  // \telements.forEach(el => {\n  // \t\tlet collection = el.getAttribute('data-collection')\n  // \t\tlet document_id = el.getAttribute('data-document_id')\n  // \t\tlet name = el.getAttribute('name')\n  // \t\tif (el.getAttribute('data-save_value') == 'false') {\n  // \t\t\treturn;\n  // \t\t}\n  // \t\tif (!document_id && name) {\n  // \t\t\trequest_document_id = true;\n  // \t\t\treturn;\n  // \t\t}\n  // \t\tlet data = dataList.find(d => d.collection == collection && d.document_id == document_id);\n  // \t})\n  // },\n  getParents: function (element, selector = \"form\") {\n    if (!Element.prototype.matches) {\n      Element.prototype.matches = Element.prototype.matchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector || Element.prototype.webkitMatchesSelector || function (s) {\n        var matches = (this.document || this.ownerDocument).querySelectorAll(s),\n            i = matches.length;\n\n        while (--i >= 0 && matches.item(i) !== this) {}\n\n        return i > -1;\n      };\n    }\n\n    for (; element && element !== document; element = element.parentNode) {\n      if (element.matches(selector)) return element;\n    }\n\n    return null;\n  },\n  setDocumentIDOfElement: function (element, document_id) {\n    let old_document_id = element.getAttribute('data-document_id');\n\n    if (!old_document_id || old_document_id == \"\" || old_document_id == \"pending\") {\n      element.setAttribute('data-document_id', document_id);\n    }\n  },\n  getCOllections: function (form) {\n    let collections = [];\n    if (!form) return collections;\n    let els = form.querySelectorAll('[name][data-collection]');\n    els.forEach(el => {\n      let tmpCollection = el.getAttribute('data-collection');\n\n      if (tmpCollection && !collections.includes(tmpCollection)) {\n        collections.push(tmpCollection);\n      }\n    });\n    return collections;\n  }\n};\nvar _default = Utils;\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../CoCreate-form/src/utils.js\n")},"../CoCreate-input/src/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = void 0;\n\nvar _observer = _interopRequireDefault(__webpack_require__(/*! @cocreate/observer */ \"../CoCreate-observer/src/index.js\"));\n\nvar _form = _interopRequireDefault(__webpack_require__(/*! @cocreate/form */ \"../CoCreate-form/src/index.js\"));\n\nvar _utils = _interopRequireDefault(__webpack_require__(/*! @cocreate/utils */ \"../CoCreate-utils/src/index.js\"));\n\nvar _crud = _interopRequireDefault(__webpack_require__(/*! @cocreate/crud */ \"../CoCreate-crud/src/index.js\"));\n\nvar _crdt = _interopRequireDefault(__webpack_require__(/*! @cocreate/crdt */ \"../CoCreate-crdt/src/index.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// import CoCreateText from '@cocreate/text'\n// import CoCreateCursors from '@cocreate/cursors'\nconst CoCreateInput = {\n  selector: \"input, textarea, select\",\n  init: function () {\n    let inputs = document.querySelectorAll(this.selector);\n    const self = this;\n    inputs.forEach(input => {\n      const collection = input.getAttribute('data-collection');\n      const id = input.getAttribute('data-document_id');\n\n      if (_utils.default.isJsonString(collection)) {\n        return;\n      }\n\n      if (_utils.default.isUsageY(input)) {\n        return;\n      }\n\n      if (_observer.default.getInitialized(input)) {\n        return;\n      }\n\n      _observer.default.setInitialized(input, \"input\");\n\n      if (id && collection) {\n        _crud.default.readDocument({\n          collection: collection,\n          document_id: id\n        });\n      }\n\n      self.__initEvents(input);\n    });\n  },\n  initElement: function (container) {\n    let mainContainer = container || document;\n\n    if (!mainContainer.querySelectorAll) {\n      return;\n    }\n\n    const _this = this;\n\n    let inputs = mainContainer.querySelectorAll(this.selector);\n    inputs.forEach(input => {\n      if (_observer.default.getInitialized(input, \"input\")) {\n        return;\n      }\n\n      _observer.default.setInitialized(input, \"input\");\n\n      const collection = input.getAttribute('data-collection');\n      const id = input.getAttribute('data-document_id');\n\n      if (_utils.default.isJsonString(collection)) {\n        return;\n      }\n\n      if (_utils.default.isUsageY(input)) {\n        return;\n      }\n\n      if (id && collection) {\n        _crud.default.readDocument({\n          collection: collection,\n          document_id: id\n        });\n      }\n\n      _this.__initEvents(input);\n    });\n  },\n  save: function (input) {\n    const value = this.getValue(input);\n    const collection = input.getAttribute('data-collection') || 'module_activity';\n    const document_id = input.getAttribute('data-document_id');\n    const name = input.getAttribute('name');\n\n    _crud.default.updateDocument({\n      collection,\n      document_id,\n      data: {\n        [name]: value\n      } // broadcast_sender: false\n\n    });\n  },\n  render: function (data, allTags) {\n    let inputs = document.querySelectorAll(this.selector);\n\n    let _this = this;\n\n    inputs.forEach(input => {\n      if (!allTags) {\n        if (_utils.default.isUsageY(input)) return;\n      }\n\n      if (_utils.default.isUsageY(input)) return;\n      const collection = input.getAttribute('data-collection');\n      const id = input.getAttribute('data-document_id');\n      const name = input.getAttribute('name');\n      const data_fetch_value = input.getAttribute('data-fetch_value');\n      if (data_fetch_value === \"false\" || !_utils.default.isReadValue(input)) return;\n\n      if (data['collection'] == collection && data['document_id'] == id && name in data.data) {\n        _this.setValue(input, data['data'][name]); // fetch value event\n\n\n        input.dispatchEvent(new Event(\"updated_by_fetch\"));\n        input.dispatchEvent(new CustomEvent('CoCreateInput-run', {\n          eventType: 'rendered',\n          item: input\n        }));\n      }\n    });\n  },\n  getValue: function (input) {\n    let value = input.value;\n    let prefix = input.getAttribute('data-prefix_value') || \"\";\n    let suffix = input.getAttribute('data-suffix_value') || \"\";\n\n    if (input.type === \"checkbox\") {\n      value = input.checked;\n    } else if (input.type === \"number\") {\n      value = Number(value);\n    } else if (input.type === \"password\") {\n      value = this.__encryptPassword(value);\n    }\n\n    if (typeof value == \"string\") {\n      value = prefix + value + suffix;\n    }\n\n    return value;\n  },\n  setValue: function (input, value) {\n    if (input.type == 'checkbox') {\n      input.checked = value;\n    } else if (input.type === 'radio') {\n      input.value == value ? input.checked = true : input.checked = false;\n    }\n\n    if (input.type === 'password') {\n      value = this.__decryptPassword(value);\n    }\n\n    input.value = value;\n\n    if (CoCreate.floatingLabel) {\n      CoCreate.floatingLabel.update(input, value);\n    }\n\n    input.dispatchEvent(new CustomEvent('CoCreateInput-setvalue', {\n      eventType: 'rendered'\n    }));\n  },\n  __initEvents: function (input) {\n    const self = this;\n    input.addEventListener('set-document_id', function () {\n      if (CoCreate.crdt) {\n        _crdt.default.init({\n          collection: input.getAttribute('data-collection'),\n          document_id: input.getAttribute('data-document_id'),\n          name: input.getAttribute('name'),\n          element: input\n        });\n      }\n\n      self.save(this);\n    });\n    input.addEventListener('input', function (e) {\n      if (_utils.default.isRealTime(this)) {\n        self.save(this);\n      }\n    });\n    input.addEventListener('change', function (e) {\n      if (this.tagName == 'SELECT' && _utils.default.isRealTime(this)) {\n        self.save(this);\n      }\n    });\n\n    _crud.default.listen('updateDocument', function (data) {\n      self.render(data);\n    });\n\n    _crud.default.listen('connect', function (data) {\n      self.__getReqeust();\n    });\n\n    _crud.default.listen('readDocument', function (data) {\n      self.render(data);\n    });\n\n    const collection = input.getAttribute('data-collection');\n    const document_id = input.getAttribute('data-document_id');\n\n    if (_utils.default.checkValue(collection) && _utils.default.checkValue(document_id) && CoCreate.crdt) {\n      _crdt.default.init({\n        collection: collection,\n        document_id: document_id,\n        name: input.getAttribute('name'),\n        element: input\n      });\n    }\n  },\n  __getReqeust: function (container) {\n    let fetch_container = container || document;\n    let inputs = fetch_container.querySelectorAll(this.selector);\n    let requestData = [];\n    inputs.forEach(input => {\n      if (_utils.default.isUsageY(input)) return;\n      const collection = input.getAttribute('data-collection');\n      const id = input.getAttribute('data-document_id');\n\n      if (id && !requestData.some(d => d['collection'] === collection && d['document_id'] === id)) {\n        requestData.push({\n          'collection': collection,\n          'document_id': id\n        });\n      }\n    });\n    return requestData;\n  },\n  __encryptPassword: function (str) {\n    var encodedString = btoa(str);\n    return encodedString;\n  },\n  __decryptPassword: function (str) {\n    if (!str) {\n      return \"\";\n    }\n\n    var decode_str = atob(str);\n    return decode_str;\n  }\n};\nCoCreateInput.init();\n\n_observer.default.init({\n  name: 'CoCreateInput',\n  observe: ['subtree', 'childList'],\n  include: '[data-collection][data-document_id][name]',\n  callback: function (mutation) {\n    CoCreateInput.initElement(mutation.target);\n  }\n});\n\n_form.default.init({\n  name: 'CoCreateInput',\n  selector: \"input, textarea, select\",\n  callback: function (el) {\n    CoCreate.input.save(el);\n  }\n});\n\nvar _default = CoCreateInput;\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../CoCreate-input/src/index.js\n")},"../CoCreate-message/src/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = void 0;\n\nvar _socket = _interopRequireDefault(__webpack_require__(/*! @cocreate/socket */ \"../CoCreate-socket/src/index.js\"));\n\nvar _commonFun = __webpack_require__(/*! @cocreate/crud/src/common-fun.js */ \"../CoCreate-crud/src/common-fun.js\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nlet message_socket = new _socket.default('ws');\nconst CoCreateMessage = {\n  socket: null,\n  setSocket: function (socket) {\n    this.socket = socket;\n  },\n\n  /*\n  CoCreate.message.send({\n     namespace: '',\n     room: '',\n     broadcast: true/false,\n     broadcast_sender: true/false\n     \n     rooms: [r1, r2],\n     emit: {\n       message': 'nice game',\n       data': 'let's play a game ....'\n     }\n   })\n  */\n  send: function (data) {\n    let request_data = (0, _commonFun.getCommonParams)();\n\n    if (!data || !data.emit) {\n      return;\n    }\n\n    request_data = { ...request_data,\n      ...data\n    };\n    /** socket parameters **/\n    // if (data['broadcast'] === undefined) {\n    //   request_data['broadcast'] = true;\n    // }\n    // if (data['broadcast_sender'] === undefined) {\n    //   request_data['broadcast_sender'] = true;\n    // }\n\n    const room = (0, _commonFun.generateSocketClient)(data.namespace, data.room);\n    this.socket.send('sendMessage', request_data, room);\n  },\n  receive: function (message, fun) {\n    this.socket.listen(message, fun);\n  },\n  createSocket: function (host, namespace) {\n    if (!this.socket) return;\n\n    if (namespace) {\n      this.socket.create({\n        namespace: namespace,\n        room: null,\n        host: host\n      });\n      this.socket.setGlobalScope(namespace);\n    } else {\n      this.socket.create({\n        namespace: null,\n        room: null,\n        host: host\n      });\n    }\n  },\n  listen: function (message, fun) {\n    this.socket.listen(message, fun);\n  },\n  listenAsync: function (eventname) {\n    this.socket.listenAsync(eventname);\n  }\n};\nCoCreateMessage.setSocket(message_socket);\nCoCreateMessage.createSocket(window.config.host ? window.config.host : 'server.cocreate.app', window.config.organization_Id);\nvar _default = CoCreateMessage;\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS5hdHRyaWJ1dGVzLy4uL0NvQ3JlYXRlLW1lc3NhZ2Uvc3JjL2luZGV4LmpzP2RlZWYiXSwibmFtZXMiOlsibWVzc2FnZV9zb2NrZXQiLCJDb0NyZWF0ZVNvY2tldCIsIkNvQ3JlYXRlTWVzc2FnZSIsInNvY2tldCIsInNldFNvY2tldCIsInNlbmQiLCJkYXRhIiwicmVxdWVzdF9kYXRhIiwiZW1pdCIsInJvb20iLCJuYW1lc3BhY2UiLCJyZWNlaXZlIiwibWVzc2FnZSIsImZ1biIsImxpc3RlbiIsImNyZWF0ZVNvY2tldCIsImhvc3QiLCJjcmVhdGUiLCJzZXRHbG9iYWxTY29wZSIsImxpc3RlbkFzeW5jIiwiZXZlbnRuYW1lIiwid2luZG93IiwiY29uZmlnIiwib3JnYW5pemF0aW9uX0lkIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBQ0E7Ozs7QUFFQSxJQUFJQSxjQUFjLEdBQUcsSUFBSUMsZUFBSixDQUFtQixJQUFuQixDQUFyQjtBQUVBLE1BQU1DLGVBQWUsR0FBRztBQUN0QkMsUUFBTSxFQUFFLElBRGM7QUFFdEJDLFdBQVMsRUFBRSxVQUFTRCxNQUFULEVBQWlCO0FBQzFCLFNBQUtBLE1BQUwsR0FBY0EsTUFBZDtBQUNELEdBSnFCOztBQUt2QjtBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0VFLE1BQUksRUFBRSxVQUFTQyxJQUFULEVBQWU7QUFDbkIsUUFBSUMsWUFBWSxHQUFHLGlDQUFuQjs7QUFFQSxRQUFJLENBQUNELElBQUQsSUFBUyxDQUFDQSxJQUFJLENBQUNFLElBQW5CLEVBQXlCO0FBQ3ZCO0FBQ0Q7O0FBQ0RELGdCQUFZLEdBQUcsRUFBQyxHQUFHQSxZQUFKO0FBQWtCLFNBQUdEO0FBQXJCLEtBQWY7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQSxVQUFNRyxJQUFJLEdBQUcscUNBQXFCSCxJQUFJLENBQUNJLFNBQTFCLEVBQXFDSixJQUFJLENBQUNHLElBQTFDLENBQWI7QUFFQSxTQUFLTixNQUFMLENBQVlFLElBQVosQ0FBaUIsYUFBakIsRUFBZ0NFLFlBQWhDLEVBQThDRSxJQUE5QztBQUNELEdBckNxQjtBQXVDdEJFLFNBQU8sRUFBRSxVQUFTQyxPQUFULEVBQWtCQyxHQUFsQixFQUF1QjtBQUM5QixTQUFLVixNQUFMLENBQVlXLE1BQVosQ0FBbUJGLE9BQW5CLEVBQTRCQyxHQUE1QjtBQUNELEdBekNxQjtBQTJDdEJFLGNBQVksRUFBRSxVQUFTQyxJQUFULEVBQWVOLFNBQWYsRUFBMEI7QUFDdEMsUUFBSSxDQUFDLEtBQUtQLE1BQVYsRUFBa0I7O0FBRXBCLFFBQUlPLFNBQUosRUFBZTtBQUNkLFdBQUtQLE1BQUwsQ0FBWWMsTUFBWixDQUFtQjtBQUNsQlAsaUJBQVMsRUFBRUEsU0FETztBQUVsQkQsWUFBSSxFQUFFLElBRlk7QUFHbEJPLFlBQUksRUFBRUE7QUFIWSxPQUFuQjtBQUtBLFdBQUtiLE1BQUwsQ0FBWWUsY0FBWixDQUEyQlIsU0FBM0I7QUFDQSxLQVBELE1BT087QUFDTixXQUFLUCxNQUFMLENBQVljLE1BQVosQ0FBbUI7QUFDbEJQLGlCQUFTLEVBQUUsSUFETztBQUVsQkQsWUFBSSxFQUFFLElBRlk7QUFHbEJPLFlBQUksRUFBRUE7QUFIWSxPQUFuQjtBQUtBO0FBQ0QsR0E1RHNCO0FBOER2QkYsUUFBTSxFQUFFLFVBQVNGLE9BQVQsRUFBa0JDLEdBQWxCLEVBQXVCO0FBQzVCLFNBQUtWLE1BQUwsQ0FBWVcsTUFBWixDQUFtQkYsT0FBbkIsRUFBNEJDLEdBQTVCO0FBQ0QsR0FoRXFCO0FBa0V0Qk0sYUFBVyxFQUFFLFVBQVNDLFNBQVQsRUFBb0I7QUFDL0IsU0FBS2pCLE1BQUwsQ0FBWWdCLFdBQVosQ0FBd0JDLFNBQXhCO0FBQ0Q7QUFwRXFCLENBQXhCO0FBdUVBbEIsZUFBZSxDQUFDRSxTQUFoQixDQUEwQkosY0FBMUI7QUFDQUUsZUFBZSxDQUFDYSxZQUFoQixDQUE2Qk0sTUFBTSxDQUFDQyxNQUFQLENBQWNOLElBQWQsR0FBcUJLLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjTixJQUFuQyxHQUEwQyxxQkFBdkUsRUFBOEZLLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjQyxlQUE1RztlQUVlckIsZSIsImZpbGUiOiIuLi9Db0NyZWF0ZS1tZXNzYWdlL3NyYy9pbmRleC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBDb0NyZWF0ZVNvY2tldCBmcm9tIFwiQGNvY3JlYXRlL3NvY2tldFwiXG5pbXBvcnQge2dldENvbW1vblBhcmFtcywgZ2V0Q29tbW9uUGFyYW1zRXh0ZW5kLCBnZW5lcmF0ZVNvY2tldENsaWVudH0gZnJvbSBcIkBjb2NyZWF0ZS9jcnVkL3NyYy9jb21tb24tZnVuLmpzXCJcblxubGV0IG1lc3NhZ2Vfc29ja2V0ID0gbmV3IENvQ3JlYXRlU29ja2V0KCd3cycpO1xuXG5jb25zdCBDb0NyZWF0ZU1lc3NhZ2UgPSB7XG4gIHNvY2tldDogbnVsbCxcbiAgc2V0U29ja2V0OiBmdW5jdGlvbihzb2NrZXQpIHtcbiAgICB0aGlzLnNvY2tldCA9IHNvY2tldDtcbiAgfSxcbiAvKlxuIENvQ3JlYXRlLm1lc3NhZ2Uuc2VuZCh7XG4gICAgbmFtZXNwYWNlOiAnJyxcbiAgICByb29tOiAnJyxcbiAgICBicm9hZGNhc3Q6IHRydWUvZmFsc2UsXG4gICAgYnJvYWRjYXN0X3NlbmRlcjogdHJ1ZS9mYWxzZVxuICAgIFxuICAgIHJvb21zOiBbcjEsIHIyXSxcbiAgICBlbWl0OiB7XG4gICAgICBtZXNzYWdlJzogJ25pY2UgZ2FtZScsXG4gICAgICBkYXRhJzogJ2xldCdzIHBsYXkgYSBnYW1lIC4uLi4nXG4gICAgfVxuICB9KVxuICovXG4gIHNlbmQ6IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICBsZXQgcmVxdWVzdF9kYXRhID0gZ2V0Q29tbW9uUGFyYW1zKCk7XG4gICAgXG4gICAgaWYgKCFkYXRhIHx8ICFkYXRhLmVtaXQpIHtcbiAgICAgIHJldHVybjsgICAgIFxuICAgIH1cbiAgICByZXF1ZXN0X2RhdGEgPSB7Li4ucmVxdWVzdF9kYXRhLCAuLi5kYXRhfVxuICAgIFxuICAgIC8qKiBzb2NrZXQgcGFyYW1ldGVycyAqKi9cbiAgICAvLyBpZiAoZGF0YVsnYnJvYWRjYXN0J10gPT09IHVuZGVmaW5lZCkge1xuICAgIC8vICAgcmVxdWVzdF9kYXRhWydicm9hZGNhc3QnXSA9IHRydWU7XG4gICAgLy8gfVxuICAgIC8vIGlmIChkYXRhWydicm9hZGNhc3Rfc2VuZGVyJ10gPT09IHVuZGVmaW5lZCkge1xuICAgIC8vICAgcmVxdWVzdF9kYXRhWydicm9hZGNhc3Rfc2VuZGVyJ10gPSB0cnVlO1xuICAgIC8vIH1cbiAgICBjb25zdCByb29tID0gZ2VuZXJhdGVTb2NrZXRDbGllbnQoZGF0YS5uYW1lc3BhY2UsIGRhdGEucm9vbSk7XG4gICAgXG4gICAgdGhpcy5zb2NrZXQuc2VuZCgnc2VuZE1lc3NhZ2UnLCByZXF1ZXN0X2RhdGEsIHJvb20pXG4gIH0sXG4gXG4gIHJlY2VpdmU6IGZ1bmN0aW9uKG1lc3NhZ2UsIGZ1bikge1xuICAgIHRoaXMuc29ja2V0Lmxpc3RlbihtZXNzYWdlLCBmdW4pO1xuICB9LFxuIFxuIFx0Y3JlYXRlU29ja2V0OiBmdW5jdGlvbihob3N0LCBuYW1lc3BhY2UpIHtcbiBcdCAgaWYgKCF0aGlzLnNvY2tldCkgcmV0dXJuO1xuIFx0ICBcblx0XHRpZiAobmFtZXNwYWNlKSB7XG5cdFx0XHR0aGlzLnNvY2tldC5jcmVhdGUoe1xuXHRcdFx0XHRuYW1lc3BhY2U6IG5hbWVzcGFjZSwgXG5cdFx0XHRcdHJvb206IG51bGwsXG5cdFx0XHRcdGhvc3Q6IGhvc3Rcblx0XHRcdH0pO1xuXHRcdFx0dGhpcy5zb2NrZXQuc2V0R2xvYmFsU2NvcGUobmFtZXNwYWNlKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5zb2NrZXQuY3JlYXRlKHtcblx0XHRcdFx0bmFtZXNwYWNlOiBudWxsLCBcblx0XHRcdFx0cm9vbTogbnVsbCxcblx0XHRcdFx0aG9zdDogaG9zdFxuXHRcdFx0fSk7XG5cdFx0fVxuXHR9LFxuXHRcblx0bGlzdGVuOiBmdW5jdGlvbihtZXNzYWdlLCBmdW4pIHtcbiAgICB0aGlzLnNvY2tldC5saXN0ZW4obWVzc2FnZSwgZnVuKTtcbiAgfSxcbiAgXG4gIGxpc3RlbkFzeW5jOiBmdW5jdGlvbihldmVudG5hbWUpIHtcbiAgICB0aGlzLnNvY2tldC5saXN0ZW5Bc3luYyhldmVudG5hbWUpO1xuICB9LFxufVxuXG5Db0NyZWF0ZU1lc3NhZ2Uuc2V0U29ja2V0KG1lc3NhZ2Vfc29ja2V0KTtcbkNvQ3JlYXRlTWVzc2FnZS5jcmVhdGVTb2NrZXQod2luZG93LmNvbmZpZy5ob3N0ID8gd2luZG93LmNvbmZpZy5ob3N0IDogJ3NlcnZlci5jb2NyZWF0ZS5hcHAnLCB3aW5kb3cuY29uZmlnLm9yZ2FuaXphdGlvbl9JZClcblxuZXhwb3J0IGRlZmF1bHQgQ29DcmVhdGVNZXNzYWdlO1xuXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../CoCreate-message/src/index.js\n")},"../CoCreate-observer/src/index.js":(__unused_webpack_module,exports)=>{eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.default = void 0;\n// window.addEventListener("load", () => {\n\n/*\nCoCreate.observer.init({ \n\tname: \'CoCreateFetchInit\', // no usage, just to provide for console debugging \n\tobserve: [\'subtree\', \'childList\',\'attributes\'], // the same parameters of options in #https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver/observe\n\tattributes: [\'data-fetch_collection\'], // it doesn\'t count added nodes or remove nodes\n\tinclude: ".classname", // a selector to select only elements that matches\n\texclude: ".classname", // a selector to exclude elements from processing\n\tcallback: function(mutation) { // a function which gets a mutation object according to #https://developer.mozilla.org/en-US/docs/Web/API/MutationRecord\n\t\tCoCreateFetch.initElement(mutation.target)\n\t}\n})\n*/\n\n/**\n * description\n * \n * @param {String} [name] - an optional name to provide for debugging console\n * @param {Array} observe - a list of mutation type to be observerd, a mix of possible `attributes`, `childList` or `subtree`\n * ... and other params can be here \n * \n * @return null\n */\nwindow.profiler = {};\nwindow.counter = 0;\nwindow.counter2 = 0;\nwindow.targets = {};\nwindow.attributeName = {};\n\nif (!Element.prototype.matches) {\n  Element.prototype.matches = Element.prototype.matchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector || Element.prototype.webkitMatchesSelector || function (s) {\n    var matches = (this.document || this.ownerDocument).querySelectorAll(s),\n        i = matches.length;\n\n    while (--i >= 0 && matches.item(i) !== this) {}\n\n    return i > -1;\n  };\n}\n\nconst CoCreateObserver = {\n  initTasks: new Map(),\n  attrTasks: new Map(),\n  rules: new Map(),\n  rulesArray: [],\n  __init: function () {\n    const self = this;\n    const observer = new MutationObserver((mutationsList, observer) => self.__callback(mutationsList, observer)); // setTimeout(()=>{\n\n    observer.observe(document.body, {\n      attributes: true,\n      childList: true,\n      subtree: true,\n      characterData: false,\n      attributeOldValue: true,\n      characterData: true\n    });\n  },\n  // init: function(data) {\n  //   this.add(data);\n  // },\n  init: function ({\n    observe,\n    include,\n    exclude,\n    attributes,\n    name,\n    callback\n  }) {\n    // if (name == \'ccAttribute\' || name == \'ccCss\') {\n    if (observe.some(x => x == "childList")) {\n      this.initTasks.set(callback, {\n        observe,\n        include,\n        exclude,\n        attributes,\n        name\n      });\n    }\n\n    if (observe.some(x => x == "attributes")) {\n      this.attrTasks.set(callback, {\n        observe,\n        include,\n        exclude,\n        attributes,\n        name\n      });\n    } // }\n\n  },\n  remove: function (callback) {\n    this.initTasks.delete(callback);\n    this.attrTasks.delete(callback);\n  },\n  addRule: function ({\n    include,\n    exclude,\n    name\n  }) {\n    this.rules.set(name, {\n      include,\n      exclude\n    });\n    this.rulesArray = Array.from(this.rules);\n  },\n  removeRule: function ({\n    name\n  }) {\n    this.rules.delete(name);\n    this.rulesArray = Array.from(this.rules);\n  },\n  __callback: function (mutationsList, observer) {\n    // console.log(this)\n    window.counter++;\n\n    for (let mutation of mutationsList) {\n      if (mutation.type == "childList" && mutation.addedNodes.length > 0) {\n        //. run init functions\n        this.__initCallback(mutation);\n      }\n\n      if (mutation.type == "attributes") {\n        //. run attributes functions\n        this.__attrCallback(mutation);\n      }\n    }\n  },\n  __initCallback: function (mutation) {\n    let addedNodes = Array.from(mutation.addedNodes);\n    this.initTasks.forEach(({\n      observe,\n      include,\n      exclude,\n      attributes,\n      name\n    }, callback) => {\n      mutation.addedNodes.forEach(el => {\n        if (!el.tagName) return;\n\n        if (include && !(el.matches(include) || el.querySelector(include))) {\n          return;\n        }\n\n        if (exclude && (el.matches(exclude) || el.querySelector(exclude))) {\n          return;\n        }\n\n        if (el.created) return;\n        window.counter2++;\n        window.profiler[name] = window.profiler[name] != undefined ? window.profiler[name] + 1 : 0;\n        window.targets[mutation.target.id || mutation.target.tagName] = window.targets[mutation.target.id || mutation.target.tagName] != undefined ? window.targets[mutation.target.id || mutation.target.tagName] + 1 : 0;\n        window.attributeName[mutation.attributeName] = window.attributeName[mutation.attributeName] != undefined ? window.attributeName[mutation.attributeName] + 1 : 0;\n        callback.apply(null, [{\n          type: mutation.type,\n          target: el\n        }]);\n      });\n    });\n    addedNodes.map(el => el.created = true);\n  },\n  __attrCallback: function (mutation) {\n    for (let [name, {\n      include,\n      exclude\n    }] of this.rulesArray) {\n      if (include && !mutation.target.matches(include)) return;\n      if (exclude && mutation.target.matches(exclude)) return;\n    }\n\n    this.attrTasks.forEach(({\n      observe,\n      include,\n      exclude,\n      attributes,\n      name\n    }, callback) => {\n      if (attributes && mutation.attributeName && !attributes.includes(mutation.attributeName)) {\n        return;\n      }\n\n      if (include && !mutation.target.matches(include)) return;\n      if (exclude && mutation.target.matches(exclude)) return;\n\n      if (mutation.attributeName) {\n        let newValue = mutation.target.getAttribute(mutation.attributeName);\n\n        if (newValue != mutation.oldValue) {\n          window.counter2++;\n          window.profiler[name] = window.profiler[name] != undefined ? window.profiler[name] + 1 : 0;\n          window.targets[mutation.target.id || mutation.target.tagName] = window.targets[mutation.target.id || mutation.target.tagName] != undefined ? window.targets[mutation.target.id || mutation.target.tagName] + 1 : 0;\n          window.attributeName[mutation.attributeName] = window.attributeName[mutation.attributeName] != undefined ? window.attributeName[mutation.attributeName] + 1 : 0;\n          callback.apply(null, [mutation]);\n        }\n      }\n    });\n  },\n  setInitialized: function (element, type) {\n    // element.setAttribute(`initialized_${type}`, "true");\n    type = type || "";\n    let key = "co_initialized_" + type;\n    element[key] = true;\n  },\n  getInitialized: function (element, type) {\n    type = type || "";\n    let key = "co_initialized_" + type;\n\n    if (!element[key]) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n};\n\nCoCreateObserver.__init();\n\nvar _default = CoCreateObserver;\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../CoCreate-observer/src/index.js\n')},"../CoCreate-select/src/adapter.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = void 0;\n\nvar _select = _interopRequireDefault(__webpack_require__(/*! ./select.js */ \"../CoCreate-select/src/select.js\"));\n\nvar _crud = _interopRequireDefault(__webpack_require__(/*! @cocreate/crud */ \"../CoCreate-crud/src/index.js\"));\n\nvar _form = _interopRequireDefault(__webpack_require__(/*! @cocreate/form */ \"../CoCreate-form/src/index.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst SelectAdapter = {\n  init: function () {\n    this.initElement();\n\n    this.__initEvents();\n  },\n  initElement: function (container) {\n    const mainContainer = container || document;\n\n    if (!mainContainer.querySelectorAll) {\n      return;\n    }\n\n    let containerList = mainContainer.querySelectorAll('cocreate-select, div.select--field');\n\n    for (let i = 0; i < containerList.length; i++) {\n      _select.default.__initSelect(containerList[i]);\n\n      this.__initElementEvent(containerList[i]);\n    }\n  },\n  __initEvents: function () {\n    const self = this;\n    document.addEventListener('dndsuccess', function (e) {\n      const {\n        dropedEl,\n        dragedEl\n      } = e.detail;\n\n      if (typeof dropedEl.tagName != 'undefined' && dropedEl.tagName.toLowerCase() == 'cocreate-select' || dropedEl.classList.contains('select--field')) {\n        self.save(dropedEl);\n        dropedEl.dispatchEvent(new CustomEvent('selectedValue'));\n      }\n    });\n    document.addEventListener('CoCreateSelect-save', function (e) {\n      const {\n        detail: {\n          element\n        }\n      } = e;\n\n      if (!element) {\n        return;\n      }\n\n      self.save(element);\n    });\n\n    _crud.default.listen('readDocument', function (data) {\n      if (data.metadata == 'cocreate-select') {\n        _select.default.setValue(data);\n      }\n    });\n\n    _crud.default.listen('updateDocument', function (data) {\n      if (data.metadata == 'cocreate-select') {\n        _select.default.setValue(data);\n      }\n    });\n\n    document.addEventListener('CoCreate-selected', function (e) {\n      const {\n        detail: {\n          element,\n          value\n        }\n      } = e;\n      console.log(e.detail);\n    });\n  },\n  __initElementEvent: function (selectContainer) {\n    const self = this;\n    selectContainer.addEventListener('set-document_id', function () {\n      self.save(this);\n    }); //. fetch logic\n\n    let collection = selectContainer.getAttribute('data-collection') || 'module_activity';\n    let id = selectContainer.getAttribute('data-document_id');\n\n    if (collection && id) {\n      _crud.default.readDocument({\n        'collection': collection,\n        'document_id': id,\n        'metadata': 'cocreate-select'\n      });\n    }\n  },\n  __sendRequest: function (selectContainer) {\n    let collection = selectContainer.getAttribute('data-collection') || 'module_activity';\n    let id = selectContainer.getAttribute('data-document_id');\n\n    if (collection && id) {\n      _crud.default.readDocument({\n        'collection': collection,\n        'document_id': id,\n        'metadata': 'cocreate-select'\n      });\n    }\n  },\n  save: function (element, isStore = true) {\n    let value = _select.default.getValue(element);\n\n    let collection = element.getAttribute('data-collection') || 'module_activity';\n    let id = element.getAttribute('data-document_id');\n    let name = element.getAttribute('name');\n    let realtime = element.getAttribute('data-realtime') || \"true\";\n    if (!name) return;\n    if (realtime != \"true\" && !isStore) return;\n\n    if (element.getAttribute('data-save_value') == 'false') {\n      return;\n    }\n\n    if (!_form.default.checkID(element)) {\n      _form.default.request({\n        element,\n        value,\n        nameAttr: \"name\"\n      });\n\n      element.setAttribute('data-document_id', 'pending');\n    } else if (id) {\n      _crud.default.updateDocument({\n        'collection': collection,\n        'document_id': id,\n        'data': {\n          [name]: value\n        },\n        'upsert': true,\n        'metadata': 'cocreate-select'\n      });\n    }\n  }\n};\nvar _default = SelectAdapter;\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../CoCreate-select/src/adapter.js\n")},"../CoCreate-select/src/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = void 0;\n\nvar _select = _interopRequireDefault(__webpack_require__(/*! ./select.js */ \"../CoCreate-select/src/select.js\"));\n\nvar _adapter = _interopRequireDefault(__webpack_require__(/*! ./adapter.js */ \"../CoCreate-select/src/adapter.js\"));\n\nvar _observer = _interopRequireDefault(__webpack_require__(/*! @cocreate/observer */ \"../CoCreate-observer/src/index.js\"));\n\nvar _form = _interopRequireDefault(__webpack_require__(/*! @cocreate/form */ \"../CoCreate-form/src/index.js\"));\n\n__webpack_require__(/*! ./CoCreate-select.css */ \"../CoCreate-select/src/CoCreate-select.css\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_adapter.default.init();\n\n_select.default.adapter = _adapter.default;\n\n_observer.default.init({\n  name: 'CoCreateSelectAttributes',\n  observe: ['attributes'],\n  attributes: ['data-document_id'],\n  include: 'cocreate-select',\n  callback: function (mutation) {\n    _adapter.default.__sendRequest(mutation.target);\n  }\n});\n\n_observer.default.init({\n  name: 'CoCreateSelect',\n  observe: ['subtree', 'childList'],\n  include: 'cocreate-select',\n  callback: function (mutation) {\n    _adapter.default.initElement(mutation.target);\n  }\n});\n\n_form.default.init({\n  name: 'CoCreateSelect',\n  selector: \"cocreate-select\",\n  callback: function (el) {\n    _adapter.default.save(el);\n  }\n});\n\nvar _default = _select.default;\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS5hdHRyaWJ1dGVzLy4uL0NvQ3JlYXRlLXNlbGVjdC9zcmMvaW5kZXguanM/ZTBlMSJdLCJuYW1lcyI6WyJTZWxlY3RBZGFwdGVyIiwiaW5pdCIsIkNvQ3JlYXRlU2VsZWN0IiwiYWRhcHRlciIsIkNvQ3JlYXRlT2JzZXJ2ZXIiLCJuYW1lIiwib2JzZXJ2ZSIsImF0dHJpYnV0ZXMiLCJpbmNsdWRlIiwiY2FsbGJhY2siLCJtdXRhdGlvbiIsIl9fc2VuZFJlcXVlc3QiLCJ0YXJnZXQiLCJpbml0RWxlbWVudCIsImZvcm0iLCJzZWxlY3RvciIsImVsIiwic2F2ZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOzs7O0FBRUFBLGlCQUFjQyxJQUFkOztBQUNBQyxnQkFBZUMsT0FBZixHQUF5QkgsZ0JBQXpCOztBQUVBSSxrQkFBaUJILElBQWpCLENBQXNCO0FBQ3JCSSxNQUFJLEVBQUUsMEJBRGU7QUFFckJDLFNBQU8sRUFBRSxDQUFDLFlBQUQsQ0FGWTtBQUdyQkMsWUFBVSxFQUFFLENBQUMsa0JBQUQsQ0FIUztBQUlyQkMsU0FBTyxFQUFFLGlCQUpZO0FBS3JCQyxVQUFRLEVBQUUsVUFBU0MsUUFBVCxFQUFtQjtBQUM1QlYscUJBQWNXLGFBQWQsQ0FBNEJELFFBQVEsQ0FBQ0UsTUFBckM7QUFDQTtBQVBvQixDQUF0Qjs7QUFVQVIsa0JBQWlCSCxJQUFqQixDQUFzQjtBQUNyQkksTUFBSSxFQUFFLGdCQURlO0FBRXJCQyxTQUFPLEVBQUUsQ0FBQyxTQUFELEVBQVksV0FBWixDQUZZO0FBR3JCRSxTQUFPLEVBQUUsaUJBSFk7QUFJckJDLFVBQVEsRUFBRSxVQUFTQyxRQUFULEVBQW1CO0FBQzVCVixxQkFBY2EsV0FBZCxDQUEwQkgsUUFBUSxDQUFDRSxNQUFuQztBQUNBO0FBTm9CLENBQXRCOztBQVNBRSxjQUFLYixJQUFMLENBQVU7QUFDVEksTUFBSSxFQUFFLGdCQURHO0FBRVRVLFVBQVEsRUFBRSxpQkFGRDtBQUdUTixVQUFRLEVBQUUsVUFBU08sRUFBVCxFQUFhO0FBQ3RCaEIscUJBQWNpQixJQUFkLENBQW1CRCxFQUFuQjtBQUNBO0FBTFEsQ0FBVjs7ZUFPZWQsZSIsImZpbGUiOiIuLi9Db0NyZWF0ZS1zZWxlY3Qvc3JjL2luZGV4LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IENvQ3JlYXRlU2VsZWN0IGZyb20gXCIuL3NlbGVjdC5qc1wiXG5pbXBvcnQgU2VsZWN0QWRhcHRlciBmcm9tIFwiLi9hZGFwdGVyLmpzXCJcbmltcG9ydCBDb0NyZWF0ZU9ic2VydmVyIGZyb20gJ0Bjb2NyZWF0ZS9vYnNlcnZlcic7XG5pbXBvcnQgZm9ybSBmcm9tICdAY29jcmVhdGUvZm9ybSdcbmltcG9ydCAnLi9Db0NyZWF0ZS1zZWxlY3QuY3NzJztcblxuU2VsZWN0QWRhcHRlci5pbml0KCk7XG5Db0NyZWF0ZVNlbGVjdC5hZGFwdGVyID0gU2VsZWN0QWRhcHRlcjtcblxuQ29DcmVhdGVPYnNlcnZlci5pbml0KHsgXG5cdG5hbWU6ICdDb0NyZWF0ZVNlbGVjdEF0dHJpYnV0ZXMnLCBcblx0b2JzZXJ2ZTogWydhdHRyaWJ1dGVzJ10sXG5cdGF0dHJpYnV0ZXM6IFsnZGF0YS1kb2N1bWVudF9pZCddLFxuXHRpbmNsdWRlOiAnY29jcmVhdGUtc2VsZWN0JywgXG5cdGNhbGxiYWNrOiBmdW5jdGlvbihtdXRhdGlvbikge1xuXHRcdFNlbGVjdEFkYXB0ZXIuX19zZW5kUmVxdWVzdChtdXRhdGlvbi50YXJnZXQpXG5cdH1cbn0pO1xuXG5Db0NyZWF0ZU9ic2VydmVyLmluaXQoeyBcblx0bmFtZTogJ0NvQ3JlYXRlU2VsZWN0JywgXG5cdG9ic2VydmU6IFsnc3VidHJlZScsICdjaGlsZExpc3QnXSxcblx0aW5jbHVkZTogJ2NvY3JlYXRlLXNlbGVjdCcsIFxuXHRjYWxsYmFjazogZnVuY3Rpb24obXV0YXRpb24pIHtcblx0XHRTZWxlY3RBZGFwdGVyLmluaXRFbGVtZW50KG11dGF0aW9uLnRhcmdldClcblx0fVxufSk7XG5cbmZvcm0uaW5pdCh7XG5cdG5hbWU6ICdDb0NyZWF0ZVNlbGVjdCcsXG5cdHNlbGVjdG9yOiBcImNvY3JlYXRlLXNlbGVjdFwiLFxuXHRjYWxsYmFjazogZnVuY3Rpb24oZWwpIHtcblx0XHRTZWxlY3RBZGFwdGVyLnNhdmUoZWwpO1xuXHR9XG59KTtcbmV4cG9ydCBkZWZhdWx0IENvQ3JlYXRlU2VsZWN0O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../CoCreate-select/src/index.js\n")},"../CoCreate-select/src/select.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = void 0;\n\nvar _observer = _interopRequireDefault(__webpack_require__(/*! @cocreate/observer */ \"../CoCreate-observer/src/index.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst CoCreateSelect = {\n  init: function () {\n    this.initElement(); // this.__initEvents()\n  },\n  initElement: function (container) {\n    const mainContainer = container || document;\n\n    if (!mainContainer.querySelectorAll) {\n      return;\n    }\n\n    let containerList = mainContainer.querySelectorAll('cocreate-select, div.select--field');\n\n    for (let i = 0; i < containerList.length; i++) {\n      let selectContainer = containerList[i];\n\n      this.__initSelect(selectContainer);\n    }\n  },\n  __initEvents: function () {\n    const self = this;\n    document.addEventListener('dndsuccess', function (e) {\n      const {\n        dropedEl,\n        dragedEl\n      } = e.detail;\n\n      if (typeof dropedEl.tagName != 'undefined' && dropedEl.tagName.toLowerCase() == 'cocreate-select' || dropedEl.classList.contains('select--field')) {\n        self.save(dropedEl);\n\n        self.__fireSelectedEvent(dropedEl);\n      }\n    });\n  },\n  __initSelect: function (selectContainer) {\n    if (_observer.default.getInitialized(selectContainer, \"cocreate-select\")) {\n      return;\n    }\n\n    _observer.default.setInitialized(selectContainer, \"cocreate-select\");\n\n    let input = selectContainer.querySelector('input');\n    let ul_selector = selectContainer.querySelector('ul.selectable--list');\n    const self = this;\n\n    if (input) {\n      input.addEventListener('keydown', function (e) {\n        let keyCode = e.keyCode;\n\n        if (keyCode == 13) {\n          e.preventDefault();\n        }\n\n        if (keyCode == 13 && this.value.length > 0) {\n          self.__selectValue(this.value, selectContainer);\n\n          self.save(selectContainer);\n\n          self.__fireSelectedEvent(selectContainer);\n\n          this.value = '';\n        } else if (keyCode == 8 && !this.value.length) {\n          let selectedItems = selectContainer.querySelectorAll('[selected]');\n\n          if (selectedItems.length > 0) {\n            selectedItems[selectedItems.length - 1].remove();\n            self.save(selectContainer);\n\n            self.__fireSelectedEvent(selectContainer);\n          }\n        }\n      });\n    }\n\n    document.addEventListener('click', function (event) {\n      var isClickInside = selectContainer.contains(event.target);\n\n      if (!isClickInside) {\n        self.__closeDropDown(selectContainer);\n      }\n    });\n    ul_selector.addEventListener('click', function (e) {\n      if (!e.target.matches('li')) {\n        let li = e.target;\n\n        while (typeof li.tagName != 'undefined' && li.tagName.toLowerCase() != 'li') {\n          li = li.parentNode;\n        }\n\n        if (li.classList && li.classList.contains('selectable')) {\n          // check if data exist\n          let value = li.getAttribute('value');\n          let selectValue = self.getValue(selectContainer);\n          if (value == selectValue || selectValue.indexOf(value) > -1) return; /// here emit event\n\n          self.__selectItem(li, selectContainer);\n\n          self.save(selectContainer);\n\n          self.__fireSelectedEvent(selectContainer);\n        }\n      }\n    });\n    selectContainer.addEventListener('click', function (e) {\n      if (e.target.matches('.remove')) {\n        e.target.parentNode.remove();\n        self.save(selectContainer);\n\n        self.__fireSelectedEvent(selectContainer);\n\n        return;\n      }\n\n      if (!ul_selector.classList.contains('open')) {\n        self.__openDropDown(selectContainer);\n      }\n\n      let input = selectContainer.querySelector('input');\n\n      if (input) {\n        input.focus();\n      }\n    }, true);\n  },\n  __openDropDown: function (selectContainer, focus = true) {\n    if (focus) {\n      let input = selectContainer.querySelector('input');\n      let ul_selector = selectContainer.querySelector('ul.selectable--list');\n\n      if (input) {\n        input.classList.add('open');\n        input.focus();\n      }\n\n      if (ul_selector && ul_selector) {\n        ul_selector.classList.add('open');\n      }\n\n      selectContainer.dispatchEvent(new CustomEvent('CoCreateSelect-open'));\n    }\n  },\n  __closeDropDown: function (selectContainer) {\n    let input = selectContainer.querySelector('input');\n    let ul_selector = selectContainer.querySelector('ul.selectable--list');\n\n    if (input && input.classList.contains('open')) {\n      input.classList.remove('open');\n    }\n\n    if (ul_selector && ul_selector.classList.contains('open')) {\n      ul_selector.classList.remove('open');\n      selectContainer.dispatchEvent(new CustomEvent('CoCreateSelect-close'));\n    }\n  },\n  setValue: function (data) {\n    const self = this;\n    let selectContainers = document.querySelectorAll('cocreate-select,.select--field');\n    selectContainers.forEach(selectEl => {\n      const collection = selectEl.getAttribute('data-collection') || 'module_activity';\n      const id = selectEl.getAttribute('data-document_id');\n      const name = selectEl.getAttribute('name');\n\n      if (data['collection'] == collection && data['document_id'] == id && name) {\n        self.__renderValue(selectEl, data['data'][name]);\n      }\n    });\n  },\n  renderValue: function (target, value) {\n    this.__renderValue(target, value);\n  },\n  __renderValue: function (selectContainer, values) {\n    if (!values) {\n      return;\n    }\n\n    let selectedItems = selectContainer.querySelectorAll('[selected]');\n    selectedItems.forEach(item => item.remove());\n    let ul_selector = selectContainer.querySelector('ul.selectable--list');\n\n    if (values && typeof values === 'string') {\n      values = [values];\n    }\n\n    for (let i = 0; i < values.length; i++) {\n      const selectedItem = ul_selector.querySelector(\"li[value='\" + values[i] + \"']\");\n\n      if (selectedItem) {\n        this.__selectItem(selectedItem, selectContainer, false);\n      } else {\n        this.__selectValue(values[i], selectContainer, false);\n      }\n    }\n\n    try {\n      if (CoCreateFloatLabel) {\n        CoCreateFloatLabel.update(selectContainer, values && values.length > 0);\n      }\n    } catch (err) {}\n  },\n  __selectValue: function (value, selectContainer) {\n    let currentValue = this.getValue(selectContainer);\n    if (currentValue == value || currentValue.indexOf(value) > -1) return;\n    let searchInput = selectContainer.querySelector('input');\n    let ul_selector = selectContainer.querySelector('ul.selectable--list');\n    let span = document.createElement('span');\n    span.innerHTML = 'x';\n    span.classList.add('remove');\n    let li = document.createElement('li');\n    li.setAttribute('value', value); // li.setAttribute('data-value', value);\n\n    li.innerHTML = value;\n    li.setAttribute('selected', \"\"); // li.classList.add('selected');\n\n    li.classList.remove('selectable');\n    li.appendChild(span);\n    selectContainer.insertBefore(li, searchInput ? searchInput : ul_selector);\n  },\n  __selectItem: function (li, selectContainer, focus = true) {\n    let type = selectContainer.hasAttribute('multiple') ? 'multiple' : 'single';\n    let searchInput = selectContainer.querySelector('input');\n    let ul_selector = selectContainer.querySelector('ul.selectable--list');\n\n    if (type == 'single') {\n      let selectedItems = selectContainer.querySelectorAll('[selected]');\n      selectedItems.forEach(item => item.remove());\n\n      if (searchInput) {\n        searchInput.value = '';\n      }\n    }\n\n    let span = document.createElement('span');\n    span.innerHTML = 'x';\n    span.classList.add('remove');\n    let selectedItem = li.cloneNode(true); // selectedItem.classList.add('selected');\n\n    selectedItem.setAttribute(\"selected\", \"\");\n    selectedItem.classList.remove('selectable');\n    selectedItem.appendChild(span);\n    selectContainer.insertBefore(selectedItem, searchInput ? searchInput : ul_selector);\n\n    if (type == 'single') {\n      this.__closeDropDown(selectContainer);\n    }\n  },\n  getValue: function (node) {\n    let type = node.hasAttribute('multiple') ? 'multiple' : 'single';\n    let selectedItems = node.querySelectorAll('[selected]');\n    let value = [];\n\n    if (selectedItems.length > 0) {\n      selectedItems.forEach(item => value.push(item.getAttribute('value')));\n    }\n\n    value = type === 'multiple' ? value : value[0] || '';\n    return value;\n  },\n  save: function (selectEl) {\n    if (!selectEl) {\n      return;\n    }\n\n    let event = new CustomEvent('CoCreateSelect-save', {\n      detail: {\n        element: selectEl\n      }\n    });\n    document.dispatchEvent(event);\n  },\n  __fireSelectedEvent: function (element) {\n    element.dispatchEvent(new CustomEvent('selectedValue'));\n    element.dispatchEvent(new CustomEvent('input', {\n      bubbles: true\n    }));\n    let value = this.getValue(element);\n    document.dispatchEvent(new CustomEvent('CoCreate-selected', {\n      detail: {\n        element: element,\n        value: value\n      }\n    }));\n  }\n};\nvar _default = CoCreateSelect;\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../CoCreate-select/src/select.js\n")},"../CoCreate-socket/src/index.js":(__unused_webpack_module,exports)=>{eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = void 0;\n\nclass CoCreateSocket {\n  constructor(prefix = \"crud\") {\n    this.prefix = prefix || \"crud\";\n    this.sockets = new Map();\n    this.listeners = new Map();\n    this.messageQueue = new Map();\n    this.saveFileName = '';\n    this.globalScope = \"\";\n  }\n\n  setGlobalScope(scope) {\n    this.globalScope = `${this.prefix}/${scope}`;\n  }\n\n  getGlobalScope() {\n    return this.globalScope;\n  }\n  /**\n   * config: {namespace, room, host}\n   */\n\n\n  create(config) {\n    const {\n      namespace,\n      room\n    } = config;\n    const key = this.getKey(namespace, room);\n\n    let _this = this;\n\n    let socket;\n\n    if (this.sockets.get(key)) {\n      socket = this.sockets.get(key);\n      console.log('SOcket already has been register');\n      return;\n    }\n\n    let w_protocol = window.location.protocol;\n\n    if (window.location.protocol === \"about:\") {\n      w_protocol = window.parent.location.protocol;\n    }\n\n    let protocol = w_protocol === 'http:' ? 'ws' : 'wss';\n    const port = config.port ? config.port : 8088;\n    let socket_url = `${protocol}://${window.location.host}:${port}/${key}`;\n\n    if (config.host) {\n      if (config.host.includes(\"://\")) {\n        socket_url = `${config.host}/${key}`;\n      } else {\n        socket_url = `${protocol}://${config.host}:${port}/${key}`;\n      }\n    }\n\n    socket = new WebSocket(socket_url);\n\n    socket.onopen = function (event) {\n      console.log('created socket: ' + key);\n      const messages = _this.messageQueue.get(key) || [];\n      console.log(messages);\n      messages.forEach(msg => socket.send(JSON.stringify(msg)));\n\n      _this.sockets.set(key, socket);\n\n      _this.messageQueue.set(key, []);\n    };\n\n    socket.onclose = function (event) {\n      switch (event.code) {\n        case 1000:\n          // close normal\n          console.log(\"websocket: closed\");\n          break;\n\n        default:\n          _this.destroy(socket, key);\n\n          _this.reconnect(socket, config);\n\n          break;\n      }\n    };\n\n    socket.onerror = function (err) {\n      console.log('Socket error');\n\n      _this.destroy(socket, key);\n\n      _this.reconnect(socket, config);\n    };\n\n    socket.onmessage = function (data) {\n      try {\n        if (data.data instanceof Blob) {\n          _this.saveFile(data.data);\n\n          return;\n        }\n\n        let rev_data = JSON.parse(data.data);\n\n        if (rev_data.data.event) {\n          var event = new CustomEvent(rev_data.data.event, {\n            detail: rev_data.data\n          });\n          document.dispatchEvent(event);\n          return;\n        }\n\n        let action = rev_data.action;\n\n        const listeners = _this.listeners.get(rev_data.action);\n\n        if (!listeners) {\n          return;\n        }\n\n        listeners.forEach(listener => {\n          listener(rev_data.data, key);\n        });\n      } catch (e) {\n        console.log(e);\n      }\n    };\n  }\n  /**\n   * \n   */\n\n\n  send(action, data, room) {\n    const obj = {\n      action: action,\n      data: data\n    };\n    const key = this.getKeyByRoom(room);\n    const socket = this.getByRoom(room);\n\n    if (socket) {\n      socket.send(JSON.stringify(obj));\n    } else {\n      if (this.messageQueue.get(key)) {\n        this.messageQueue.get(key).push(obj);\n      } else {\n        this.messageQueue.set(key, [obj]);\n      }\n    }\n  }\n\n  sendFile(file, room) {\n    const socket = this.getByRoom(room);\n\n    if (socket) {\n      socket.send(file);\n    }\n  }\n  /**\n   * scope: ns/room\n   */\n\n\n  listen(type, callback) {\n    if (!this.listeners.get(type)) {\n      this.listeners.set(type, [callback]);\n    } else {\n      this.listeners.get(type).push(callback);\n    }\n  }\n\n  reconnect(socket, config) {\n    let _this = this;\n\n    setTimeout(function () {\n      _this.create(config);\n    }, 1000);\n  }\n\n  destroy(socket, key) {\n    if (socket) {\n      socket.onerror = socket.onopen = socket.onclose = null;\n      socket.close();\n      socket = null;\n    }\n\n    if (this.sockets.get(key)) {\n      this.sockets.delete(key);\n    }\n  }\n\n  getKey(namespace, room) {\n    let key = `${this.prefix}`;\n\n    if (namespace && namespace != '') {\n      if (room && room != '') {\n        key += `/${namespace}/${room}`;\n      } else {\n        key += `/${namespace}`;\n      }\n    }\n\n    return key;\n  }\n\n  getByRoom(room) {\n    let key = this.getKeyByRoom(room);\n    return this.sockets.get(key);\n  }\n\n  getKeyByRoom(room) {\n    let key = this.globalScope;\n\n    if (room) {\n      key = `${this.prefix}/${room}`;\n    }\n\n    return key;\n  }\n\n  saveFile(blob) {\n    // const {filename} = window.saveFileInfo;\n    const file_name = this.saveFileName || 'downloadFile';\n    var a = document.createElement(\"a\");\n    document.body.appendChild(a);\n    a.style = \"display: none\";\n    let url = window.URL.createObjectURL(blob);\n    a.href = url;\n    a.download = file_name;\n    a.click();\n    window.URL.revokeObjectURL(url);\n    this.saveFileName = '';\n  }\n\n  listenAsync(eventname) {\n    return new Promise(resolve => {\n      document.addEventListener(eventname, function (event) {\n        resolve(event.detail);\n      }, {\n        once: true\n      });\n    });\n  }\n\n}\n\nvar _default = CoCreateSocket;\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../CoCreate-socket/src/index.js\n")},"../CoCreate-utils/src/index.js":(__unused_webpack_module,exports)=>{eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.generateUUID = generateUUID;\nexports.isRealTime = isRealTime;\nexports.getParentFromElement = getParentFromElement;\nexports.isReadValue = isReadValue;\nexports.isUpdateValue = isUpdateValue;\nexports.isJsonString = isJsonString;\nexports.getAttributes = getAttributes;\nexports.checkValue = checkValue;\nexports.allFrame = allFrame;\nexports.cssPath = cssPath;\nexports.getTopMostWindow = getTopMostWindow;\nexports.findIframeFromElement = findIframeFromElement;\nexports.getIframeFromPath = getIframeFromPath;\nexports.configMatch = configMatch;\nexports.configExecuter = configExecuter;\nexports.UUID = UUID;\nexports.parseTextToHtml = parseTextToHtml;\nexports.splitBydelimiter = splitBydelimiter;\nexports.joinBydelimiter = joinBydelimiter;\nexports.isValidSelector = isValidSelector;\nexports.getElementPath = getElementPath;\nexports.isUsageY = isUsageY;\nexports.default = void 0;\n\n/**\n * Created by jin\n * 2020-04-03\n */\nfunction generateUUID(length = 36) {\n  // if (length == 10) {\n  //   var result           = \'\';\n  //   var characters       = \'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\';\n  //   var charactersLength = characters.length;\n  //   for ( var i = 0; i < length; i++ ) {\n  //     result += characters.charAt(Math.floor(Math.random() * charactersLength));\n  //   }\n  //   var dd = new Date().toTimeString();\n  //   var random = dd.replace(/[\\W_]+/g, "").substr(0,6);\n  //   result += random;\n  //   return result;\n  // }\n  let d = new Date().getTime();\n  let d2 = window.performance && window.performance.now && window.performance.now() * 1000 || 0;\n  let pattern = "uxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx";\n\n  if (length <= pattern.length) {\n    pattern = pattern.substr(0, length);\n  } else {\n    let add_len = length - pattern.length;\n    let sub_pattern = "-xxxyyxxx";\n    let group_n = Math.floor(add_len / sub_pattern.length);\n\n    for (let i = 0; i < group_n; i++) {\n      pattern += sub_pattern;\n    }\n\n    group_n = add_len - group_n * sub_pattern.length;\n    pattern += sub_pattern.substr(0, group_n);\n  }\n\n  let uuid = pattern.replace(/[xy]/g, function (c) {\n    var r = Math.random() * 16;\n\n    if (d > 0) {\n      var r = (d + r) % 16 | 0;\n      d = Math.floor(d / 16);\n    } else {\n      var r = (d2 + r) % 16 | 0;\n      d2 = Math.floor(d2 / 16);\n    }\n\n    return (c == "x" ? r : r & 0x7 | 0x8).toString(16);\n  });\n  return uuid;\n}\n\nfunction isRealTime(element, parent_realTime) {\n  let realtime = element.getAttribute("data-realtime") || parent_realTime;\n\n  if (realtime === "false") {\n    return false;\n  }\n\n  return true;\n}\n\nfunction getParentFromElement(element, parent_class, attributes) {\n  if (parent_class) {\n    if (element.classList.contains(parent_class)) {\n      return element;\n    }\n\n    let node = element.parentNode;\n\n    while (node != null && node.classList) {\n      if (node.classList.contains(parent_class)) {\n        return node;\n      }\n\n      node = node.parentNode;\n    }\n  } else if (attributes) {\n    if (attributes.every(attr => element.attributes.hasOwnProperty(attr))) {\n      return element;\n    }\n\n    let node = element.parentNode;\n\n    while (node != null && node.attributes) {\n      if (attributes.every(attr => node.attributes.hasOwnProperty(attr))) {\n        return node;\n      }\n\n      node = node.parentNode;\n    }\n  }\n\n  return false;\n}\n\nfunction isReadValue(element) {\n  return element.getAttribute("data-read_value") != "false";\n}\n\nfunction isUpdateValue(element) {\n  return element.getAttribute("data-update_value") != "false";\n}\n\nfunction isJsonString(str_data) {\n  try {\n    let json_data = JSON.parse(str_data);\n\n    if (typeof json_data === "object" && json_data != null) {\n      return true;\n    } else {\n      return false;\n    }\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction getAttributes(element) {\n  return element.getAttributeNames().reduce((attrMap, name) => {\n    attrMap[name] = element.getAttribute(name);\n    return attrMap;\n  }, {});\n}\n\nfunction checkValue(value) {\n  if (!value) return false;\n\n  if (/{{\\s*([\\w\\W]+)\\s*}}/g.test(value)) {\n    return false;\n  }\n\n  return true;\n} // hosseins utills\n// function to go through all frames\n\n\nfunction allFrame(callback) {\n  let allFrames = [{\n    document,\n    window\n  }];\n\n  for (let frame of document.querySelectorAll("iframe")) {\n    let frameDocument = frame.contentDocument || frame.contentWindow.document;\n    let frameWindow = frame.contentWindow;\n    allFrames.push({\n      document: frameDocument,\n      window: frameWindow,\n      frameElement: frame\n    });\n  }\n\n  let result = new Set();\n\n  for (let frame of allFrames) {\n    let callbackResult = callback(frame);\n    if (callbackResult && typeof callbackResult[Symbol.iterator] === "function") callbackResult.forEach(el => result.add(el));else if (callbackResult) result.add(callbackResult);\n  }\n\n  return Array.from(result);\n}\n\nfunction cssPath(node) {\n  let pathSplits = [];\n\n  do {\n    if (!node || !node.tagName) return false;\n    let pathSplit = node.tagName.toLowerCase();\n    if (node.id && node.tagName !== "BODY") pathSplit += "#" + node.id;\n\n    if (node.classList.length && node.tagName !== "BODY") {\n      node.classList.forEach(item => {\n        if (item.indexOf(":") === -1) pathSplit += "." + item;\n      });\n    }\n\n    if (node.tagName !== "BODY" && node.parentNode) {\n      let index = Array.prototype.indexOf.call(node.parentNode.children, node);\n      pathSplit += `:nth-child(${index + 1})`;\n    }\n\n    pathSplits.unshift(pathSplit);\n    node = node.parentNode;\n  } while (node.tagName !== "HTML");\n\n  return pathSplits.join(" > ");\n}\n\nfunction getTopMostWindow() {\n  let parentWindow = window;\n\n  while (parentWindow !== window.parent) parentWindow = window.parent;\n\n  return parentWindow;\n}\n\nfunction findIframeFromElement(windowObject, element) {\n  let frameElement;\n  allFrame(frame => {\n    if (frame.document.contains(element)) frameElement = frame.frameElement; // window.cc.findIframeFromElement(frame.window, element);\n  });\n  return frameElement;\n}\n\nfunction getIframeFromPath(path) {\n  let topWindow = getTopMostWindow;\n  path.forEach(selector => {\n    if (topWindow) topWindow = topWindow.querySelector(selector);\n  });\n  return topWindow;\n} // DO NOT REMOVE\n\n\nfunction* configMatch(elementConfig, element) {\n  for (let config of elementConfig) {\n    // if (!Array.isArray(config.selector))\n    //   config.selector = [config.selector];\n    if (config.selector && element.matches(config.selector)) yield config;\n  }\n\n  return;\n} // export function configMatch2(elementConfig, element) {\n//   let result = [];\n//   for (let config of elementConfig) {\n//     if (config.selector && element.matches(config.selector)) result.push(config);\n//   }\n//   return result;\n// }\n// DO NOT REMOVE\n// an opiniated function uses configMatch2 to read configs\n// WARNING: the config iterated from top to bottom. for deseired effect elementConfig should be reveresed\n// typeof elementConfig: array of objects and every objects containing keys as false, true or a selector \n// element: the element to read attributes\n// key: the key in which is in elementConfig and on match onSuccess callback will be called\n\n\nfunction configExecuter(element, key, onSuccess, elementConfig) {\n  for (let config of configMatch(elementConfig || window.elementConfig, element)) if (config[key] === true) return onSuccess(element, config);else if (config[key] === false) return false;else if (config[key] === undefined) continue;else if (isValidSelector(config[key])) return onSuccess(element, config, true);else console.warn("builder: wrong element config ", config);\n\n  return false;\n}\n\nfunction UUID(length = 10) {\n  var result = "";\n  var characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";\n  var charactersLength = characters.length;\n\n  for (var i = 0; i < length; i++) {\n    result += characters.charAt(Math.floor(Math.random() * charactersLength));\n  }\n\n  var d = new Date().toTimeString();\n  var random = d.replace(/[\\W_]+/g, "").substr(0, 6);\n  result += random;\n  return result;\n}\n\nfunction parseTextToHtml(text) {\n  let doc = new DOMParser().parseFromString(text, "text/html");\n  if (doc.head.children[0]) return doc.head.children[0];else return doc.body.children[0];\n}\n\nfunction splitBydelimiter(str, delimiter) {\n  return str.split(delimiter).map(s => s.trim());\n}\n\nfunction joinBydelimiter(str, delimiter) {\n  return str.map(s => s.trim()).join(delimiter);\n}\n\nfunction isValidSelector(selector) {\n  try {\n    document.createDocumentFragment().querySelector(selector);\n  } catch (error) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction getElementPath(element, returnContext) {\n  let path = [];\n  let topWindow = window;\n  let iframeElement = findIframeFromElement(topWindow, element);\n  let p = cssPath(iframeElement);\n  if (p) path.unshift(p);\n  return returnContext ? {\n    path,\n    document: iframeElement || document\n  } : path; //todo: support for nested iframe\n  // while(iframeElement !== findIframeFromElement(topWindow,iframeElement))\n  // {\n  //   iframeElement = findIframeFromElement(topWindow,iframeElement);\n  //   path.unshift(cssPath(iframeElement))\n  // }\n}\n\nfunction isUsageY(input) {\n  if (this.isJsonString(input.getAttribute(\'data-collection\'))) {\n    return false;\n  }\n\n  if (this.isJsonString(input.getAttribute(\'name\'))) {\n    return false;\n  }\n\n  if (input.tagName === "INPUT" && ["text", "email", "tel", "url"].includes(input.type) || input.tagName === "TEXTAREA") {\n    if (!input.getAttribute(\'name\')) {\n      return false;\n    }\n\n    if (input.getAttribute("data-realtime") == "false") {\n      return false;\n    }\n\n    if (input.getAttribute("data-unique") === "true") {\n      return false;\n    }\n\n    if (input.type === \'password\') {\n      return false;\n    }\n\n    if (!this.isReadValue(input)) {\n      return false;\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\nvar _default = {\n  isUsageY,\n  getElementPath,\n  isValidSelector,\n  joinBydelimiter,\n  splitBydelimiter,\n  parseTextToHtml,\n  UUID,\n  configExecuter,\n  configMatch,\n  getIframeFromPath,\n  findIframeFromElement,\n  getTopMostWindow,\n  cssPath,\n  allFrame,\n  checkValue,\n  getAttributes,\n  isJsonString,\n  isUpdateValue,\n  isReadValue,\n  getParentFromElement,\n  isRealTime,\n  generateUUID\n};\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../CoCreate-utils/src/index.js\n')},"../../CoCreate-plugins/CoCreate-pickr/src/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = void 0;\n\nvar _pickr = _interopRequireDefault(__webpack_require__(/*! @simonwep/pickr */ \"../../CoCreate-plugins/CoCreate-pickr/node_modules/@simonwep/pickr/dist/pickr.min.js\"));\n\nvar _observer = _interopRequireDefault(__webpack_require__(/*! @cocreate/observer */ \"../CoCreate-observer/src/index.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// Simple example, see optional options for more configuration.\nlet config = {\n  el: null,\n  // will be replaced in observer\n  theme: 'monolith',\n  // or 'monolith', or 'nano'\n  position: 'bottom-start',\n  defaultRepresentation: 'HEX',\n  inline: false,\n  comparison: true,\n  default: '#999999',\n  swatches: ['rgba(244, 67, 54, 1)', 'rgba(233, 30, 99, 0.95)', 'rgba(156, 39, 176, 0.9)', 'rgba(103, 58, 183, 0.85)', 'rgba(63, 81, 181, 0.8)', 'rgba(33, 150, 243, 0.75)', 'rgba(3, 169, 244, 0.7)', 'rgba(0, 188, 212, 0.7)', 'rgba(0, 150, 136, 0.75)', 'rgba(76, 175, 80, 0.8)', 'rgba(139, 195, 74, 0.85)', 'rgba(205, 220, 57, 0.9)', 'rgba(255, 235, 59, 0.95)', 'rgba(255, 193, 7, 1)'],\n  components: {\n    // Main components\n    preview: true,\n    opacity: true,\n    hue: true,\n    // Input / output Options\n    interaction: {\n      hex: true,\n      rgba: true,\n      hsla: true,\n      hsva: true,\n      cmyk: true,\n      input: true,\n      clear: false,\n      save: false\n    }\n  }\n};\n\nconst eventHandler = root => (instance, e, pickr) => {\n  //todofix: what is pickr.disabledEvent??\n  if (instance && !CoCreate.pickr.disabledEvent) {\n    let event = new CustomEvent(\"input\", {\n      bubbles: true,\n      detail: {\n        color: instance.toHEXA().toString()\n      }\n    });\n    pickr.setColor(instance.toHEXA().toString());\n    root.dispatchEvent(event);\n  }\n};\n\nlet refs = new Map();\nconst CoCreatePickr = {\n  refs\n};\n\n_observer.default.init({\n  name: \"pickr\",\n  observe: [\"childList\"],\n  include: \".color-picker\",\n  callback: mutation => {\n    // let colorPickers = mutation.target.querySelectorAll('.color-picker');\n    // if (colorPickers.length)\n    //     colorPickers.forEach(p => createPickr(p))\n    createPickr(mutation.target);\n  }\n});\n\nwindow.addEventListener('load', () => {\n  let colorPickers = document.querySelectorAll('.color-picker');\n  if (colorPickers.length) colorPickers.forEach(p => createPickr(p));\n});\n\nfunction createPickr(p) {\n  // pick attributes\n  let ccAttributes = Array.from(p.attributes).filter(att => att.name.startsWith('data-style')); // if not for cocreate\n\n  if (!ccAttributes.length) return; // set element\n\n  config.el = p; // init and get root\n\n  let pickr = _pickr.default.create(config);\n\n  let root = pickr.getRoot().root; // write attributes\n\n  ccAttributes.forEach(att => {\n    root.setAttribute(att.name, att.value);\n  }); //set ref\n\n  refs.set(root, pickr); //set events\n  // pickr.on('save', eventHandler(root))\n\n  pickr.on('change', eventHandler(root));\n}\n\nvar _default = CoCreatePickr;\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../CoCreate-plugins/CoCreate-pickr/src/index.js\n")},"../../CoCreateJS/src/core.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = void 0;\n\nvar _socket = _interopRequireDefault(__webpack_require__(/*! @cocreate/socket */ \"../../CoCreateJS/node_modules/@cocreate/socket/src/index.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// ***********   define variables end ***************** /// \nlet socket = new _socket.default('ws');\nconst CoCreateCore = {\n  socketInitFuncs: [],\n  moduleSelectors: [],\n  socket: null,\n  host: 'server.cocreate.app',\n  setSocket: function (socket) {\n    this.socket = socket;\n  },\n  init: function (host, namespace) {\n    if (host) {\n      this.host = host;\n    }\n\n    this.__setConfig();\n\n    this.createGeneralSocket(host, namespace || config.organization_Id);\n    this.initSocketListener();\n    this.createUserSocket(host);\n  },\n  __setConfig: function () {\n    let orgId = window.localStorage.getItem('organization_id');\n    let securityKey = window.localStorage.getItem('securityKey');\n    let apiKey = window.localStorage.getItem('apiKey');\n    if (orgId) config['organization_Id'] = orgId;\n    if (apiKey) config['apiKey'] = apiKey;\n    if (securityKey) config['securityKey'] = securityKey;\n  },\n  initSocketListener: function () {\n    const self = this;\n    this.socket.listen('connect', function (data, room) {\n      if (room == self.socket.getGlobalScope()) {\n        self.socketInitFuncs.forEach(func => {\n          func.initFunc.call(func.instance);\n        });\n      }\n    });\n    this.socket.listen('downloadFileInfo', function (data) {\n      self.socket.saveFileName = data.file_name;\n    });\n  },\n  createUserSocket: function (host) {\n    var user_id = window.localStorage.getItem('user_id');\n\n    if (user_id) {\n      this.socket.create({\n        namespace: 'users',\n        room: user_id,\n        host: host\n      });\n    }\n  },\n  createGeneralSocket: function (host, namespace) {\n    if (namespace) {\n      this.socket.create({\n        namespace: namespace,\n        room: null,\n        host: host\n      });\n      this.socket.setGlobalScope(namespace);\n    } else {\n      this.socket.create({\n        namespace: null,\n        room: null,\n        host: host\n      });\n    }\n  },\n  registerInit: function (initFunc, instance) {\n    this.socketInitFuncs.push({\n      initFunc,\n      instance: instance || window\n    });\n  },\n  // registerSelector: function(selector) {\n  //   if (this.moduleSelectors.indexOf(selector) === -1) {\n  //     this.moduleSelectors.push(selector);\n  //   }\n  // },\n  // getSelectors: function(selector) {\n  //   return this.moduleSelectors.join(\",\");\n  // },\n  // listenMessage: function(message, fun) {\n  //   this.socket.listen(message, fun);\n  // },\n  createSocket: function (config) {\n    this.socket.create(config);\n  },\n  destroySocket: function (config) {\n    const {\n      namespace,\n      room\n    } = config;\n    const key = this.socket.getKey(namespace, room);\n    let socket = this.socket.sockets.get(key);\n\n    if (!socket) {\n      return;\n    }\n\n    this.socket.destroy(socket, key);\n  }\n};\nCoCreateCore.setSocket(socket);\nCoCreateCore.init(window.config.host ? window.config.host : 'server.cocreate.app');\nvar _default = CoCreateCore;\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../CoCreateJS/src/core.js\n")},"../../CoCreateJS/src/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.default = void 0;\n\nvar _core = _interopRequireDefault(__webpack_require__(/*! ./core.js */ "../../CoCreateJS/src/core.js"));\n\nvar _cocreatecss = _interopRequireDefault(__webpack_require__(/*! @cocreate/cocreatecss */ "../../CoCreateJS/node_modules/@cocreate/cocreatecss/src/index.js"));\n\nvar _observer = _interopRequireDefault(__webpack_require__(/*! @cocreate/observer */ "../../CoCreateJS/node_modules/@cocreate/observer/src/index.js"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// core components\n(async function () {\n  // preload - downloads with main chunk but does not execute until main chunk complete. Priority using 1, -1 true=0\n  let importObj = await __webpack_require__.e(/*! import() | components-chunk */ "components-chunk").then(__webpack_require__.t.bind(__webpack_require__, /*! ./components.js */ "../../CoCreateJS/src/components.js", 23));\n  Object.assign(window.CoCreate, {\n    components: importObj.default\n  }); // // prefetched - downloads after main chunk has complete and in idle mode. If no longer idle will pause then resume when not idle. Priority using 1, -1 true=0\n  // importObj = await\n  // import ( /* webpackChunkName: "htmltags-chunk", webpackPrefetch: true */\n  //     "../CoCreate-components/CoCreate-htmltags/src/index.js");\n  // Object.assign(window.CoCreate, {htmltags: importObj.default})\n})();\n/*global window*/\n\n\nfunction addComponent(key, component) {\n  this[key] = component;\n}\n\nfunction removeComponent(key) {\n  if (this[key]) {}\n}\n\nvar _default = {\n  css: _cocreatecss.default,\n  observer: _observer.default,\n  core: _core.default,\n  addComponent,\n  removeComponent\n};\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS5hdHRyaWJ1dGVzLy4uL0NvQ3JlYXRlSlMvc3JjL2luZGV4LmpzPzI4OWEiXSwibmFtZXMiOlsiaW1wb3J0T2JqIiwiT2JqZWN0IiwiYXNzaWduIiwid2luZG93IiwiQ29DcmVhdGUiLCJjb21wb25lbnRzIiwiZGVmYXVsdCIsImFkZENvbXBvbmVudCIsImtleSIsImNvbXBvbmVudCIsInJlbW92ZUNvbXBvbmVudCIsImNzcyIsIm9ic2VydmVyIiwiY29yZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUNBOztBQUNBOztBQUNBOzs7O0FBSEE7QUFLQSxDQUFDLGtCQUFpQjtBQUVkO0FBQ0EsTUFBSUEsU0FBUyxHQUFHLE1BQ2hCLG1NQURBO0FBSUFDLFFBQU0sQ0FBQ0MsTUFBUCxDQUFjQyxNQUFNLENBQUNDLFFBQXJCLEVBQStCO0FBQUNDLGNBQVUsRUFBRUwsU0FBUyxDQUFDTTtBQUF2QixHQUEvQixFQVBjLENBVWQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVILENBaEJEO0FBa0JBOzs7QUFDQSxTQUFTQyxZQUFULENBQXNCQyxHQUF0QixFQUEyQkMsU0FBM0IsRUFBc0M7QUFDbEMsT0FBS0QsR0FBTCxJQUFZQyxTQUFaO0FBQ0g7O0FBRUQsU0FBU0MsZUFBVCxDQUF5QkYsR0FBekIsRUFBOEI7QUFDMUIsTUFBSSxLQUFLQSxHQUFMLENBQUosRUFBZSxDQUVkO0FBQ0o7O2VBRWM7QUFBRUcsS0FBRyxFQUFIQSxvQkFBRjtBQUFPQyxVQUFRLEVBQVJBLGlCQUFQO0FBQWlCQyxNQUFJLEVBQUpBLGFBQWpCO0FBQXVCTixjQUF2QjtBQUFxQ0c7QUFBckMsQyIsImZpbGUiOiIuLi8uLi9Db0NyZWF0ZUpTL3NyYy9pbmRleC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNvcmUgY29tcG9uZW50c1xuaW1wb3J0IGNvcmUgZnJvbSBcIi4vY29yZS5qc1wiXG5pbXBvcnQgY3NzIGZyb20gJ0Bjb2NyZWF0ZS9jb2NyZWF0ZWNzcyc7XG5pbXBvcnQgb2JzZXJ2ZXIgZnJvbSAnQGNvY3JlYXRlL29ic2VydmVyJztcblxuKGFzeW5jIGZ1bmN0aW9uKCkge1xuXG4gICAgLy8gcHJlbG9hZCAtIGRvd25sb2FkcyB3aXRoIG1haW4gY2h1bmsgYnV0IGRvZXMgbm90IGV4ZWN1dGUgdW50aWwgbWFpbiBjaHVuayBjb21wbGV0ZS4gUHJpb3JpdHkgdXNpbmcgMSwgLTEgdHJ1ZT0wXG4gICAgbGV0IGltcG9ydE9iaiA9IGF3YWl0XG4gICAgaW1wb3J0IChcbiAgICAgICAgLyogd2VicGFja0NodW5rTmFtZTogXCJjb21wb25lbnRzLWNodW5rXCIsIHdlYnBhY2tQcmVsb2FkOiB0cnVlICovXG4gICAgICAgIFwiLi9jb21wb25lbnRzLmpzXCIpO1xuICAgIE9iamVjdC5hc3NpZ24od2luZG93LkNvQ3JlYXRlLCB7Y29tcG9uZW50czogaW1wb3J0T2JqLmRlZmF1bHR9KVxuXG5cbiAgICAvLyAvLyBwcmVmZXRjaGVkIC0gZG93bmxvYWRzIGFmdGVyIG1haW4gY2h1bmsgaGFzIGNvbXBsZXRlIGFuZCBpbiBpZGxlIG1vZGUuIElmIG5vIGxvbmdlciBpZGxlIHdpbGwgcGF1c2UgdGhlbiByZXN1bWUgd2hlbiBub3QgaWRsZS4gUHJpb3JpdHkgdXNpbmcgMSwgLTEgdHJ1ZT0wXG4gICAgLy8gaW1wb3J0T2JqID0gYXdhaXRcbiAgICAvLyBpbXBvcnQgKCAvKiB3ZWJwYWNrQ2h1bmtOYW1lOiBcImh0bWx0YWdzLWNodW5rXCIsIHdlYnBhY2tQcmVmZXRjaDogdHJ1ZSAqL1xuICAgIC8vICAgICBcIi4uL0NvQ3JlYXRlLWNvbXBvbmVudHMvQ29DcmVhdGUtaHRtbHRhZ3Mvc3JjL2luZGV4LmpzXCIpO1xuICAgIC8vIE9iamVjdC5hc3NpZ24od2luZG93LkNvQ3JlYXRlLCB7aHRtbHRhZ3M6IGltcG9ydE9iai5kZWZhdWx0fSlcblxufSkoKVxuXG4vKmdsb2JhbCB3aW5kb3cqL1xuZnVuY3Rpb24gYWRkQ29tcG9uZW50KGtleSwgY29tcG9uZW50KSB7XG4gICAgdGhpc1trZXldID0gY29tcG9uZW50O1xufVxuXG5mdW5jdGlvbiByZW1vdmVDb21wb25lbnQoa2V5KSB7XG4gICAgaWYgKHRoaXNba2V5XSkge1xuXG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCB7IGNzcywgb2JzZXJ2ZXIsIGNvcmUsIGFkZENvbXBvbmVudCwgcmVtb3ZlQ29tcG9uZW50fVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../CoCreateJS/src/index.js\n')},"./node_modules/file-loader/dist/cjs.js!../CoCreate-select/src/CoCreate-select.css":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (__webpack_require__.p + "eaddb3aea56752094a14d18001b9856d.css");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS5hdHRyaWJ1dGVzLy4uL0NvQ3JlYXRlLXNlbGVjdC9zcmMvQ29DcmVhdGUtc2VsZWN0LmNzcz8zMDYwIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxpRUFBZSxxQkFBdUIseUNBQXlDIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2ZpbGUtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uL0NvQ3JlYXRlLXNlbGVjdC9zcmMvQ29DcmVhdGUtc2VsZWN0LmNzcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJlYWRkYjNhZWE1Njc1MjA5NGExNGQxODAwMWI5ODU2ZC5jc3NcIjsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/file-loader/dist/cjs.js!../CoCreate-select/src/CoCreate-select.css\n')},"../CoCreate-select/src/CoCreate-select.css":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _CoCreate_attributes_node_modules_style_loader_dist_runtime_injectStylesIntoLinkTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../CoCreate-attributes/node_modules/style-loader/dist/runtime/injectStylesIntoLinkTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoLinkTag.js");\n/* harmony import */ var _CoCreate_attributes_node_modules_style_loader_dist_runtime_injectStylesIntoLinkTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_CoCreate_attributes_node_modules_style_loader_dist_runtime_injectStylesIntoLinkTag_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _CoCreate_attributes_node_modules_file_loader_dist_cjs_js_CoCreate_select_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !!../../CoCreate-attributes/node_modules/file-loader/dist/cjs.js!./CoCreate-select.css */ "./node_modules/file-loader/dist/cjs.js!../CoCreate-select/src/CoCreate-select.css");\n\n            \n\nvar options = {"injectType":"linkTag"};\n\noptions.insert = "head";\n\nvar update = _CoCreate_attributes_node_modules_style_loader_dist_runtime_injectStylesIntoLinkTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_CoCreate_attributes_node_modules_file_loader_dist_cjs_js_CoCreate_select_css__WEBPACK_IMPORTED_MODULE_1__.default, options);\n\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS5hdHRyaWJ1dGVzLy4uL0NvQ3JlYXRlLXNlbGVjdC9zcmMvQ29DcmVhdGUtc2VsZWN0LmNzcz8zNzY0Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBK0c7QUFDL0csWUFBeUg7O0FBRXpILGVBQWU7O0FBRWY7O0FBRUEsYUFBYSw2SEFBRyxDQUFDLGtIQUFPOzs7O0FBSXhCLGlFQUFlLEUiLCJmaWxlIjoiLi4vQ29DcmVhdGUtc2VsZWN0L3NyYy9Db0NyZWF0ZS1zZWxlY3QuY3NzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGFwaSBmcm9tIFwiIS4uLy4uL0NvQ3JlYXRlLWF0dHJpYnV0ZXMvbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b0xpbmtUYWcuanNcIjtcbiAgICAgICAgICAgIGltcG9ydCBjb250ZW50IGZyb20gXCIhIS4uLy4uL0NvQ3JlYXRlLWF0dHJpYnV0ZXMvbm9kZV9tb2R1bGVzL2ZpbGUtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vQ29DcmVhdGUtc2VsZWN0LmNzc1wiO1xuXG52YXIgb3B0aW9ucyA9IHtcImluamVjdFR5cGVcIjpcImxpbmtUYWdcIn07XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgZGVmYXVsdCB7fSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../CoCreate-select/src/CoCreate-select.css\n')}},__webpack_module_cache__={},deferred,leafPrototypes,getProto,inProgress,dataWebpackPrefix;function __webpack_require__(Q){var F=__webpack_module_cache__[Q];if(void 0!==F)return F.exports;var B=__webpack_module_cache__[Q]={exports:{}};return __webpack_modules__[Q](B,B.exports,__webpack_require__),B.exports}__webpack_require__.m=__webpack_modules__,deferred=[],__webpack_require__.O=(Q,F,B,U)=>{if(!F){var t=1/0;for(l=0;l<deferred.length;l++){for(var[F,B,U]=deferred[l],n=!0,e=0;e<F.length;e++)(!1&U||t>=U)&&Object.keys(__webpack_require__.O).every((Q=>__webpack_require__.O[Q](F[e])))?F.splice(e--,1):(n=!1,U<t&&(t=U));n&&(deferred.splice(l--,1),Q=B())}return Q}U=U||0;for(var l=deferred.length;l>0&&deferred[l-1][2]>U;l--)deferred[l]=deferred[l-1];deferred[l]=[F,B,U]},__webpack_require__.n=Q=>{var F=Q&&Q.__esModule?()=>Q.default:()=>Q;return __webpack_require__.d(F,{a:F}),F},getProto=Object.getPrototypeOf?Q=>Object.getPrototypeOf(Q):Q=>Q.__proto__,__webpack_require__.t=function(Q,F){if(1&F&&(Q=this(Q)),8&F)return Q;if("object"==typeof Q&&Q){if(4&F&&Q.__esModule)return Q;if(16&F&&"function"==typeof Q.then)return Q}var B=Object.create(null);__webpack_require__.r(B);var U={};leafPrototypes=leafPrototypes||[null,getProto({}),getProto([]),getProto(getProto)];for(var t=2&F&&Q;"object"==typeof t&&!~leafPrototypes.indexOf(t);t=getProto(t))Object.getOwnPropertyNames(t).forEach((F=>U[F]=()=>Q[F]));return U.default=()=>Q,__webpack_require__.d(B,U),B},__webpack_require__.d=(Q,F)=>{for(var B in F)__webpack_require__.o(F,B)&&!__webpack_require__.o(Q,B)&&Object.defineProperty(Q,B,{enumerable:!0,get:F[B]})},__webpack_require__.f={},__webpack_require__.e=Q=>Promise.all(Object.keys(__webpack_require__.f).reduce(((F,B)=>(__webpack_require__.f[B](Q,F),F)),[])),__webpack_require__.u=Q=>""+Q+__webpack_require__.h()+".js",__webpack_require__.miniCssF=Q=>{},__webpack_require__.h=()=>"0ffc363a7380d6b0b270",__webpack_require__.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(Q){if("object"==typeof window)return window}}(),__webpack_require__.o=(Q,F)=>Object.prototype.hasOwnProperty.call(Q,F),inProgress={},dataWebpackPrefix="CoCreate.attributes:",__webpack_require__.l=(Q,F,B,U)=>{if(inProgress[Q])inProgress[Q].push(F);else{var t,n;if(void 0!==B)for(var e=document.getElementsByTagName("script"),l=0;l<e.length;l++){var s=e[l];if(s.getAttribute("src")==Q||s.getAttribute("data-webpack")==dataWebpackPrefix+B){t=s;break}}t||(n=!0,(t=document.createElement("script")).charset="utf-8",t.timeout=120,__webpack_require__.nc&&t.setAttribute("nonce",__webpack_require__.nc),t.setAttribute("data-webpack",dataWebpackPrefix+B),t.src=Q),inProgress[Q]=[F];var c=(F,B)=>{t.onerror=t.onload=null,clearTimeout(I);var U=inProgress[Q];if(delete inProgress[Q],t.parentNode&&t.parentNode.removeChild(t),U&&U.forEach((Q=>Q(B))),F)return F(B)},I=setTimeout(c.bind(null,void 0,{type:"timeout",target:t}),12e4);t.onerror=c.bind(null,t.onerror),t.onload=c.bind(null,t.onload),n&&document.head.appendChild(t)}},__webpack_require__.r=Q=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})},(()=>{var Q;__webpack_require__.g.importScripts&&(Q=__webpack_require__.g.location+"");var F=__webpack_require__.g.document;if(!Q&&F&&(F.currentScript&&(Q=F.currentScript.src),!Q)){var B=F.getElementsByTagName("script");B.length&&(Q=B[B.length-1].src)}if(!Q)throw new Error("Automatic publicPath is not supported in this browser");Q=Q.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),__webpack_require__.p=Q})(),(()=>{var Q={"CoCreate-attributes":0};__webpack_require__.f.j=(F,B)=>{var U=__webpack_require__.o(Q,F)?Q[F]:void 0;if(0!==U)if(U)B.push(U[2]);else{var t=new Promise(((B,t)=>U=Q[F]=[B,t]));B.push(U[2]=t);var n=__webpack_require__.p+__webpack_require__.u(F),e=new Error;__webpack_require__.l(n,(B=>{if(__webpack_require__.o(Q,F)&&(0!==(U=Q[F])&&(Q[F]=void 0),U)){var t=B&&("load"===B.type?"missing":B.type),n=B&&B.target&&B.target.src;e.message="Loading chunk "+F+" failed.\n("+t+": "+n+")",e.name="ChunkLoadError",e.type=t,e.request=n,U[1](e)}}),"chunk-"+F,F)}},__webpack_require__.O.j=F=>0===Q[F];var F=(F,B)=>{var U,t,[n,e,l]=B,s=0;for(U in e)__webpack_require__.o(e,U)&&(__webpack_require__.m[U]=e[U]);for(l&&l(__webpack_require__),F&&F(B);s<n.length;s++)t=n[s],__webpack_require__.o(Q,t)&&Q[t]&&Q[t][0](),Q[n[s]]=0;__webpack_require__.O()},B=this.webpackChunkCoCreate_attributes=this.webpackChunkCoCreate_attributes||[];B.forEach(F.bind(null,0)),B.push=F.bind(null,B.push.bind(B))})();var __webpack_exports__=__webpack_require__.O(void 0,["vendors-node_modules_style-loader_dist_runtime_injectStylesIntoLinkTag_js-CoCreate-crdt_node_-f0c094"],(()=>__webpack_require__("./src/index.js")));return __webpack_exports__=__webpack_require__.O(__webpack_exports__),__webpack_exports__=__webpack_exports__.default,__webpack_exports__})()}));
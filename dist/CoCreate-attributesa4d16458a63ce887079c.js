/*! For license information please see CoCreate-attributesa4d16458a63ce887079c.js.LICENSE.txt */
!function(Q,F){"object"==typeof exports&&"object"==typeof module?module.exports=F():"function"==typeof define&&define.amd?define([],F):"object"==typeof exports?exports.CoCreate=F():(Q.CoCreate=Q.CoCreate||{},Q.CoCreate.attributes=F())}(this,(function(){return(()=>{"use strict";var __webpack_modules__={"../CoCreate-action/src/index.js":(__unused_webpack_module,exports)=>{eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = void 0;\n// -testing1\nconst CoCreateAction = {\n  attribute: 'data-actions',\n  actions: {},\n  selectedStage: [],\n  stageIndex: 0,\n  selectedElement: null,\n  completedEventName: 'completedEvent',\n  __init: function () {\n    this.actionButtonEvent();\n  },\n  // init: function(container) {\n  //   const __container = container || document\n  //   if (!__container.querySelectorAll) {\n  // \treturn;\n  // }\n  // let buttons = __container.querySelectorAll(\"[data-actions]\");\n  // for (let i = 0; i < buttons.length; i++) {\n  //   this.actionButtonEvent(buttons[i]);\n  // }\n  // },\n  // actionButtonEvent: function(btn) {\n  //   const _this = this;    \n  // let checkActions = btn.getAttribute('data-actions') || \"\";\n  // checkActions = checkActions.replace(/\\s/g, '').split(',');\n  // if (checkActions.length == 0) {\n  //   return;\n  // }\n  //   btn.addEventListener('click', function(event) {\n  //     event.preventDefault();\n  //     let actions = this.getAttribute(_this.attribute) || \"\";\n  //     actions = actions.replace(/\\s/g, '').split(',');\n  //     _this.stageIndex = 0;\n  //     _this.selectedStage = actions;\n  //     //. run function\n  //     _this.selectedElement = btn;\n  //     _this.__runActionFunc();\n  //   })\n  // },\n  actionButtonEvent: function () {\n    const self = this;\n    document.addEventListener('click', function (event) {\n      let btn = event.target;\n\n      if (!btn.getAttribute('data-actions')) {\n        btn = event.target.closest('[data-actions]');\n      }\n\n      if (!btn) return;\n      event.preventDefault();\n      let actions = (btn.getAttribute(self.attribute) || \"\").replace(/\\s/g, '').split(',');\n      if (actions.length == 0) return;\n      self.stageIndex = 0;\n      self.selectedStage = actions; //. run function\n\n      self.selectedElement = btn;\n\n      self.__runActionFunc();\n    });\n  },\n  init: function ({\n    action,\n    callback,\n    endEvent\n  }) {\n    this.registerEvent(action, callback, null, endEvent);\n  },\n\n  /**\n   * key: string\n   * runFunc: function\n   * instance: object\n   * endEvent: string\n   **/\n  registerEvent: function (key, runFunc, instance, endEvent) {\n    if (this.actions[key]) {\n      return;\n    }\n\n    this.actions[key] = {\n      key: key,\n      runFunc: runFunc,\n      instance: instance || window,\n      endEvent: endEvent\n    }; //. register events\n\n    for (let __key in this.actions) {\n      if (__key != key && this.actions[__key]['endEvent'] === endEvent) {\n        return;\n      }\n    } //. register events\n\n\n    const _this = this;\n\n    document.addEventListener(endEvent, function (e) {\n      _this.__nextAction(endEvent, e.detail);\n    });\n  },\n  __runActionFunc: function (data) {\n    if (this.stageIndex >= this.selectedStage.length) {\n      //. if latest case, it will be run aTag\n      if (this.stageIndex == this.selectedStage.length) {\n        this.__runAtag(this.selectedElement);\n      }\n\n      return;\n    }\n\n    const key = this.selectedStage[this.stageIndex]; //. run function\n\n    const action = this.actions[key];\n\n    if (action) {\n      if (action.runFunc) {\n        action.runFunc.call(null, this.selectedElement, data);\n      } else {\n        this.__nextAction(action.endEvent, {});\n      }\n    }\n  },\n  __nextAction: function (eventName, data) {\n    const key = this.selectedStage[this.stageIndex];\n\n    if (!key) {\n      return;\n    }\n\n    if (eventName !== this.actions[key].endEvent) {\n      return;\n    }\n\n    this.stageIndex++;\n\n    this.__runActionFunc(data);\n  },\n  __runAtag: function (button) {\n    var aTag = button.querySelector('a');\n\n    if (aTag) {\n      CoCreate.logic.setLinkProcess(aTag);\n    }\n  }\n};\n\nCoCreateAction.__init();\n\nvar _default = CoCreateAction;\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../CoCreate-action/src/index.js\n")},"./src/common.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.parseClassRules = parseClassRules;\nexports.getCoCreateStyle = getCoCreateStyle;\nexports.setStyleClassIfDif = setStyleClassIfDif;\nexports.setAttributeIfDif = setAttributeIfDif;\nexports.setStyleIfDif = setStyleIfDif;\nexports.removeAllSelectedOptions = removeAllSelectedOptions;\nexports.renderOptions = renderOptions;\nexports.parseCssRules = parseCssRules;\nexports.rgba2hex = rgba2hex;\nexports.parseUnit = parseUnit;\nexports.toCamelCase = toCamelCase;\nexports.elStore = elStore;\n\nvar _CoCreateSelect = _interopRequireDefault(__webpack_require__(/*! ../../CoCreate-select */ "../CoCreate-select/src/index.js"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*global CoCreate*/\nfunction parseClassRules(str) {\n  return str.split(\' \').filter(cln => cln);\n}\n\nfunction getCoCreateStyle(classList) {\n  let styles = {};\n  classList.forEach(classname => {\n    let [name, value] = classname.split(":");\n    styles[toCamelCase(name)] = value;\n  });\n  return styles;\n}\n\nfunction setStyleClassIfDif(element, {\n  property,\n  camelProperty,\n  value,\n  computedStyles\n}) {\n  let classList = element.classList;\n  let styleList = new Map();\n  classList.forEach(classname => {\n    let [name, value] = classname.split(":");\n    value && styleList.set(name, value);\n  });\n  let elValue = styleList.get(property);\n\n  if (value) {\n    if (elValue) {\n      if (elValue != value) return classList.replace(`${property}:${elValue}`, `${property}:${value}`);\n    } else if (computedStyles[camelProperty] != value && !classList.contains(`${property}:${value}`)) {\n      classList.add(`${property}:${value}`);\n      return true;\n    }\n  } else {\n    if (classList.contains(`${property}:${elValue}`)) {\n      classList.remove(`${property}:${elValue}`);\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction setAttributeIfDif(property, value) {\n  if (this.getAttribute(property) !== value) {\n    if (value) this.setAttribute(property, value);else this.removeAttribute(property);\n    return true;\n  }\n\n  return false;\n}\n\nfunction setStyleIfDif({\n  property,\n  camelProperty,\n  value,\n  computedStyles\n}) {\n  if (computedStyles[camelProperty] && computedStyles[camelProperty] !== value) {\n    this.style[property] = value;\n    return true;\n  } else return false;\n} // CoCreate Select helper\n// export function getAllSelectedOptions() {\n//     let options = this.querySelectorAll(":scope > [selected]");\n//     return Array.from(options).map((o) => o.getAttribute("value"));\n// };\n\n\nfunction removeAllSelectedOptions() {\n  let options = this.querySelectorAll(":scope > [selected]");\n  return Array.from(options).forEach(o => o.remove());\n}\n\n; // export function getAllOptions() {\n//     let options = this.querySelectorAll(":scope > ul > [value]");\n//     return Array.from(options).map((o) => o.getAttribute("value"));\n// };\n\nfunction renderOptions(input, arrValue) {\n  if (arrValue && arrValue.length) _CoCreateSelect.default.renderValue(input, arrValue);else removeAllSelectedOptions.call(input);\n} // CoCreate Select helper end  \n\n\nfunction parseCssRules(str) {\n  let styleObject = {};\n  if (str.split) str.split(";").forEach(rule => {\n    let ruleSplit = rule.split(":");\n    let key = ruleSplit.shift().trim();\n    let value = ruleSplit.join().trim();\n    if (key) styleObject[key] = value;\n  });\n  return styleObject;\n}\n\nfunction rgba2hex(orig) {\n  let a,\n      isPercent,\n      rgb = orig.replace(/\\s/g, \'\').match(/^rgba?\\((\\d+),(\\d+),(\\d+),?([^,\\s)]+)?/i),\n      alpha = (rgb && rgb[4] || "").trim(),\n      hex = rgb ? (rgb[1] | 1 << 8).toString(16).slice(1) + (rgb[2] | 1 << 8).toString(16).slice(1) + (rgb[3] | 1 << 8).toString(16).slice(1) : orig;\n\n  if (alpha !== "") {\n    a = alpha;\n  } else {\n    a = 1;\n  } // multiply before convert to HEX\n\n\n  a = (a * 255 | 1 << 8).toString(16).slice(1);\n  hex = hex + a;\n  return hex;\n}\n\nfunction parseUnit(style) {\n  let value = parseFloat(style);\n  if (isNaN(value)) return [style, \'\'];else {\n    let valueLength = (value + "").length;\n    return [value, style.substr(valueLength)];\n  }\n}\n\nfunction toCamelCase(str) {\n  let index = 0;\n\n  do {\n    index = str.indexOf("-", index);\n\n    if (index !== -1) {\n      let t = str.substring(0, index);\n      t += String.fromCharCode(str.charCodeAt(index + 1) - 32);\n      t += str.substr(index + 2);\n      str = t;\n    } else break;\n  } while (true);\n\n  return str;\n} // export function setCCStyle({ property, camelProperty, value, computedStyles }) {\n//     let hasChanged = false;\n//     if (computedStyles[camelProperty]  && computedStyles[camelProperty] !== value) {\n//         for (let classname of this.classList) {\n//             let [name, styleValue] = classname.split(":");\n//             if (name === property && styleValue) {\n//                 if (value)\n//                     this.classList.replace(classname, property + ":" + value);\n//                 else\n//                     this.classList.remove(classname)\n//                 hasChanged = true;\n//                 break;\n//             }\n//         }\n//         if (!hasChanged)\n//             this.classList.add(property + ":" + value);\n//         return true;\n//     } else\n//         return false;\n// }\n\n\nfunction elStore() {\n  this.cache = new Map();\n\n  this.spread = function set(key, object) {\n    this.cache.set(key, { ...this.cache.get(key),\n      ...object\n    });\n  };\n\n  this.set = function set(key, property, value) {\n    this.cache.set(key, { ...this.cache.get(key),\n      [property]: value\n    });\n  };\n\n  this.get = function get(key, property) {\n    let value = this.cache.get(key);\n    return value ? value[property] : undefined;\n  };\n\n  this.reset = function reset(key) {\n    this.cache.delete(key);\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/common.js\n')},"./src/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = void 0;\n\nvar _common = __webpack_require__(/*! ./common.js */ \"./src/common.js\");\n\nvar _src = _interopRequireDefault(__webpack_require__(/*! ../../CoCreate-observer/src */ \"../CoCreate-observer/src/index.js\"));\n\nvar _src2 = _interopRequireDefault(__webpack_require__(/*! ../../../CoCreate-plugins/CoCreate-pickr/src */ \"../../CoCreate-plugins/CoCreate-pickr/src/index.js\"));\n\nvar _src3 = __webpack_require__(/*! ../../../CoCreateJS/src */ \"../../CoCreateJS/src/index.js\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*global CoCreate*/\n// dev start\n// import '../../CoCreate-select'\n// import selected from '../../CoCreate-selected'\n// selected.config({\n//     srcDocument: document,\n//     destDocument: document,\n//     selector: \"#container *\",\n//     target: \"[data-attributes]:not(.styleunit)\",\n//     callback: (element, target) => {\n//         target.setAttribute('data-attributes_target', `[data-element_id=${element.getAttribute('data-element_id')}]`);\n//         target.setAttribute('name', target.id + '-' + element.getAttribute('data-element_id'))\n//     }\n// });\n// //profile observer\n// let profile = []\n// function profileObserver(mutation, extra = {}) {\n//     // get time\n//     let date = new Date();\n//     let time = date.getSeconds() + '.' + date.getMilliseconds()\n//     profile.push({ time, ...extra, ...mutation })\n// }\n// dev end\nlet cache = new _common.elStore();\n\nfunction attributes({\n  document: initDocument,\n  exclude = \"\",\n  callback = () => {}\n}) {\n  this.exclude = exclude;\n  this.callback = callback;\n  this.initDocument = initDocument;\n}\n\nattributes.prototype.init = function init() {\n  this.scanNewElement(); // this.initDocument.defaultView.CoCreate.observer.init({\n\n  _src.default.init({\n    name: \"ccStyle\",\n    observe: [\"attributes\"],\n    attributes: [\"data-attributes_target\", \"value\", \"data-attributes_unit\"],\n    include: \"INPUT, .pickr, cocreate-select\",\n    callback: async m => await this.watchInputChange(m)\n  });\n\n  this.initDocument.addEventListener(\"input\", async e => {\n    let input = e.target; // input.tagName == \"COCREATE-SELECT\" && \n\n    this.perInput(input, (inputMeta, element) => this.updateElement({ ...inputMeta,\n      input,\n      element,\n      isColl: true\n    }));\n  });\n  this.observerElements(this.initDocument.defaultView);\n\n  _src3.socket.listen(\"ccStyle\", args => this.listen(args));\n};\n\nattributes.prototype.listen = async function listen({\n  value,\n  unit,\n  type,\n  property,\n  camelProperty,\n  elementId,\n  elementSelector\n}) {\n  let selector = property ? `[data-attributes=${type}][data-attributes_property=${property}]:not(${this.exclude})` : `[data-attributes=${type}]:not(${this.exclude})`;\n  let input = this.initDocument.querySelector(selector);\n  let element;\n  if (selector.indexOf(';') !== -1) element = await this.complexSelector(elementSelector, (canvasDoc, selector) => canvasDoc.querySelector(selector));else element = this.initDocument.querySelector(elementSelector);\n  this.updateElement({\n    type,\n    property,\n    camelProperty,\n    input,\n    element,\n    collValue: value,\n    unit,\n    isColl: false\n  });\n};\n\nattributes.prototype.collaborate = function collaborate({\n  element,\n  ...rest\n}) {\n  // if (value != input.value) return;\n  let elementId = element.getAttribute('data-element_id');\n  if (!elementId) return console.warn('no element id, collaboration skiped');\n  let elementSelector = rest.input.getAttribute('data-attributes_target');\n\n  _src3.message.send({\n    broadcast_sender: false,\n    rooms: \"\",\n    emit: {\n      message: \"ccStyle\",\n      data: { ...rest,\n        elementId,\n        elementSelector\n      }\n    }\n  });\n};\n\nattributes.prototype.scanNewElement = function scanNewElement() {\n  this.initDocument.querySelectorAll(`[data-attributes]:not(${this.exclude})`).forEach(async input => {\n    this.perInput(input, (inputMeta, element) => this.updateInput({ ...inputMeta,\n      input,\n      element,\n      isColl: true\n    }));\n  });\n};\n\nattributes.prototype.observerElements = function observerElements(initWindow) {\n  // initWindow.CoCreate.observer.init({\n  _src.default.init({\n    observe: [\"attributes\", \"characterData\"],\n    callback: mutation => {\n      let element = mutation.target;\n      if (!element) return;\n      this.getInputFromElement(mutation.target).forEach(input => {\n        let inputMeta = this.validateInput(input);\n        if (!inputMeta) return;\n        this.updateInput({ ...inputMeta,\n          input,\n          element\n        });\n      });\n    }\n  });\n}; //convention based (all elements should use data-elememet_id and it's faster)\n// made it also support \"id\"\n\n\nattributes.prototype.getInputFromElement = function getInputFromElement(element) {\n  let elId = element.getAttribute('data-element_id') || element.id && `\"#${element.id}\"`;\n  if (elId) return this.initDocument.querySelectorAll(`[data-attributes_target=${elId}]`);\n  return [];\n}; // todo: discuss with\n// attributes.prototype.getInputFromElement = function getInputFromElement(element) {\n//     // let inputs = [];\n//     //todo: fix add textarea\n//     let elId = element.getAttribute('data-element_id');\n//     if(elId)\n//      this.initDocument.querySelectorAll(`[data-attributes_target]`).forEach\n// }\n\n\nattributes.prototype.watchInputChange = async function watchInputChange(mutation) {\n  try {\n    let element,\n        input = mutation.target;\n    let inputMeta = this.validateInput(input);\n    element = inputMeta && (await this.getElementFromInput(input));\n    if (!element) return;\n\n    if (mutation.attributeName === \"data-attributes_target\") {\n      // if (element) \n      this.updateInput({ ...inputMeta,\n        input,\n        element\n      }); // element.isFirst = element.isFirst === true ? false : true;\n    } else if (mutation.attributeName === \"data-attributes_unit\") {\n      // if (element.isFirst) return;\n      this.updateElement({ ...inputMeta,\n        input,\n        element,\n        isColl: true\n      });\n    }\n  } catch (err) {}\n};\n\nattributes.prototype.perInput = async function perInput(input, callback) {\n  try {\n    let inputMeta, element;\n    inputMeta = this.validateInput(input);\n    element = inputMeta && (await this.getElementFromInput(input));\n    if (!element) return;\n    callback(inputMeta, element);\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nattributes.prototype.validateInput = function validateInput(input) {\n  let type = input.getAttribute(\"data-attributes\");\n\n  if (!type) {\n    // console.warn(\"cc-style: input doesn't have data-attributes\")\n    return;\n  }\n\n  type = type.toLowerCase();\n  let camelProperty,\n      property = input.getAttribute(\"data-attributes_property\");\n\n  if (property) {\n    camelProperty = (0, _common.toCamelCase)(property);\n    property = property.toLowerCase();\n  }\n\n  return {\n    type,\n    property,\n    camelProperty\n  };\n};\n\nattributes.prototype.updateElementByValue = function updateElementByValue({\n  type,\n  property,\n  camelProperty,\n  input,\n  element,\n  inputValue,\n  hasCollValue\n}) {\n  let computedStyles, value, removeValue, hasUpdated, unit;\n\n  switch (type) {\n    case 'classstyle':\n      unit = input.getAttribute('data-attributes_unit') || '';\n      value = inputValue && !hasCollValue ? inputValue + unit : inputValue;\n      value = value || '';\n      computedStyles = this.getRealStaticCompStyle(element);\n      return (0, _common.setStyleClassIfDif)(element, {\n        property,\n        camelProperty,\n        value,\n        computedStyles\n      });\n\n    case 'style':\n      unit = input.getAttribute('data-attributes_unit') || '';\n      value = inputValue && !hasCollValue ? inputValue + unit : inputValue;\n      value = value || '';\n      computedStyles = this.getRealStaticCompStyle(element);\n      return _common.setStyleIfDif.call(element, {\n        property,\n        camelProperty,\n        value,\n        computedStyles\n      });\n\n    case 'innerText':\n      if (element.innerText != inputValue) {\n        element.innerText = inputValue;\n        return true;\n      } else return false;\n\n    default:\n      if (typeof inputValue == 'string') {\n        return _common.setAttributeIfDif.call(element, type, inputValue);\n      } else {\n        for (let inputSValue of inputValue) {\n          if (inputSValue.checked) {\n            // unconventional change\n            if (type === 'data-attributes_unit' && ['auto', 'inherit', 'initial'].includes(inputSValue.value)) {\n              element.value = inputSValue.value;\n\n              _common.removeAllSelectedOptions.call(input);\n            } else // unconventional change\n              return _common.setAttributeIfDif.call(element, type, inputSValue.value);\n          }\n        }\n      }\n\n      break;\n  }\n};\n\nattributes.prototype.updateElement = function updateElement({\n  input,\n  element,\n  collValue,\n  isColl,\n  unit,\n  ...rest\n}) {\n  let inputValue = collValue != undefined ? collValue : this.getInputValue(input);\n  inputValue = unit && inputValue ? inputValue + unit : inputValue;\n  let hasUpdated = this.updateElementByValue({ ...rest,\n    input,\n    element,\n    inputValue,\n    hasCollValue: collValue != undefined\n  });\n  cache.reset(element);\n  let params = {\n    value: inputValue,\n    unit: input.getAttribute('data-attributes_unit'),\n    input,\n    element,\n    ...rest\n  };\n  hasUpdated && isColl && this.collaborate(params);\n  hasUpdated && !isColl && this.callback(params); // not needed since crdt\n  // when function called on collboration\n  // todo: use setInputValue directly in updateElementByValue\n  // if (newValue) {\n  //     updateInput({...rest, element, input, })\n  // }\n};\n\nattributes.prototype.updateInput = function updateInput({\n  type,\n  property,\n  camelProperty,\n  element,\n  input\n}) {\n  let computedStyles, value, value2, styleValue, unit;\n  if (!input) return console.error('CoCreate Attributes: input not found/dev');\n\n  switch (type) {\n    case 'classstyle':\n      let ccStyle = (0, _common.getCoCreateStyle)(element.classList);\n      if (ccStyle[camelProperty]) value2 = ccStyle[camelProperty];else {\n        computedStyles = this.getRealStaticCompStyle(element);\n        value2 = computedStyles[camelProperty];\n      }\n\n      if (!value2) {\n        return console.warn(`\"${property}\" can not be found in style object`);\n      }\n\n      [styleValue, unit] = (0, _common.parseUnit)(value2);\n      value = styleValue;\n\n      _common.setAttributeIfDif.call(input, \"data-attributes_unit\", unit);\n\n      break;\n\n    case 'style':\n      computedStyles = this.getRealStaticCompStyle(element);\n      value2 = computedStyles[camelProperty];\n\n      if (!value2) {\n        return console.warn(`\"${property}\" can not be found in style object`);\n      }\n\n      [styleValue, unit] = (0, _common.parseUnit)(value2);\n      value = styleValue;\n\n      _common.setAttributeIfDif.call(input, \"data-attributes_unit\", unit);\n\n    case 'innerText':\n      value = element.innerText;\n      break;\n\n    default:\n      value = element.getAttribute(type);\n      break;\n  }\n\n  this.setInputValue(input, value);\n};\n\nattributes.prototype.setInputValue = function setInputValue(input, value) {\n  let inputType = input.tagName.toLowerCase() || input.classList.has('.pickr') && 'pickr';\n\n  switch (inputType) {\n    case 'input':\n      switch (input.type) {\n        case 'checkbox':\n        case 'radio':\n          input.checked = value == input.value ? true : false;\n          break;\n\n        default:\n          input.value = value;\n      }\n\n      break;\n\n    case \"textarea\":\n      input.value = value;\n      break;\n\n    case 'select':\n      let options = Array.from(input.options);\n      options.forEach(option => {\n        if (value == option.value) input.selectedIndex = options.indexOf(option);\n      });\n      break;\n\n    case 'cocreate-select':\n      (0, _common.renderOptions)(input, value);\n      break;\n\n    case 'pickr':\n      // todo: how to perform validation\n      let pickrIns = _src2.default.refs.get(input);\n\n      _src2.default.disabledEvent = true;\n      pickrIns.setColor(value); // todo: style or value\n\n      _src2.default.disabledEvent = false;\n\n    default:\n      console.warn('CoCreateStyle: unidentified input: ', inputType, 'input ', input);\n  }\n};\n\nattributes.prototype.packMultiValue = function packMultiValue({\n  inputs,\n  stateProperty,\n  valueProperty = \"value\",\n  forceState\n}) {\n  let value = [];\n  Array.from(inputs).forEach(input => {\n    value.push({\n      checked: forceState || input[stateProperty],\n      value: input[valueProperty] || input.getAttribute(valueProperty)\n    });\n  });\n  return value;\n};\n\nattributes.prototype.getInputValue = function getInputValue(input) {\n  if (!input) return;\n  let inputType = input.tagName.toLowerCase() || input.classList.has('.pickr') && 'pickr';\n\n  switch (inputType) {\n    case 'input':\n      switch (input.type) {\n        case 'checkbox':\n        case 'radio':\n          return this.packMultiValue({\n            inputs: this.initDocument.getElementsByName(input.name),\n            stateProperty: 'checked'\n          });\n\n        default:\n          return input.value;\n      }\n\n    case \"textarea\":\n      return input.value;\n\n    case 'select':\n      return this.packMultiValue({\n        inputs: input.options,\n        stateProperty: 'selected'\n      });\n\n    case 'cocreate-select':\n      return this.packMultiValue({\n        inputs: input.querySelectorAll(\":scope > [selected]\"),\n        forceState: true\n      });\n\n    case 'pickr':\n      // todo: how to perform validation\n      // if (!CoCreate.pickr.refs.has(input)) return; \n      let pickrIns = _src2.default.refs.get(input);\n\n      return pickrIns ? pickrIns.getColor().toHEXA().toString() : '';\n\n    default:\n      console.warn('CoCreateStyle: unidentified input');\n      break;\n  }\n};\n\nattributes.prototype.getElementFromInput = async function getElementFromInput(input) {\n  let id = input.getAttribute(\"data-attributes_target\");\n\n  if (id) {\n    if (id.indexOf(';') !== -1) {\n      let el = await this.complexSelector(id, (canvasDoc, selector) => canvasDoc.querySelector(selector));\n      return el;\n    } else return this.initDocument.querySelector(id);\n  } else return false;\n};\n\nattributes.prototype.getRealStaticCompStyle = function getRealStaticCompStyle(element) {\n  if (cache.get(element, 'valid')) return cache.get(element, 'computedStyles');\n  setTimeout(() => {\n    cache.reset(element);\n  }, 5000);\n  let oldDispaly = element.style.display;\n  element.style.display = \"none\";\n  let computedStylesLive = window.getComputedStyle(element);\n  let computedStyles = Object.assign({}, computedStylesLive);\n  computedStyles.display = oldDispaly;\n  element.style.display = oldDispaly;\n  if (element.getAttribute(\"style\") == \"\") element.removeAttribute(\"style\");\n  element.removeAttribute('no-observe');\n  cache.spread(element, {\n    computedStyles,\n    valid: true\n  });\n  return computedStyles;\n};\n\nattributes.prototype.complexSelector = async function complexSelector(comSelector, callback) {\n  let [canvasSelector, selector] = comSelector.split(';');\n  let canvas = document.querySelector(canvasSelector);\n\n  if (!canvas) {\n    console.warn('complex selector canvas now found for', comSelector);\n    return;\n  }\n\n  if (canvas.contentDocument.readyState === 'loading') {\n    try {\n      await new Promise((resolve, reject) => {\n        canvas.contentWindow.addEventListener('load', e => resolve());\n      });\n    } catch (err) {\n      console.error('iframe can not be loaded');\n    }\n  }\n\n  this.observerElements(canvas.contentWindow);\n  return callback(canvas.contentWindow.document, selector);\n}; // attributes.prototype.getInputs = function getInputs(element) {\n//     let inputs = [];\n//     let allInputs = Array.from(document.getElementsByTagName(\"input\"));\n//     allInputs.forEach((inputCandidate) => {\n//         let inputMeta = getInputMetaData(inputCandidate);\n//         if (!inputMeta) return;\n//         let allReferencedEl = allFrame((frame) =>\n//             frame.querySelectorAll(\n//                 inputMeta.input.getAttribute(\"data-attributes_target\")\n//             )\n//         );\n//         if (Array.from(allReferencedEl).includes(element)) {\n//             inputs.push(inputMeta.input);\n//         }\n//     });\n//     return inputs;\n// }\n//attributes.prototype.perInput =  async function perInput(input, callback) {\n//     let inputMeta, element, group = input.getAttribute(\"data-attributes_group\");\n//     if (group) {\n//         [inputMeta, element] = getInputsMetaData(input);\n//     } else {\n//         inputMeta = validateInput(input);\n//         element = await getElementFromInput(input);\n//     }\n//     if (!inputMeta || !element) return;\n//     if (Array.isArray(inputMeta))\n//         inputMeta.forEach(async(metas) => callback(metas, element))\n//     else\n//         callback(inputMeta, element)\n// }\n//attributes.prototype.getInputsMetaData =  function getInputsMetaData(input) {\n//     let list = [],\n//         inputs = [];\n//     let element = getElementFromInput(input)\n//     let realInputs = input.querySelectorAll(group);\n//     realInputs.forEach(inp => {\n//         \n//         inputs.push(inp)\n//         list.push(validateInput(inp))\n//     })\n//     groupEl.set(input, inputs);\n//     return [list, element];\n// }\n// window.addEventListener('load', () => {\n//     let attribute = new attributes({ document, exclude: '#ghostEffect,.vdom-item ' })\n//     attribute.init()\n// })\n// let s = new attributes({\n//     document,\n//     exclude: '#ghostEffect,.vdom-item ',\n//     callback: ({\n//         value,\n//         type,\n//         property,\n//         element,\n//     }) => {\n//         //   if (document.contains(element))\n//         // domToText.domToText({\n//         //   method: type == 'attribute' ? 'setAttribute' : type, \n//         //   property: property,\n//         //   target: element.getAttribute(\"data-element_id\"),\n//         //   tagName: element.tagName,\n//         //   value,\n//         //   ...crdtCon\n//         // })\n//     },\n// })\n// s.init();\n\n\nvar _default = {\n  init: params => {\n    let s = new attributes(params);\n    s.init();\n    return s;\n  }\n}; //  case 'attribute':\n//             switch (property) {\n//                 case 'style':\n//                     if (typeof inputValue == 'string') {\n//                         let style = parseCssRules(inputValue);\n//                         Object.assign(element.style, )\n//                         return Object.keys(style).length;\n//                     }\n//                     else {\n//                         value = {}, removeValue = {};\n//                         inputValue.forEach(inputSValue => {\n//                             let parse = parseCssRules(inputSValue.value);\n//                             if (inputSValue.checked)\n//                                 Object.assign(value, parse);\n//                             else\n//                                 Object.assign(removeValue, parse);\n//                         })\n//                         let elStyle = parseCssRules(element.getAttribute('style'));\n//                         for (let [key, value] of Object.entries(elStyle)) {\n//                             if (removeValue.hasOwnProperty(key))\n//                                 delete elStyle[key]\n//                         }\n//                         Object.assign(elStyle, value);\n//                         let strStyle = \"\";\n//                         for (let [key, value] of Object.entries(elStyle))\n//                             strStyle += `${key}: ${value};`\n//                         element.setAttribute('style', strStyle)\n//                         //todo: better way to save elStyle when getting and here to compare\n//                         return Object.keys(elStyle).length;\n//                     }\n//                 case 'class':\n//                     if (typeof inputValue == 'string') {\n//                         let classNames = inputValue.split(' ');\n//                         classNames.forEach(className => {\n//                             className && element.classList.add(className);\n//                         });\n//                         return classNames.length;\n//                     }\n//                     else {\n//                         value = [], removeValue = [];\n//                         inputValue.forEach(inputSValue => {\n//                             let parse = inputSValue.value.split(' ');\n//                             if (inputSValue.checked)\n//                                 value = value.concat(parse)\n//                             else\n//                                 removeValue = removeValue.concat(parse)\n//                         })\n//                         removeValue.forEach(className => element.classList.remove(className))\n//                         value.forEach(className => element.classList.add(className))\n//                         //todo: fix\n//                         return true;\n//                     }\n//                 default:\n//                     if (typeof inputValue == 'string') {\n//                         return setAttributeIfDif.call(element, property, inputValue)\n//                     }\n//                     else {\n//                         for (let inputSValue of inputValue) {\n//                             if (inputSValue.checked) {\n//                                 // unconventional change\n//                                 if (property === 'data-attributes_unit' && ['auto', 'inherit', 'initial'].includes(inputSValue.value)) {\n//                                     element.value = inputSValue.value;\n//                                     removeAllSelectedOptions.call(input)\n//                                 }\n//                                 else\n//                                     // unconventional change\n//                                     return setAttributeIfDif.call(element, property, inputSValue.value)\n//                             }\n//                         }\n//                     }\n//                     break;\n//             }\n\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/index.js\n")},"../CoCreate-form/src/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = void 0;\n\nvar _src = _interopRequireDefault(__webpack_require__(/*! ../../CoCreate-observer/src */ \"../CoCreate-observer/src/index.js\"));\n\nvar _utils = _interopRequireDefault(__webpack_require__(/*! ../../../CoCreateJS/src/utils */ \"../../CoCreateJS/src/utils.js\"));\n\nvar _src2 = __webpack_require__(/*! ../../../CoCreateJS/src */ \"../../CoCreateJS/src/index.js\");\n\nvar _src3 = _interopRequireDefault(__webpack_require__(/*! ../../CoCreate-action/src */ \"../CoCreate-action/src/index.js\"));\n\nvar _utils2 = _interopRequireDefault(__webpack_require__(/*! ./utils */ \"../CoCreate-form/src/utils.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// import crdt from '../../CoCreate-crdt/src'\n// import text from '../../CoCreate-text/src'\nconst CoCreateForm = {\n  requestAttr: \"data-document_request\",\n  selectors: [],\n  modules: [],\n  init: function ({\n    name,\n    selector,\n    callback\n  }) {\n    this.modules.push({\n      name,\n      selector,\n      callback\n    });\n\n    if (selector) {\n      this.selectors.push(selector);\n    }\n  },\n  get: function () {\n    return {\n      selectors: this.selectors\n    };\n  },\n  checkID: function (element, attr = \"data-document_id\") {\n    let document_id = element.getAttribute(attr) || \"\";\n\n    if (document_id === \"\" || document_id === \"pending\" || !_utils.default.checkValue(document_id)) {\n      return false;\n    }\n\n    return true;\n  },\n  request: function ({\n    form,\n    element,\n    nameAttr,\n    value\n  }) {\n    if (!form && element) {\n      form = element.closest('form');\n    }\n\n    if (form) {\n      this.__requestDocumentIdOfForm(form);\n    } else if (element) {\n      nameAttr = nameAttr || \"name\";\n\n      this.__requestDocumentId(element, nameAttr, value);\n    }\n  },\n  initElement: function (container) {\n    const __container = container || document;\n\n    if (!__container.querySelectorAll) {\n      return;\n    }\n\n    let forms = __container.querySelectorAll('form');\n\n    if (forms.length === 0 && __container != document && __container.tagName === \"FORM\") {\n      forms = [__container];\n    }\n\n    forms.forEach(form => {\n      _utils2.default.setAttribute(form);\n\n      _utils2.default.disableAutoFill(form);\n    });\n  },\n  __init: function () {\n    const forms = document.querySelectorAll('form');\n\n    this.__initEvent();\n\n    forms.forEach(form => {\n      _utils2.default.setAttribute(form);\n    });\n  },\n  __initEvent: function () {\n    const self = this;\n\n    _src2.socket.listen('createDocument', function (data) {\n      const {\n        metadata\n      } = data;\n\n      self.__receivedDocumentId(data);\n\n      if (metadata == \"createDocument-action\") {//. dispatch EndAction\n      }\n    });\n\n    _src2.socket.listen('deleteDocument', function (data) {\n      const {\n        metadata\n      } = data;\n\n      if (metadata === \"deleteDocument-action\") {//.dispatch End Action\n      }\n    });\n\n    document.addEventListener('clicked-submitBtn', function (event) {\n      const {\n        element\n      } = event.detail;\n      self.modules.forEach(({\n        selector,\n        callback\n      }) => {\n        if (callback && element.matches(selector)) {\n          callback.call(null, element);\n        }\n      });\n    });\n  },\n  __deleteDocumentAction: function (btn) {\n    const collection = btn.getAttribute('data-collection');\n    const document_id = btn.getAttribute('data-document_id');\n\n    if (_utils.default.checkValue(collection) && _utils.default.checkValue(document_id)) {\n      _src2.crud.deleteDocument({\n        'collection': collection,\n        'document_id': document_id,\n        'metadata': 'deleteDocument-action'\n      });\n\n      document.dispatchEvent(new CustomEvent('deletedDocument', {\n        detail: {}\n      }));\n    }\n  },\n  __deleteDocumentsAction: function (btn) {\n    const collection = btn.getAttribute('data-collection');\n    const selector = btn.getAttribute('data-document_target');\n    if (!selector) return;\n    const selectedEls = document.querySelectorAll(selector);\n\n    if (_utils2.default.checkValue(collection)) {\n      selectedEls.forEach(el => {\n        const document_id = el.getAttribute('data-document_id');\n\n        if (_utils.default.checkValue(document_id)) {\n          _src2.crud.deleteDocument({\n            'collection': collection,\n            'document_id': document_id,\n            'metadata': ''\n          });\n        }\n      });\n      document.dispatchEvent(new CustomEvent('deletedDocuments', {\n        detail: {}\n      }));\n    }\n  },\n  __createDocumentAction: function (btn) {\n    const form = btn.closest(\"form\");\n    const self = this;\n\n    let collections = _utils2.default.getCOllections(form);\n\n    collections.forEach(collection => {\n      let data = _utils2.default.getFormData(form, \"\", collection);\n\n      if (Object.keys(data).length == 0 && data.constructor === Object) {\n        return;\n      }\n\n      if (_utils.default.checkValue(collection)) {\n        _src2.crud.createDocument({\n          'collection': collection,\n          'data': data,\n          'metadata': 'createDocument-action',\n          'element': 'empty'\n        });\n\n        document.dispatchEvent(new CustomEvent('createdDocument', {\n          detail: {}\n        }));\n      }\n    });\n  },\n  __saveDocumentAction: function (btn) {\n    const form = btn.closest(\"form\");\n\n    if (!_utils2.default.checkFormValidate(form)) {\n      alert('Values are not unique');\n      return;\n    }\n\n    const selectors = this.selectors || [];\n    const elements = form.querySelectorAll(selectors.join(','));\n    let request_document_id = false;\n\n    for (var i = 0; i < elements.length; i++) {\n      let el = elements[i];\n      const data_document_id = el.getAttribute('data-document_id');\n\n      if (el.getAttribute('data-save_value') == 'false') {\n        continue;\n      }\n\n      if (!data_document_id) {\n        if (el.getAttribute('name')) {\n          request_document_id = true;\n        }\n\n        continue;\n      }\n\n      if (input.isUsageY(el)) {\n        continue;\n      }\n\n      if (_utils2.default.isTemplateInput(el)) return;\n      var new_event = new CustomEvent(\"clicked-submitBtn\", {\n        bubbles: true,\n        detail: {\n          type: \"submitBtn\",\n          element: el\n        }\n      });\n      el.dispatchEvent(new_event);\n    }\n\n    if (request_document_id) {\n      this.requestDocumentIdOfForm(form);\n    }\n\n    document.dispatchEvent(new CustomEvent('savedDocument', {\n      detail: {}\n    }));\n  },\n  __requestDocumentId: function (element, nameAttr = \"name\", value = null) {\n    const collection = element.getAttribute('data-collection');\n    const name = element.getAttribute(nameAttr);\n    if (!collection || !name) return;\n\n    const request_id = _utils.default.generateUUID();\n\n    element.setAttribute(this.requestAttr, request_id);\n\n    _src2.crud.createDocument({\n      \"collection\": collection,\n      \"element\": request_id,\n      \"metadata\": \"\"\n    });\n  },\n  __requestDocumentIdOfForm: function (form) {\n    let self = this;\n    let elemens = form.querySelectorAll('[name], [data-pass_to]');\n    let collections = [];\n\n    for (var i = 0; i < elemens.length; i++) {\n      let el = elemens[i];\n\n      if (el.parentNode.classList.contains('template')) {\n        continue;\n      }\n\n      const collection = el.getAttribute(\"data-collection\") || el.getAttribute(\"data-pass_collection\") || \"\";\n\n      if (collection !== \"\" && !collections.includes(collection) && !self.checkID(el, 'data-document_id') && !self.checkID(el, 'data-pass_document_id')) {\n        const request_id = _utils.default.generateUUID();\n\n        collections.push(collection);\n        el.setAttribute(this.requestAttr, request_id); //. get Data\n\n        let data = _utils2.default.getFormData(form, \"\", collection);\n        /* FixME Create Document request */\n\n\n        _src2.crud.createDocument({\n          \"collection\": collection,\n          \"element\": request_id,\n          'data': data,\n          \"metadata\": \"\"\n        });\n      }\n    }\n  },\n  __setNewIdProcess: function (element, document_id, pass) {\n    if (!element) return;\n    element.removeAttribute(this.requestAttr);\n    const event_data = {\n      document_id: document_id\n    };\n\n    if (!pass && !this.checkID(element) && element.hasAttribute('name')) {\n      element.setAttribute('data-document_id', document_id);\n    }\n\n    if (pass && !this.checkID(element, 'data-pass_document_id') && element.hasAttribute('data-pass_to')) {\n      element.setAttribute('data-pass_document_id', document_id); // CoCreateLogic.storePassData(element)\n\n      if (element.parentNode.classList.contains('submitBtn')) {\n        element.click();\n      }\n    }\n\n    var event = new CustomEvent('set-document_id', {\n      detail: event_data\n    });\n    element.dispatchEvent(event);\n  },\n  __receivedDocumentId: function (data) {\n    if (!data['document_id']) {\n      return;\n    }\n\n    let element = document.querySelector(`[${this.requestAttr}=\"${data['element']}\"]`);\n    if (!element) return;\n    let self = this;\n    const form = element.tagName === \"FORM\" ? element : _utils2.default.getParents(element, 'form');\n    const collection = data['collection'];\n    const id = data['document_id'];\n\n    if (form && id) {\n      form.setAttribute('data-form_id', data['element']);\n      const elements = form.querySelectorAll(`[data-collection=${collection}], [data-pass_collection=${collection}]`);\n      elements.forEach(function (el) {\n        el.removeAttribute(self.requestAttr);\n        if (el.hasAttribute('name')) self.__setNewIdProcess(el, id);\n        if (el.hasAttribute('data-pass_to')) self.__setNewIdProcess(el, id, true);\n      });\n    } else if (element) {\n      this.__setNewIdProcess(element, id);\n    }\n  }\n};\n\nCoCreateForm.__init();\n\n_src2.core.registerInit(CoCreateForm.initElement, CoCreateForm);\n\n_src.default.init({\n  name: 'CoCreateForm',\n  observe: ['subtree', 'childList'],\n  include: 'form',\n  callback: function (mutation) {\n    CoCreateForm.initElement(mutation.target);\n  }\n});\n\n_src3.default.init({\n  action: \"createDocument\",\n  endEvent: \"createdDocument\",\n  callback: (btn, data) => {\n    CoCreateForm.__createDocumentAction(btn);\n  }\n});\n\n_src3.default.init({\n  action: \"deleteDocument\",\n  endEvent: \"deletedDocument\",\n  callback: (btn, data) => {\n    CoCreateForm.__deleteDocumentAction(btn);\n  }\n});\n\n_src3.default.init({\n  action: \"deleteDocuments\",\n  endEvent: \"deletedDocuments\",\n  callback: (btn, data) => {\n    CoCreateDocument.__deleteDocumentsAction(btn);\n  }\n});\n\n_src3.default.init({\n  action: \"saveDocument\",\n  endEvent: \"savedDocument\",\n  callback: (btn, data) => {\n    CoCreateForm.__saveDocumentAction(btn);\n  }\n});\n\nvar _default = CoCreateForm;\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../CoCreate-form/src/index.js\n")},"../CoCreate-form/src/utils.js":(__unused_webpack_module,exports)=>{eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = void 0;\nconst Utils = {\n  disableAutoFill: function (element) {\n    if (element.tagName == \"TEXTAREA\") {\n      element.value = \"\";\n      element.setAttribute(\"autocomplete\", \"off\");\n    }\n\n    if (!element.hasAttribute(\"autocomplete\")) {\n      element.setAttribute('autocomplete', \"off\");\n    }\n  },\n  setAttribute: function (form) {\n    const collection = form.getAttribute('data-collection') || \"\";\n    const dataRealTime = form.getAttribute('data-realtime');\n    const document_id = form.getAttribute('data-document_id') || \"\";\n    let elements = form.querySelectorAll('[name], [data-pass_to]');\n    elements.forEach(function (el) {\n      if (el.parentNode.classList.contains('template')) {\n        return;\n      }\n\n      if (el.getAttribute('data-realtime') == null && dataRealTime) {\n        // if (!['INPUT', 'TEXTAREA'].indexOf(el.tagName)) {\n        el.setAttribute('data-realtime', dataRealTime); // }\n      }\n\n      if (el.getAttribute('name') && !el.hasAttribute('data-collection') && collection) {\n        el.setAttribute('data-collection', collection);\n      }\n\n      if (el.getAttribute('data-pass_to') && !el.hasAttribute('data-pass_collection') && collection) {\n        el.setAttribute('data-pass_collection', collection);\n      }\n\n      if (el.getAttribute('name') && !el.getAttribute('data-document_id') && document_id) {\n        el.setAttribute('data-document_id', document_id);\n      }\n\n      if (!el.hasAttribute(\"data-document_id\") && document_id != null) {\n        el.setAttribute('data-document_id', document_id);\n      }\n    });\n  },\n  checkFormValidate: function (form) {\n    if (typeof CoCreate.unique !== 'undefined') {\n      return CoCreate.unique.checkValidate(form);\n    }\n\n    return true;\n  },\n  isTemplateInput: function (input) {\n    if (input.classList.contains('template')) return true;\n    let node = input.parentNode;\n\n    while (node) {\n      if (node.classList && node.classList.contains('template')) {\n        return true;\n      }\n\n      node = node.parentNode;\n    }\n\n    return false;\n  },\n  getFormData: function (form, document_id, collection) {\n    let data = {};\n    if (!collection) return {};\n    const elements = form.querySelectorAll(`[name][data-collection='${collection}']`);\n    elements.forEach(el => {\n      let el_document_id = el.getAttribute('data-document_id') || \"\";\n      let name = el.getAttribute('name');\n      let value = el.value || el.getAttribute('value');\n      if (name === \"_id\") return;\n      if (!name || !value) return;\n\n      if (document_id == el_document_id) {\n        data[name] = el.value;\n      }\n    });\n    return data;\n  },\n  // getFormData: function(form, selectors) {\n  // \tconst self = this; \n  // \tconst elements = form.querySelectorAll(selectors.join(','));\n  // \tlet request_document_id = false;\n  // \tlet dataList = [];\n  // \telements.forEach(el => {\n  // \t\tlet collection = el.getAttribute('data-collection')\n  // \t\tlet document_id = el.getAttribute('data-document_id')\n  // \t\tlet name = el.getAttribute('name')\n  // \t\tif (el.getAttribute('data-save_value') == 'false') {\n  // \t\t\treturn;\n  // \t\t}\n  // \t\tif (!document_id && name) {\n  // \t\t\trequest_document_id = true;\n  // \t\t\treturn;\n  // \t\t}\n  // \t\tlet data = dataList.find(d => d.collection == collection && d.document_id == document_id);\n  // \t})\n  // },\n  getParents: function (element, selector = \"form\") {\n    if (!Element.prototype.matches) {\n      Element.prototype.matches = Element.prototype.matchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector || Element.prototype.webkitMatchesSelector || function (s) {\n        var matches = (this.document || this.ownerDocument).querySelectorAll(s),\n            i = matches.length;\n\n        while (--i >= 0 && matches.item(i) !== this) {}\n\n        return i > -1;\n      };\n    }\n\n    for (; element && element !== document; element = element.parentNode) {\n      if (element.matches(selector)) return element;\n    }\n\n    return null;\n  },\n  setDocumentIDOfElement: function (element, document_id) {\n    let old_document_id = element.getAttribute('data-document_id');\n\n    if (!old_document_id || old_document_id == \"\" || old_document_id == \"pending\") {\n      element.setAttribute('data-document_id', document_id);\n    }\n  },\n  getCOllections: function (form) {\n    let collections = [];\n    if (!form) return collections;\n    let els = form.querySelectorAll('[name][data-collection]');\n    els.forEach(el => {\n      let tmpCollection = el.getAttribute('data-collection');\n\n      if (tmpCollection && !collections.includes(tmpCollection)) {\n        collections.push(tmpCollection);\n      }\n    });\n    return collections;\n  }\n};\nvar _default = Utils;\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../CoCreate-form/src/utils.js\n")},"../CoCreate-observer/src/index.js":(__unused_webpack_module,exports)=>{eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.default = void 0;\n// window.addEventListener("load", () => {\n\n/*\nCoCreate.observer.init({ \n\tname: \'CoCreateFetchInit\', // no usage, just to provide for console debugging \n\tobserve: [\'subtree\', \'childList\',\'attributes\'], // the same parameters of options in #https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver/observe\n\tattributes: [\'data-fetch_collection\'], // it doesn\'t count added nodes or remove nodes\n\tinclude: ".classname", // a selector to select only elements that matches\n\texclude: ".classname", // a selector to exclude elements from processing\n\tcallback: function(mutation) { // a function which gets a mutation object according to #https://developer.mozilla.org/en-US/docs/Web/API/MutationRecord\n\t\tCoCreateFetch.initElement(mutation.target)\n\t}\n})\n*/\n\n/**\n * description\n * \n * @param {String} [name] - an optional name to provide for debugging console\n * @param {Array} observe - a list of mutation type to be observerd, a mix of possible `attributes`, `childList` or `subtree`\n * ... and other params can be here \n * \n * @return null\n */\nwindow.counter = 0;\nwindow.counter2 = 0;\n\nif (!Element.prototype.matches) {\n  Element.prototype.matches = Element.prototype.matchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector || Element.prototype.webkitMatchesSelector || function (s) {\n    var matches = (this.document || this.ownerDocument).querySelectorAll(s),\n        i = matches.length;\n\n    while (--i >= 0 && matches.item(i) !== this) {}\n\n    return i > -1;\n  };\n}\n\nconst CoCreateObserver = {\n  initTasks: new Map(),\n  attrTasks: new Map(),\n  rules: new Map(),\n  rulesArray: [],\n  __init: function () {\n    const self = this;\n    const observer = new MutationObserver((mutationsList, observer) => self.__callback(mutationsList, observer)); // setTimeout(()=>{\n\n    observer.observe(document.body, {\n      attributes: true,\n      childList: true,\n      subtree: true,\n      characterData: false,\n      attributeOldValue: true,\n      characterData: true\n    });\n  },\n  // init: function(data) {\n  //   this.add(data);\n  // },\n  init: function ({\n    observe,\n    include,\n    exclude,\n    attributes,\n    name,\n    callback\n  }) {\n    if (observe.some(x => x == "childList")) {\n      this.initTasks.set(callback, {\n        observe,\n        include,\n        exclude,\n        attributes,\n        name\n      });\n    }\n\n    if (observe.some(x => x == "attributes")) {\n      this.attrTasks.set(callback, {\n        observe,\n        include,\n        exclude,\n        attributes,\n        name\n      });\n    }\n  },\n  remove: function (callback) {\n    this.initTasks.delete(callback);\n    this.attrTasks.delete(callback);\n  },\n  addRule: function ({\n    include,\n    exclude,\n    name\n  }) {\n    this.rules.set(name, {\n      include,\n      exclude\n    });\n    this.rulesArray = Array.from(this.rules);\n  },\n  removeRule: function ({\n    name\n  }) {\n    this.rules.delete(name);\n    this.rulesArray = Array.from(this.rules);\n  },\n  __callback: function (mutationsList, observer) {\n    // console.log(this)\n    for (let mutation of mutationsList) {\n      if (mutation.type == "childList" && mutation.addedNodes.length > 0) {\n        //. run init functions\n        this.__initCallback(mutation);\n      }\n\n      if (mutation.type == "attributes") {\n        //. run attributes functions\n        this.__attrCallback(mutation);\n      }\n    }\n  },\n  __initCallback: function (mutation) {\n    let addedNodes = Array.from(mutation.addedNodes);\n    this.initTasks.forEach(({\n      observe,\n      include,\n      exclude,\n      attributes,\n      name\n    }, callback) => {\n      mutation.addedNodes.forEach(el => {\n        if (!el.tagName) return;\n\n        if (include && !(el.matches(include) || el.querySelector(include))) {\n          return;\n        }\n\n        if (exclude && (el.matches(exclude) || el.querySelector(exclude))) {\n          return;\n        }\n\n        if (el.created) return;\n        callback.apply(null, [{\n          type: mutation.type,\n          target: el\n        }]);\n      });\n    });\n    addedNodes.map(el => el.created = true);\n  },\n  __attrCallback: function (mutation) {\n    for (let [name, {\n      include,\n      exclude\n    }] of this.rulesArray) {\n      if (include && !mutation.target.matches(include)) return;\n      if (exclude && mutation.target.matches(exclude)) return;\n    }\n\n    this.attrTasks.forEach(({\n      observe,\n      include,\n      exclude,\n      attributes,\n      name\n    }, callback) => {\n      if (attributes && mutation.attributeName && !attributes.includes(mutation.attributeName)) {\n        return;\n      }\n\n      if (include && !mutation.target.matches(include)) return;\n      if (exclude && mutation.target.matches(exclude)) return;\n\n      if (mutation.attributeName) {\n        let newValue = mutation.target.getAttribute(mutation.attributeName);\n\n        if (newValue != mutation.oldValue) {\n          callback.apply(null, [mutation]);\n        }\n      }\n    });\n  },\n  setInitialized: function (element, type) {\n    // element.setAttribute(`initialized_${type}`, "true");\n    type = type || "";\n    let key = "co_initialized_" + type;\n    element[key] = true;\n  },\n  getInitialized: function (element, type) {\n    type = type || "";\n    let key = "co_initialized_" + type;\n\n    if (!element[key]) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n};\n\nCoCreateObserver.__init();\n\nvar _default = CoCreateObserver;\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS5hdHRyaWJ1dGVzLy4uL0NvQ3JlYXRlLW9ic2VydmVyL3NyYy9pbmRleC5qcz9jZGYyIl0sIm5hbWVzIjpbIndpbmRvdyIsImNvdW50ZXIiLCJjb3VudGVyMiIsIkVsZW1lbnQiLCJwcm90b3R5cGUiLCJtYXRjaGVzIiwibWF0Y2hlc1NlbGVjdG9yIiwibW96TWF0Y2hlc1NlbGVjdG9yIiwibXNNYXRjaGVzU2VsZWN0b3IiLCJvTWF0Y2hlc1NlbGVjdG9yIiwid2Via2l0TWF0Y2hlc1NlbGVjdG9yIiwicyIsImRvY3VtZW50Iiwib3duZXJEb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJpIiwibGVuZ3RoIiwiaXRlbSIsIkNvQ3JlYXRlT2JzZXJ2ZXIiLCJpbml0VGFza3MiLCJNYXAiLCJhdHRyVGFza3MiLCJydWxlcyIsInJ1bGVzQXJyYXkiLCJfX2luaXQiLCJzZWxmIiwib2JzZXJ2ZXIiLCJNdXRhdGlvbk9ic2VydmVyIiwibXV0YXRpb25zTGlzdCIsIl9fY2FsbGJhY2siLCJvYnNlcnZlIiwiYm9keSIsImF0dHJpYnV0ZXMiLCJjaGlsZExpc3QiLCJzdWJ0cmVlIiwiY2hhcmFjdGVyRGF0YSIsImF0dHJpYnV0ZU9sZFZhbHVlIiwiaW5pdCIsImluY2x1ZGUiLCJleGNsdWRlIiwibmFtZSIsImNhbGxiYWNrIiwic29tZSIsIngiLCJzZXQiLCJyZW1vdmUiLCJkZWxldGUiLCJhZGRSdWxlIiwiQXJyYXkiLCJmcm9tIiwicmVtb3ZlUnVsZSIsIm11dGF0aW9uIiwidHlwZSIsImFkZGVkTm9kZXMiLCJfX2luaXRDYWxsYmFjayIsIl9fYXR0ckNhbGxiYWNrIiwiZm9yRWFjaCIsImVsIiwidGFnTmFtZSIsInF1ZXJ5U2VsZWN0b3IiLCJjcmVhdGVkIiwiYXBwbHkiLCJ0YXJnZXQiLCJtYXAiLCJhdHRyaWJ1dGVOYW1lIiwiaW5jbHVkZXMiLCJuZXdWYWx1ZSIsImdldEF0dHJpYnV0ZSIsIm9sZFZhbHVlIiwic2V0SW5p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RSxVQUFTQyxPQUFULEVBQWtCbEIsSUFBbEIsRUFBd0I7QUFDeEM7QUFDQUEsUUFBSSxHQUFHQSxJQUFJLElBQUksRUFBZjtBQUNBLFFBQUltQixHQUFHLEdBQUcsb0JBQW9CbkIsSUFBOUI7QUFDQWtCLFdBQU8sQ0FBQ0MsR0FBRCxDQUFQLEdBQWUsSUFBZjtBQUNBLEdBckh1QjtBQXVIeEJDLGdCQUFjLEVBQUUsVUFBU0YsT0FBVCxFQUFrQmxCLElBQWxCLEVBQXdCO0FBQ3ZDQSxRQUFJLEdBQUdBLElBQUksSUFBSSxFQUFmO0FBQ0EsUUFBSW1CLEdBQUcsR0FBRyxvQkFBb0JuQixJQUE5Qjs7QUFDQSxRQUFJLENBQUNrQixPQUFPLENBQUNDLEdBQUQsQ0FBWixFQUFtQjtBQUNsQixhQUFPLEtBQVA7QUFDQSxLQUZELE1BRU87QUFDTixhQUFPLElBQVA7QUFDQTtBQUNEO0FBL0h1QixDQUF6Qjs7QUFrSUFyRCxnQkFBZ0IsQ0FBQ00sTUFBakI7O2VBR2VOLGdCIiwiZmlsZSI6Ii4uL0NvQ3JlYXRlLW9ic2VydmVyL3NyYy9pbmRleC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLCAoKSA9PiB7XG5cbi8qXG5Db0NyZWF0ZS5vYnNlcnZlci5pbml0KHsgXG5cdG5hbWU6ICdDb0NyZWF0ZUZldGNoSW5pdCcsIC8vIG5vIHVzYWdlLCBqdXN0IHRvIHByb3ZpZGUgZm9yIGNvbnNvbGUgZGVidWdnaW5nIFxuXHRvYnNlcnZlOiBbJ3N1YnRyZWUnLCAnY2hpbGRMaXN0JywnYXR0cmlidXRlcyddLCAvLyB0aGUgc2FtZSBwYXJhbWV0ZXJzIG9mIG9wdGlvbnMgaW4gI2h0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9NdXRhdGlvbk9ic2VydmVyL29ic2VydmVcblx0YXR0cmlidXRlczogWydkYXRhLWZldGNoX2NvbGxlY3Rpb24nXSwgLy8gaXQgZG9lc24ndCBjb3VudCBhZGRlZCBub2RlcyBvciByZW1vdmUgbm9kZXNcblx0aW5jbHVkZTogXCIuY2xhc3NuYW1lXCIsIC8vIGEgc2VsZWN0b3IgdG8gc2VsZWN0IG9ubHkgZWxlbWVudHMgdGhhdCBtYXRjaGVzXG5cdGV4Y2x1ZGU6IFwiLmNsYXNzbmFtZVwiLCAvLyBhIHNlbGVjdG9yIHRvIGV4Y2x1ZGUgZWxlbWVudHMgZnJvbSBwcm9jZXNzaW5nXG5cdGNhbGxiYWNrOiBmdW5jdGlvbihtdXRhdGlvbikgeyAvLyBhIGZ1bmN0aW9uIHdoaWNoIGdldHMgYSBtdXRhdGlvbiBvYmplY3QgYWNjb3JkaW5nIHRvICNodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvTXV0YXRpb25SZWNvcmRcblx0XHRDb0NyZWF0ZUZldGNoLmluaXRFbGVtZW50KG11dGF0aW9uLnRhcmdldClcblx0fVxufSlcbiovXG5cblxuLyoqXG4gKiBkZXNjcmlwdGlvblxuICogXG4gKiBAcGFyYW0ge1N0cmluZ30gW25hbWVdIC0gYW4gb3B0aW9uYWwgbmFtZSB0byBwcm92aWRlIGZvciBkZWJ1Z2dpbmcgY29uc29sZVxuICogQHBhcmFtIHtBcnJheX0gb2JzZXJ2ZSAtIGEgbGlzdCBvZiBtdXRhdGlvbiB0eXBlIHRvIGJlIG9ic2VydmVyZCwgYSBtaXggb2YgcG9zc2libGUgYGF0dHJpYnV0ZXNgLCBgY2hpbGRMaXN0YCBvciBgc3VidHJlZWBcbiAqIC4uLiBhbmQgb3RoZXIgcGFyYW1zIGNhbiBiZSBoZXJlIFxuICogXG4gKiBAcmV0dXJuIG51bGxcbiAqL1xuXG53aW5kb3cuY291bnRlciA9IDA7XG53aW5kb3cuY291bnRlcjIgPSAwO1xuaWYgKCFFbGVtZW50LnByb3RvdHlwZS5tYXRjaGVzKSB7XG4gIEVsZW1lbnQucHJvdG90eXBlLm1hdGNoZXMgPVxuICAgIEVsZW1lbnQucHJvdG90eXBlLm1hdGNoZXNTZWxlY3RvciB8fFxuICAgIEVsZW1lbnQucHJvdG90eXBlLm1vek1hdGNoZXNTZWxlY3RvciB8fFxuICAgIEVsZW1lbnQucHJvdG90eXBlLm1zTWF0Y2hlc1NlbGVjdG9yIHx8XG4gICAgRWxlbWVudC5wcm90b3R5cGUub01hdGNoZXNTZWxlY3RvciB8fFxuICAgIEVsZW1lbnQucHJvdG90eXBlLndlYmtpdE1hdGNoZXNTZWxlY3RvciB8fFxuICAgIGZ1bmN0aW9uKHMpIHtcbiAgICAgIHZhciBtYXRjaGVzID0gKHRoaXMuZG9jdW1lbnQgfHwgdGhpcy5vd25lckRvY3VtZW50KS5xdWVyeVNlbGVjdG9yQWxsKHMpLFxuICAgICAgICBpID0gbWF0Y2hlcy5sZW5ndGg7XG4gICAgICB3aGlsZSAoLS1pID49IDAgJiYgbWF0Y2hlcy5pdGVtKGkpICE9PSB0aGlzKSB7fVxuICAgICAgcmV0dXJuIGkgPiAtMTtcbiAgICB9O1xufVxuXG5jb25zdCBDb0NyZWF0ZU9ic2VydmVyID0ge1xuICBpbml0VGFza3M6IG5ldyBNYXAoKSxcbiAgYXR0clRhc2tzOiBuZXcgTWFwKCksXG4gIHJ1bGVzOiBuZXcgTWFwKCksXG4gIHJ1bGVzQXJyYXk6IFtdLFxuXG4gIF9faW5pdDogZnVuY3Rpb24oKSB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgY29uc3Qgb2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcigobXV0YXRpb25zTGlzdCwgb2JzZXJ2ZXIpID0+IHNlbGYuX19jYWxsYmFjayhtdXRhdGlvbnNMaXN0LCBvYnNlcnZlcikpO1xuICAgIFxuICAgIC8vIHNldFRpbWVvdXQoKCk9PntcbiAgICBvYnNlcnZlci5vYnNlcnZlKGRvY3VtZW50LmJvZHksIFxuICAgICAge1xuICAgICAgICBhdHRyaWJ1dGVzOiB0cnVlLFxuICAgICAgICBjaGlsZExpc3Q6IHRydWUsXG4gICAgICAgIHN1YnRyZWU6IHRydWUsXG4gICAgICAgIGNoYXJhY3RlckRhdGE6IGZhbHNlLFxuICAgICAgICBhdHRyaWJ1dGVPbGRWYWx1ZTogdHJ1ZSxcbiAgICAgICAgY2hhcmFjdGVyRGF0YTogdHJ1ZSxcbiAgICAgIH1cbiAgICApO1xuICB9LFxuICBcbiAgLy8gaW5pdDogZnVuY3Rpb24oZGF0YSkge1xuICAvLyAgIHRoaXMuYWRkKGRhdGEpO1xuICAvLyB9LFxuICBcbiAgaW5pdDogZnVuY3Rpb24oeyBvYnNlcnZlLCBpbmNsdWRlLCBleGNsdWRlLCBhdHRyaWJ1dGVzLCBuYW1lLCBjYWxsYmFjayB9KSB7XG4gICAgaWYgKG9ic2VydmUuc29tZSh4ID0+IHggPT0gXCJjaGlsZExpc3RcIikpIHtcbiAgICAgIHRoaXMuaW5pdFRhc2tzLnNldChjYWxsYmFjaywgeyBvYnNlcnZlLCBpbmNsdWRlLCBleGNsdWRlLCBhdHRyaWJ1dGVzLCBuYW1lIH0pO1xuICAgIH1cbiAgICBcbiAgICBpZiAob2JzZXJ2ZS5zb21lKHggPT4gIHggPT0gXCJhdHRyaWJ1dGVzXCIpKSB7XG4gICAgICB0aGlzLmF0dHJUYXNrcy5zZXQoY2FsbGJhY2ssIHsgb2JzZXJ2ZSwgaW5jbHVkZSwgZXhjbHVkZSwgYXR0cmlidXRlcywgbmFtZSB9KTtcbiAgICB9XG4gIH0sXG4gIHJlbW92ZTogZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICB0aGlzLmluaXRUYXNrcy5kZWxldGUoY2FsbGJhY2spXG4gICAgdGhpcy5hdHRyVGFza3MuZGVsZXRlKGNhbGxiYWNrKVxuICB9LFxuICBcbiAgYWRkUnVsZTogZnVuY3Rpb24oeyBpbmNsdWRlLCBleGNsdWRlLCBuYW1lIH0pIHtcbiAgICB0aGlzLnJ1bGVzLnNldChuYW1lLCB7aW5jbHVkZSwgZXhjbHVkZX0pO1xuICAgIHRoaXMucnVsZXNBcnJheSA9IEFycmF5LmZyb20odGhpcy5ydWxlcyk7XG4gIH0sXG4gIFxuICByZW1vdmVSdWxlOiBmdW5jdGlvbiAoe25hbWV9KSB7XG4gICAgdGhpcy5ydWxlcy5kZWxldGUobmFtZSk7XG4gICAgdGhpcy5ydWxlc0FycmF5ID0gQXJyYXkuZnJvbSh0aGlzLnJ1bGVzKTtcbiAgfSxcbiAgXG4gIF9fY2FsbGJhY2s6IGZ1bmN0aW9uKG11dGF0aW9uc0xpc3QsIG9ic2VydmVyKSB7XG4gICAgLy8gY29uc29sZS5sb2codGhpcylcbiAgICBmb3IgKGxldCBtdXRhdGlvbiBvZiBtdXRhdGlvbnNMaXN0KSB7XG4gICAgICBpZiAobXV0YXRpb24udHlwZSA9PSBcImNoaWxkTGlzdFwiICYmIG11dGF0aW9uLmFkZGVkTm9kZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAvLy4gcnVuIGluaXQgZnVuY3Rpb25zXG4gICAgICAgIHRoaXMuX19pbml0Q2FsbGJhY2sobXV0YXRpb24pICAgIFxuICAgICAgfVxuICAgICAgXG4gICAgICBpZiAobXV0YXRpb24udHlwZSA9PSBcImF0dHJpYnV0ZXNcIikge1xuICAgICAgICAvLy4gcnVuIGF0dHJpYnV0ZXMgZnVuY3Rpb25zXG4gICAgICAgIHRoaXMuX19hdHRyQ2FsbGJhY2sobXV0YXRpb24pO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgXG4gIF9faW5pdENhbGxiYWNrOiBmdW5jdGlvbihtdXRhdGlvbikge1xuICAgIGxldCBhZGRlZE5vZGVzID0gQXJyYXkuZnJvbShtdXRhdGlvbi5hZGRlZE5vZGVzKTtcbiAgICBcbiAgICB0aGlzLmluaXRUYXNrcy5mb3JFYWNoKCh7b2JzZXJ2ZSwgaW5jbHVkZSwgZXhjbHVkZSwgYXR0cmlidXRlcywgbmFtZX0sIGNhbGxiYWNrKSA9PiB7XG5cbiAgICAgIG11dGF0aW9uLmFkZGVkTm9kZXMuZm9yRWFjaCgoZWwpID0+IHtcbiAgICAgICAgaWYgKCFlbC50YWdOYW1lKSByZXR1cm47XG4gICAgICAgIFxuICAgICAgICBpZiAoaW5jbHVkZSAmJiAhKGVsLm1hdGNoZXMoaW5jbHVkZSkgfHwgZWwucXVlcnlTZWxlY3RvcihpbmNsdWRlKSkpIHtcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfSBcbiAgICAgICAgaWYgKGV4Y2x1ZGUgJiYgKGVsLm1hdGNoZXMoZXhjbHVkZSkgfHwgZWwucXVlcnlTZWxlY3RvcihleGNsdWRlKSkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGlmIChlbC5jcmVhdGVkKSByZXR1cm47XG4gICAgICAgIFxuICAgICAgICBjYWxsYmFjay5hcHBseShudWxsLCBbe3R5cGU6IG11dGF0aW9uLnR5cGUsIHRhcmdldDogZWx9XSk7XG4gICAgICB9KVxuICAgIH0pO1xuICAgIFxuICAgIGFkZGVkTm9kZXMubWFwKGVsID0+IGVsLmNyZWF0ZWQgPSB0cnVlKTtcbiAgfSxcbiAgXG4gIF9fYXR0ckNhbGxiYWNrOiBmdW5jdGlvbihtdXRhdGlvbikge1xuICAgIGZvciAobGV0IFtuYW1lLCB7IGluY2x1ZGUsIGV4Y2x1ZGUgfV0gb2YgdGhpcy5ydWxlc0FycmF5KSB7XG4gICAgICBpZiAoaW5jbHVkZSAmJiAhbXV0YXRpb24udGFyZ2V0Lm1hdGNoZXMoaW5jbHVkZSkpIHJldHVybjtcbiAgICAgIGlmIChleGNsdWRlICYmIG11dGF0aW9uLnRhcmdldC5tYXRjaGVzKGV4Y2x1ZGUpKSByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuYXR0clRhc2tzLmZvckVhY2goKHtvYnNlcnZlLCBpbmNsdWRlLCBleGNsdWRlLCBhdHRyaWJ1dGVzLCBuYW1lfSwgY2FsbGJhY2spID0+IHtcbiAgICAgIGlmIChhdHRyaWJ1dGVzICYmIG11dGF0aW9uLmF0dHJpYnV0ZU5hbWUgJiYgIWF0dHJpYnV0ZXMuaW5jbHVkZXMobXV0YXRpb24uYXR0cmlidXRlTmFtZSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGluY2x1ZGUgJiYgIW11dGF0aW9uLnRhcmdldC5tYXRjaGVzKGluY2x1ZGUpKSByZXR1cm47XG4gICAgICBpZiAoZXhjbHVkZSAmJiBtdXRhdGlvbi50YXJnZXQubWF0Y2hlcyhleGNsdWRlKSkgcmV0dXJuO1xuXG4gICAgICBpZiAobXV0YXRpb24uYXR0cmlidXRlTmFtZSkge1xuICAgICAgICBsZXQgbmV3VmFsdWUgPSBtdXRhdGlvbi50YXJnZXQuZ2V0QXR0cmlidXRlKG11dGF0aW9uLmF0dHJpYnV0ZU5hbWUpO1xuICAgICAgICBpZiAobmV3VmFsdWUgIT0gbXV0YXRpb24ub2xkVmFsdWUpIHtcbiAgICAgICAgICBjYWxsYmFjay5hcHBseShudWxsLCBbbXV0YXRpb25dKTtcbiAgICAgICAgfVxuICAgICAgfSAgICAgIFxuICAgICAgXG4gICAgfSlcbiAgfSxcbiAgXG4gIHNldEluaXRpYWxpemVkOiBmdW5jdGlvbihlbGVtZW50LCB0eXBlKSB7XG5cdFx0Ly8gZWxlbWVudC5zZXRBdHRyaWJ1dGUoYGluaXRpYWxpemVkXyR7dHlwZX1gLCBcInRydWVcIik7XG5cdFx0dHlwZSA9IHR5cGUgfHwgXCJcIjtcblx0XHRsZXQga2V5ID0gXCJjb19pbml0aWFsaXplZF9cIiArIHR5cGU7XG5cdFx0ZWxlbWVudFtrZXldID0gdHJ1ZTtcblx0fSxcblx0XG5cdGdldEluaXRpYWxpemVkOiBmdW5jdGlvbihlbGVtZW50LCB0eXBlKSB7XG5cdFx0dHlwZSA9IHR5cGUgfHwgXCJcIjtcblx0XHRsZXQga2V5ID0gXCJjb19pbml0aWFsaXplZF9cIiArIHR5cGU7XG5cdFx0aWYgKCFlbGVtZW50W2tleV0pIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXHR9XG59XG5cbkNvQ3JlYXRlT2JzZXJ2ZXIuX19pbml0KCk7XG5cblxuZXhwb3J0IGRlZmF1bHQgQ29DcmVhdGVPYnNlcnZlcjsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../CoCreate-observer/src/index.js\n')},"../CoCreate-select/src/adapter.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = void 0;\n\nvar _select = _interopRequireDefault(__webpack_require__(/*! ./select.js */ \"../CoCreate-select/src/select.js\"));\n\nvar _src = __webpack_require__(/*! ../../../CoCreateJS/src */ \"../../CoCreateJS/src/index.js\");\n\nvar _src2 = _interopRequireDefault(__webpack_require__(/*! ../../CoCreate-form/src */ \"../CoCreate-form/src/index.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst SelectAdapter = {\n  init: function () {\n    this.initElement();\n\n    this.__initEvents();\n  },\n  initElement: function (container) {\n    const mainContainer = container || document;\n\n    if (!mainContainer.querySelectorAll) {\n      return;\n    }\n\n    let containerList = mainContainer.querySelectorAll('cocreate-select, div.select--field');\n\n    for (let i = 0; i < containerList.length; i++) {\n      _select.default.__initSelect(containerList[i]);\n\n      this.__initElementEvent(containerList[i]);\n    }\n  },\n  __initEvents: function () {\n    const self = this;\n    document.addEventListener('dndsuccess', function (e) {\n      const {\n        dropedEl,\n        dragedEl\n      } = e.detail;\n\n      if (typeof dropedEl.tagName != 'undefined' && dropedEl.tagName.toLowerCase() == 'cocreate-select' || dropedEl.classList.contains('select--field')) {\n        self.save(dropedEl);\n        dropedEl.dispatchEvent(new CustomEvent('selectedValue'));\n      }\n    });\n    document.addEventListener('CoCreateSelect-save', function (e) {\n      const {\n        detail: {\n          element\n        }\n      } = e;\n\n      if (!element) {\n        return;\n      }\n\n      self.save(element);\n    });\n\n    _src.socket.listen('readDocument', function (data) {\n      if (data.metadata == 'cocreate-select') {\n        _select.default.setValue(data);\n      }\n    });\n\n    _src.socket.listen('updateDocument', function (data) {\n      if (data.metadata == 'cocreate-select') {\n        _select.default.setValue(data);\n      }\n    });\n\n    document.addEventListener('CoCreate-selected', function (e) {\n      const {\n        detail: {\n          element,\n          value\n        }\n      } = e;\n      console.log(e.detail);\n    });\n  },\n  __initElementEvent: function (selectContainer) {\n    const self = this;\n    selectContainer.addEventListener('set-document_id', function () {\n      self.save(this);\n    }); //. fetch logic\n\n    let collection = selectContainer.getAttribute('data-collection') || 'module_activity';\n    let id = selectContainer.getAttribute('data-document_id');\n\n    if (collection && id) {\n      _src.crud.readDocument({\n        'collection': collection,\n        'document_id': id,\n        'metadata': 'cocreate-select'\n      });\n    }\n  },\n  __sendRequest: function (selectContainer) {\n    let collection = selectContainer.getAttribute('data-collection') || 'module_activity';\n    let id = selectContainer.getAttribute('data-document_id');\n\n    if (collection && id) {\n      _src.crud.readDocument({\n        'collection': collection,\n        'document_id': id,\n        'metadata': 'cocreate-select'\n      });\n    }\n  },\n  save: function (element, isStore = true) {\n    let value = _select.default.getValue(element);\n\n    let collection = element.getAttribute('data-collection') || 'module_activity';\n    let id = element.getAttribute('data-document_id');\n    let name = element.getAttribute('name');\n    let realtime = element.getAttribute('data-realtime') || \"true\";\n    if (!name) return;\n    if (realtime != \"true\" && !isStore) return;\n\n    if (element.getAttribute('data-save_value') == 'false') {\n      return;\n    }\n\n    if (!_src2.default.checkID(element)) {\n      _src2.default.request({\n        element,\n        value,\n        nameAttr: \"name\"\n      });\n\n      element.setAttribute('data-document_id', 'pending');\n    } else if (id) {\n      _src.crud.updateDocument({\n        'collection': collection,\n        'document_id': id,\n        'data': {\n          [name]: value\n        },\n        'upsert': true,\n        'metadata': 'cocreate-select'\n      });\n    }\n  }\n};\nvar _default = SelectAdapter;\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../CoCreate-select/src/adapter.js\n")},"../CoCreate-select/src/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = void 0;\n\nvar _select = _interopRequireDefault(__webpack_require__(/*! ./select.js */ \"../CoCreate-select/src/select.js\"));\n\nvar _adapter = _interopRequireDefault(__webpack_require__(/*! ./adapter.js */ \"../CoCreate-select/src/adapter.js\"));\n\nvar _src = _interopRequireDefault(__webpack_require__(/*! ../../CoCreate-observer/src */ \"../CoCreate-observer/src/index.js\"));\n\nvar _src2 = _interopRequireDefault(__webpack_require__(/*! ../../CoCreate-form/src */ \"../CoCreate-form/src/index.js\"));\n\n__webpack_require__(/*! ./CoCreate-select.css */ \"../CoCreate-select/src/CoCreate-select.css\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_adapter.default.init();\n\n_select.default.adapter = _adapter.default;\n\n_src.default.init({\n  name: 'CoCreateSelectAttributes',\n  observe: ['attributes'],\n  attributes: ['data-document_id'],\n  include: 'cocreate-select',\n  callback: function (mutation) {\n    _adapter.default.__sendRequest(mutation.target);\n  }\n});\n\n_src.default.init({\n  name: 'CoCreateSelect',\n  observe: ['subtree', 'childList'],\n  include: 'cocreate-select',\n  callback: function (mutation) {\n    _adapter.default.initElement(mutation.target);\n  }\n});\n\n_src2.default.init({\n  name: 'CoCreateSelect',\n  selector: \"cocreate-select\",\n  callback: function (el) {\n    _adapter.default.save(el);\n  }\n});\n\nvar _default = _select.default;\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS5hdHRyaWJ1dGVzLy4uL0NvQ3JlYXRlLXNlbGVjdC9zcmMvaW5kZXguanM/ZTBlMSJdLCJuYW1lcyI6WyJTZWxlY3RBZGFwdGVyIiwiaW5pdCIsIkNvQ3JlYXRlU2VsZWN0IiwiYWRhcHRlciIsIkNvQ3JlYXRlT2JzZXJ2ZXIiLCJuYW1lIiwib2JzZXJ2ZSIsImF0dHJpYnV0ZXMiLCJpbmNsdWRlIiwiY2FsbGJhY2siLCJtdXRhdGlvbiIsIl9fc2VuZFJlcXVlc3QiLCJ0YXJnZXQiLCJpbml0RWxlbWVudCIsImZvcm0iLCJzZWxlY3RvciIsImVsIiwic2F2ZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOzs7O0FBRUFBLGlCQUFjQyxJQUFkOztBQUNBQyxnQkFBZUMsT0FBZixHQUF5QkgsZ0JBQXpCOztBQUVBSSxhQUFpQkgsSUFBakIsQ0FBc0I7QUFDckJJLE1BQUksRUFBRSwwQkFEZTtBQUVyQkMsU0FBTyxFQUFFLENBQUMsWUFBRCxDQUZZO0FBR3JCQyxZQUFVLEVBQUUsQ0FBQyxrQkFBRCxDQUhTO0FBSXJCQyxTQUFPLEVBQUUsaUJBSlk7QUFLckJDLFVBQVEsRUFBRSxVQUFTQyxRQUFULEVBQW1CO0FBQzVCVixxQkFBY1csYUFBZCxDQUE0QkQsUUFBUSxDQUFDRSxNQUFyQztBQUNBO0FBUG9CLENBQXRCOztBQVVBUixhQUFpQkgsSUFBakIsQ0FBc0I7QUFDckJJLE1BQUksRUFBRSxnQkFEZTtBQUVyQkMsU0FBTyxFQUFFLENBQUMsU0FBRCxFQUFZLFdBQVosQ0FGWTtBQUdyQkUsU0FBTyxFQUFFLGlCQUhZO0FBSXJCQyxVQUFRLEVBQUUsVUFBU0MsUUFBVCxFQUFtQjtBQUM1QlYscUJBQWNhLFdBQWQsQ0FBMEJILFFBQVEsQ0FBQ0UsTUFBbkM7QUFDQTtBQU5vQixDQUF0Qjs7QUFTQUUsY0FBS2IsSUFBTCxDQUFVO0FBQ1RJLE1BQUksRUFBRSxnQkFERztBQUVUVSxVQUFRLEVBQUUsaUJBRkQ7QUFHVE4sVUFBUSxFQUFFLFVBQVNPLEVBQVQsRUFBYTtBQUN0QmhCLHFCQUFjaUIsSUFBZCxDQUFtQkQsRUFBbkI7QUFDQTtBQUxRLENBQVY7O2VBT2VkLGUiLCJmaWxlIjoiLi4vQ29DcmVhdGUtc2VsZWN0L3NyYy9pbmRleC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBDb0NyZWF0ZVNlbGVjdCBmcm9tIFwiLi9zZWxlY3QuanNcIlxuaW1wb3J0IFNlbGVjdEFkYXB0ZXIgZnJvbSBcIi4vYWRhcHRlci5qc1wiXG5pbXBvcnQgQ29DcmVhdGVPYnNlcnZlciBmcm9tICcuLi8uLi9Db0NyZWF0ZS1vYnNlcnZlci9zcmMnO1xuaW1wb3J0IGZvcm0gZnJvbSAnLi4vLi4vQ29DcmVhdGUtZm9ybS9zcmMnXG5pbXBvcnQgJy4vQ29DcmVhdGUtc2VsZWN0LmNzcyc7XG5cblNlbGVjdEFkYXB0ZXIuaW5pdCgpO1xuQ29DcmVhdGVTZWxlY3QuYWRhcHRlciA9IFNlbGVjdEFkYXB0ZXI7XG5cbkNvQ3JlYXRlT2JzZXJ2ZXIuaW5pdCh7IFxuXHRuYW1lOiAnQ29DcmVhdGVTZWxlY3RBdHRyaWJ1dGVzJywgXG5cdG9ic2VydmU6IFsnYXR0cmlidXRlcyddLFxuXHRhdHRyaWJ1dGVzOiBbJ2RhdGEtZG9jdW1lbnRfaWQnXSxcblx0aW5jbHVkZTogJ2NvY3JlYXRlLXNlbGVjdCcsIFxuXHRjYWxsYmFjazogZnVuY3Rpb24obXV0YXRpb24pIHtcblx0XHRTZWxlY3RBZGFwdGVyLl9fc2VuZFJlcXVlc3QobXV0YXRpb24udGFyZ2V0KVxuXHR9XG59KTtcblxuQ29DcmVhdGVPYnNlcnZlci5pbml0KHsgXG5cdG5hbWU6ICdDb0NyZWF0ZVNlbGVjdCcsIFxuXHRvYnNlcnZlOiBbJ3N1YnRyZWUnLCAnY2hpbGRMaXN0J10sXG5cdGluY2x1ZGU6ICdjb2NyZWF0ZS1zZWxlY3QnLCBcblx0Y2FsbGJhY2s6IGZ1bmN0aW9uKG11dGF0aW9uKSB7XG5cdFx0U2VsZWN0QWRhcHRlci5pbml0RWxlbWVudChtdXRhdGlvbi50YXJnZXQpXG5cdH1cbn0pO1xuXG5mb3JtLmluaXQoe1xuXHRuYW1lOiAnQ29DcmVhdGVTZWxlY3QnLFxuXHRzZWxlY3RvcjogXCJjb2NyZWF0ZS1zZWxlY3RcIixcblx0Y2FsbGJhY2s6IGZ1bmN0aW9uKGVsKSB7XG5cdFx0U2VsZWN0QWRhcHRlci5zYXZlKGVsKTtcblx0fVxufSk7XG5leHBvcnQgZGVmYXVsdCBDb0NyZWF0ZVNlbGVjdDtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../CoCreate-select/src/index.js\n")},"../CoCreate-select/src/select.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = void 0;\n\nvar _src = _interopRequireDefault(__webpack_require__(/*! ../../CoCreate-observer/src */ \"../CoCreate-observer/src/index.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst CoCreateSelect = {\n  init: function () {\n    this.initElement(); // this.__initEvents()\n  },\n  initElement: function (container) {\n    const mainContainer = container || document;\n\n    if (!mainContainer.querySelectorAll) {\n      return;\n    }\n\n    let containerList = mainContainer.querySelectorAll('cocreate-select, div.select--field');\n\n    for (let i = 0; i < containerList.length; i++) {\n      let selectContainer = containerList[i];\n\n      this.__initSelect(selectContainer);\n    }\n  },\n  __initEvents: function () {\n    const self = this;\n    document.addEventListener('dndsuccess', function (e) {\n      const {\n        dropedEl,\n        dragedEl\n      } = e.detail;\n\n      if (typeof dropedEl.tagName != 'undefined' && dropedEl.tagName.toLowerCase() == 'cocreate-select' || dropedEl.classList.contains('select--field')) {\n        self.save(dropedEl);\n\n        self.__fireSelectedEvent(dropedEl);\n      }\n    });\n  },\n  __initSelect: function (selectContainer) {\n    if (_src.default.getInitialized(selectContainer, \"cocreate-select\")) {\n      return;\n    }\n\n    _src.default.setInitialized(selectContainer, \"cocreate-select\");\n\n    let input = selectContainer.querySelector('input');\n    let ul_selector = selectContainer.querySelector('ul.selectable--list');\n    const self = this;\n\n    if (input) {\n      input.addEventListener('keydown', function (e) {\n        let keyCode = e.keyCode;\n\n        if (keyCode == 13) {\n          e.preventDefault();\n        }\n\n        if (keyCode == 13 && this.value.length > 0) {\n          self.__selectValue(this.value, selectContainer);\n\n          self.save(selectContainer);\n\n          self.__fireSelectedEvent(selectContainer);\n\n          this.value = '';\n        } else if (keyCode == 8 && !this.value.length) {\n          let selectedItems = selectContainer.querySelectorAll('[selected]');\n\n          if (selectedItems.length > 0) {\n            selectedItems[selectedItems.length - 1].remove();\n            self.save(selectContainer);\n\n            self.__fireSelectedEvent(selectContainer);\n          }\n        }\n      });\n    }\n\n    document.addEventListener('click', function (event) {\n      var isClickInside = selectContainer.contains(event.target);\n\n      if (!isClickInside) {\n        self.__closeDropDown(selectContainer);\n      }\n    });\n    ul_selector.addEventListener('click', function (e) {\n      if (!e.target.matches('li')) {\n        let li = e.target;\n\n        while (typeof li.tagName != 'undefined' && li.tagName.toLowerCase() != 'li') {\n          li = li.parentNode;\n        }\n\n        if (li.classList && li.classList.contains('selectable')) {\n          // check if data exist\n          let value = li.getAttribute('value');\n          let selectValue = self.getValue(selectContainer);\n          if (value == selectValue || selectValue.indexOf(value) > -1) return; /// here emit event\n\n          self.__selectItem(li, selectContainer);\n\n          self.save(selectContainer);\n\n          self.__fireSelectedEvent(selectContainer);\n        }\n      }\n    });\n    selectContainer.addEventListener('click', function (e) {\n      if (e.target.matches('.remove')) {\n        e.target.parentNode.remove();\n        self.save(selectContainer);\n\n        self.__fireSelectedEvent(selectContainer);\n\n        return;\n      }\n\n      if (!ul_selector.classList.contains('open')) {\n        self.__openDropDown(selectContainer);\n      }\n\n      let input = selectContainer.querySelector('input');\n\n      if (input) {\n        input.focus();\n      }\n    }, true);\n  },\n  __openDropDown: function (selectContainer, focus = true) {\n    if (focus) {\n      let input = selectContainer.querySelector('input');\n      let ul_selector = selectContainer.querySelector('ul.selectable--list');\n\n      if (input) {\n        input.classList.add('open');\n        input.focus();\n      }\n\n      if (ul_selector && ul_selector) {\n        ul_selector.classList.add('open');\n      }\n\n      selectContainer.dispatchEvent(new CustomEvent('CoCreateSelect-open'));\n    }\n  },\n  __closeDropDown: function (selectContainer) {\n    let input = selectContainer.querySelector('input');\n    let ul_selector = selectContainer.querySelector('ul.selectable--list');\n\n    if (input && input.classList.contains('open')) {\n      input.classList.remove('open');\n    }\n\n    if (ul_selector && ul_selector.classList.contains('open')) {\n      ul_selector.classList.remove('open');\n      selectContainer.dispatchEvent(new CustomEvent('CoCreateSelect-close'));\n    }\n  },\n  setValue: function (data) {\n    const self = this;\n    let selectContainers = document.querySelectorAll('cocreate-select,.select--field');\n    selectContainers.forEach(selectEl => {\n      const collection = selectEl.getAttribute('data-collection') || 'module_activity';\n      const id = selectEl.getAttribute('data-document_id');\n      const name = selectEl.getAttribute('name');\n\n      if (data['collection'] == collection && data['document_id'] == id && name) {\n        self.__renderValue(selectEl, data['data'][name]);\n      }\n    });\n  },\n  renderValue: function (target, value) {\n    this.__renderValue(target, value);\n  },\n  __renderValue: function (selectContainer, values) {\n    if (!values) {\n      return;\n    }\n\n    let selectedItems = selectContainer.querySelectorAll('[selected]');\n    selectedItems.forEach(item => item.remove());\n    let ul_selector = selectContainer.querySelector('ul.selectable--list');\n\n    if (values && typeof values === 'string') {\n      values = [values];\n    }\n\n    for (let i = 0; i < values.length; i++) {\n      const selectedItem = ul_selector.querySelector(\"li[value='\" + values[i] + \"']\");\n\n      if (selectedItem) {\n        this.__selectItem(selectedItem, selectContainer, false);\n      } else {\n        this.__selectValue(values[i], selectContainer, false);\n      }\n    }\n\n    try {\n      if (CoCreateFloatLabel) {\n        CoCreateFloatLabel.update(selectContainer, values && values.length > 0);\n      }\n    } catch (err) {}\n  },\n  __selectValue: function (value, selectContainer) {\n    let currentValue = this.getValue(selectContainer);\n    if (currentValue == value || currentValue.indexOf(value) > -1) return;\n    let searchInput = selectContainer.querySelector('input');\n    let ul_selector = selectContainer.querySelector('ul.selectable--list');\n    let span = document.createElement('span');\n    span.innerHTML = 'x';\n    span.classList.add('remove');\n    let li = document.createElement('li');\n    li.setAttribute('value', value); // li.setAttribute('data-value', value);\n\n    li.innerHTML = value;\n    li.setAttribute('selected', \"\"); // li.classList.add('selected');\n\n    li.classList.remove('selectable');\n    li.appendChild(span);\n    selectContainer.insertBefore(li, searchInput ? searchInput : ul_selector);\n  },\n  __selectItem: function (li, selectContainer, focus = true) {\n    let type = selectContainer.hasAttribute('multiple') ? 'multiple' : 'single';\n    let searchInput = selectContainer.querySelector('input');\n    let ul_selector = selectContainer.querySelector('ul.selectable--list');\n\n    if (type == 'single') {\n      let selectedItems = selectContainer.querySelectorAll('[selected]');\n      selectedItems.forEach(item => item.remove());\n\n      if (searchInput) {\n        searchInput.value = '';\n      }\n    }\n\n    let span = document.createElement('span');\n    span.innerHTML = 'x';\n    span.classList.add('remove');\n    let selectedItem = li.cloneNode(true); // selectedItem.classList.add('selected');\n\n    selectedItem.setAttribute(\"selected\", \"\");\n    selectedItem.classList.remove('selectable');\n    selectedItem.appendChild(span);\n    selectContainer.insertBefore(selectedItem, searchInput ? searchInput : ul_selector);\n\n    if (type == 'single') {\n      this.__closeDropDown(selectContainer);\n    }\n  },\n  getValue: function (node) {\n    let type = node.hasAttribute('multiple') ? 'multiple' : 'single';\n    let selectedItems = node.querySelectorAll('[selected]');\n    let value = [];\n\n    if (selectedItems.length > 0) {\n      selectedItems.forEach(item => value.push(item.getAttribute('value')));\n    }\n\n    value = type === 'multiple' ? value : value[0] || '';\n    return value;\n  },\n  save: function (selectEl) {\n    if (!selectEl) {\n      return;\n    }\n\n    let event = new CustomEvent('CoCreateSelect-save', {\n      detail: {\n        element: selectEl\n      }\n    });\n    document.dispatchEvent(event);\n  },\n  __fireSelectedEvent: function (element) {\n    element.dispatchEvent(new CustomEvent('selectedValue'));\n    element.dispatchEvent(new CustomEvent('input', {\n      bubbles: true\n    }));\n    let value = this.getValue(element);\n    document.dispatchEvent(new CustomEvent('CoCreate-selected', {\n      detail: {\n        element: element,\n        value: value\n      }\n    }));\n  }\n};\nvar _default = CoCreateSelect;\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../CoCreate-select/src/select.js\n")},"../../CoCreate-plugins/CoCreate-pickr/src/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = void 0;\n\nvar _pickr = _interopRequireDefault(__webpack_require__(/*! @simonwep/pickr */ \"../../CoCreate-plugins/CoCreate-pickr/node_modules/@simonwep/pickr/dist/pickr.min.js\"));\n\nvar _src = _interopRequireDefault(__webpack_require__(/*! ../../../CoCreate-components/CoCreate-observer/src */ \"../CoCreate-observer/src/index.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// Simple example, see optional options for more configuration.\nlet config = {\n  el: null,\n  // will be replaced in observer\n  theme: 'monolith',\n  // or 'monolith', or 'nano'\n  position: 'bottom-start',\n  defaultRepresentation: 'HEX',\n  inline: false,\n  comparison: true,\n  default: '#999999',\n  swatches: ['rgba(244, 67, 54, 1)', 'rgba(233, 30, 99, 0.95)', 'rgba(156, 39, 176, 0.9)', 'rgba(103, 58, 183, 0.85)', 'rgba(63, 81, 181, 0.8)', 'rgba(33, 150, 243, 0.75)', 'rgba(3, 169, 244, 0.7)', 'rgba(0, 188, 212, 0.7)', 'rgba(0, 150, 136, 0.75)', 'rgba(76, 175, 80, 0.8)', 'rgba(139, 195, 74, 0.85)', 'rgba(205, 220, 57, 0.9)', 'rgba(255, 235, 59, 0.95)', 'rgba(255, 193, 7, 1)'],\n  components: {\n    // Main components\n    preview: true,\n    opacity: true,\n    hue: true,\n    // Input / output Options\n    interaction: {\n      hex: true,\n      rgba: true,\n      hsla: true,\n      hsva: true,\n      cmyk: true,\n      input: true,\n      clear: false,\n      save: false\n    }\n  }\n};\n\nconst eventHandler = root => (instance, e, pickr) => {\n  //todofix: what is pickr.disabledEvent??\n  if (instance && !CoCreate.pickr.disabledEvent) {\n    let event = new CustomEvent(\"input\", {\n      bubbles: true,\n      detail: {\n        color: instance.toHEXA().toString()\n      }\n    });\n    pickr.setColor(instance.toHEXA().toString());\n    root.dispatchEvent(event);\n  }\n};\n\nlet refs = new Map();\nconst CoCreatePickr = {\n  refs\n};\n\n_src.default.init({\n  name: \"pickr\",\n  observe: [\"childList\"],\n  // include: \".color-picker\",\n  callback: mutation => {\n    let colorPickers = mutation.target.querySelectorAll('.color-picker');\n    if (colorPickers.length) colorPickers.forEach(p => createPickr(p));\n  }\n});\n\nwindow.addEventListener('load', () => {\n  let colorPickers = document.querySelectorAll('.color-picker');\n  if (colorPickers.length) colorPickers.forEach(p => createPickr(p));\n});\n\nfunction createPickr(p) {\n  // pick attributes\n  let ccAttributes = Array.from(p.attributes).filter(att => att.name.startsWith('data-style')); // if not for cocreate\n\n  if (!ccAttributes.length) return; // set element\n\n  config.el = p; // init and get root\n\n  let pickr = _pickr.default.create(config);\n\n  let root = pickr.getRoot().root; // write attributes\n\n  ccAttributes.forEach(att => {\n    root.setAttribute(att.name, att.value);\n  }); //set ref\n\n  refs.set(root, pickr); //set events\n  // pickr.on('save', eventHandler(root))\n\n  pickr.on('change', eventHandler(root));\n}\n\nvar _default = CoCreatePickr;\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../CoCreate-plugins/CoCreate-pickr/src/index.js\n")},"../../CoCreateJS/src/common-fun.js":(__unused_webpack_module,exports)=>{eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.getCommonParams = getCommonParams;\nexports.getCommonParamsExtend = getCommonParamsExtend;\nexports.generateSocketClient = generateSocketClient;\n\nfunction getCommonParams() {\n  return {\n    "apiKey": config.apiKey,\n    "securityKey": config.securityKey,\n    "organization_id": config.organization_Id\n  };\n}\n\nfunction getCommonParamsExtend(info) {\n  return {\n    "apiKey": info.apiKey || config.apiKey,\n    "securityKey": info.securityKey || config.securityKey,\n    "organization_id": info.organization_id || config.organization_Id\n  };\n}\n\nfunction generateSocketClient(namespace, room) {\n  let ns = namespace || config.organization_Id;\n  let rr = room || \'\';\n\n  if (rr) {\n    return `${ns}/${rr}`;\n  } else {\n    return ns;\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS5hdHRyaWJ1dGVzLy4uL0NvQ3JlYXRlSlMvc3JjL2NvbW1vbi1mdW4uanM/Yjg5ZiJdLCJuYW1lcyI6WyJnZXRDb21tb25QYXJhbXMiLCJjb25maWciLCJhcGlLZXkiLCJzZWN1cml0eUtleSIsIm9yZ2FuaXphdGlvbl9JZCIsImdldENvbW1vblBhcmFtc0V4dGVuZCIsImluZm8iLCJvcmdhbml6YXRpb25faWQiLCJnZW5lcmF0ZVNvY2tldENsaWVudCIsIm5hbWVzcGFjZSIsInJvb20iLCJucyIsInJyIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSxTQUFTQSxlQUFULEdBQ0E7QUFDRSxTQUFPO0FBQ0wsY0FBb0JDLE1BQU0sQ0FBQ0MsTUFEdEI7QUFFTCxtQkFBb0JELE1BQU0sQ0FBQ0UsV0FGdEI7QUFHTCx1QkFBb0JGLE1BQU0sQ0FBQ0c7QUFIdEIsR0FBUDtBQUtEOztBQUVELFNBQVNDLHFCQUFULENBQStCQyxJQUEvQixFQUNBO0FBQ0UsU0FBTztBQUNMLGNBQW9CQSxJQUFJLENBQUNKLE1BQUwsSUFBZUQsTUFBTSxDQUFDQyxNQURyQztBQUVMLG1CQUFvQkksSUFBSSxDQUFDSCxXQUFMLElBQW9CRixNQUFNLENBQUNFLFdBRjFDO0FBR0wsdUJBQW9CRyxJQUFJLENBQUNDLGVBQUwsSUFBd0JOLE1BQU0sQ0FBQ0c7QUFIOUMsR0FBUDtBQUtEOztBQUVELFNBQVNJLG9CQUFULENBQStCQyxTQUEvQixFQUEwQ0MsSUFBMUMsRUFDQTtBQUNFLE1BQUlDLEVBQUUsR0FBR0YsU0FBUyxJQUFJUixNQUFNLENBQUNHLGVBQTdCO0FBQ0EsTUFBSVEsRUFBRSxHQUFHRixJQUFJLElBQUksRUFBakI7O0FBQ0EsTUFBSUUsRUFBSixFQUFRO0FBQ04sV0FBUSxHQUFFRCxFQUFHLElBQUdDLEVBQUcsRUFBbkI7QUFDRCxHQUZELE1BRU87QUFDTCxXQUFPRCxFQUFQO0FBQ0Q7QUFDRiIsImZpbGUiOiIuLi8uLi9Db0NyZWF0ZUpTL3NyYy9jb21tb24tZnVuLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gZ2V0Q29tbW9uUGFyYW1zKCkgXG57XG4gIHJldHVybiB7XG4gICAgXCJhcGlLZXlcIjogICAgICAgICAgIGNvbmZpZy5hcGlLZXksXG4gICAgXCJzZWN1cml0eUtleVwiOiAgICAgIGNvbmZpZy5zZWN1cml0eUtleSxcbiAgICBcIm9yZ2FuaXphdGlvbl9pZFwiOiAgY29uZmlnLm9yZ2FuaXphdGlvbl9JZCxcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRDb21tb25QYXJhbXNFeHRlbmQoaW5mbykgXG57XG4gIHJldHVybiB7XG4gICAgXCJhcGlLZXlcIjogICAgICAgICAgIGluZm8uYXBpS2V5IHx8IGNvbmZpZy5hcGlLZXksXG4gICAgXCJzZWN1cml0eUtleVwiOiAgICAgIGluZm8uc2VjdXJpdHlLZXkgfHwgY29uZmlnLnNlY3VyaXR5S2V5LFxuICAgIFwib3JnYW5pemF0aW9uX2lkXCI6ICBpbmZvLm9yZ2FuaXphdGlvbl9pZCB8fCBjb25maWcub3JnYW5pemF0aW9uX0lkLFxuICB9XG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlU29ja2V0Q2xpZW50IChuYW1lc3BhY2UsIHJvb20pIFxue1xuICBsZXQgbnMgPSBuYW1lc3BhY2UgfHwgY29uZmlnLm9yZ2FuaXphdGlvbl9JZFxuICBsZXQgcnIgPSByb29tIHx8ICcnO1xuICBpZiAocnIpIHtcbiAgICByZXR1cm4gYCR7bnN9LyR7cnJ9YFxuICB9IGVsc2Uge1xuICAgIHJldHVybiBucztcbiAgfVxufVxuXG5leHBvcnQge2dldENvbW1vblBhcmFtcywgZ2V0Q29tbW9uUGFyYW1zRXh0ZW5kLCBnZW5lcmF0ZVNvY2tldENsaWVudH07Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../CoCreateJS/src/common-fun.js\n')},"../../CoCreateJS/src/core.js":(__unused_webpack_module,exports)=>{eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = core;\n// ***********   define variables end ***************** /// \nconst CoCreateCore = {\n  socketInitFuncs: [],\n  moduleSelectors: [],\n  socket: null,\n  host: 'server.cocreate.app',\n  setSocket: function (socket) {\n    this.socket = socket;\n  },\n  init: function (host, namespace) {\n    if (host) {\n      this.host = host;\n    }\n\n    this.__setConfig();\n\n    this.createGeneralSocket(host, namespace || config.organization_Id);\n    this.initSocketListener();\n    this.createUserSocket(host);\n  },\n  __setConfig: function () {\n    let orgId = window.localStorage.getItem('organization_id');\n    let securityKey = window.localStorage.getItem('securityKey');\n    let apiKey = window.localStorage.getItem('apiKey');\n    if (orgId) config['organization_Id'] = orgId;\n    if (apiKey) config['apiKey'] = apiKey;\n    if (securityKey) config['securityKey'] = securityKey;\n  },\n  initSocketListener: function () {\n    const self = this;\n    this.socket.listen('connect', function (data, room) {\n      if (room == self.socket.getGlobalScope()) {\n        self.socketInitFuncs.forEach(func => {\n          func.initFunc.call(func.instance);\n        });\n      }\n    });\n    this.socket.listen('readDocument', function (data) {\n      const metadata = data.metadata; // if (metadata && metadata.type == 'crdt') {\n      //   self.initRenderCrdtData(data);\n      // } else {\n      //   // self.renderModules(data)\n      // }\n\n      return data;\n    });\n    this.socket.listen('updateDocument', function (data) {// self.renderModules(data)\n    });\n    this.socket.listen('deletedDocument', function (data) {\n      console.log(data);\n    });\n    this.socket.listen('sendMessage', function (data) {\n      console.log(data);\n    });\n    this.listenMessage('downloadFileInfo', function (data) {\n      self.socket.saveFileName = data.file_name;\n    });\n  },\n  createUserSocket: function (host) {\n    var user_id = window.localStorage.getItem('user_id');\n\n    if (user_id) {\n      this.socket.create({\n        namespace: 'users',\n        room: user_id,\n        host: host\n      });\n    }\n  },\n  createGeneralSocket: function (host, namespace) {\n    if (namespace) {\n      this.socket.create({\n        namespace: namespace,\n        room: null,\n        host: host\n      });\n      this.socket.setGlobalScope(namespace);\n    } else {\n      this.socket.create({\n        namespace: null,\n        room: null,\n        host: host\n      });\n    }\n  },\n  registerInit: function (initFunc, instance) {\n    this.socketInitFuncs.push({\n      initFunc,\n      instance: instance || window\n    });\n  },\n  // registerSelector: function(selector) {\n  //   if (this.moduleSelectors.indexOf(selector) === -1) {\n  //     this.moduleSelectors.push(selector);\n  //   }\n  // },\n  // getSelectors: function(selector) {\n  //   return this.moduleSelectors.join(\",\");\n  // },\n  listenMessage: function (message, fun) {\n    this.socket.listen(message, fun);\n  },\n  createSocket: function (config) {\n    this.socket.create(config);\n  },\n  destroySocket: function (config) {\n    const {\n      namespace,\n      room\n    } = config;\n    const key = this.socket.getKey(namespace, room);\n    let socket = this.socket.sockets.get(key);\n\n    if (!socket) {\n      return;\n    }\n\n    this.socket.destroy(socket, key);\n  }\n};\n\nfunction core(socket) {\n  CoCreateCore.setSocket(socket);\n  return CoCreateCore;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS5hdHRyaWJ1dGVzLy4uL0NvQ3JlYXRlSlMvc3JjL2NvcmUuanM/Y2QxYSJdLCJuYW1lcyI6WyJDb0NyZWF0ZUNvcmUiLCJzb2NrZXRJbml0RnVuY3MiLCJtb2R1bGVTZWxlY3RvcnMiLCJzb2NrZXQiLCJob3N0Iiwic2V0U29ja2V0IiwiaW5pdCIsIm5hbWVzcGFjZSIsIl9fc2V0Q29uZmlnIiwiY3JlYXRlR2VuZXJhbFNvY2tldCIsImNvbmZpZyIsIm9yZ2FuaXphdGlvbl9JZCIsImluaXRTb2NrZXRMaXN0ZW5lciIsImNyZWF0ZVVzZXJTb2NrZXQiLCJvcmdJZCIsIndpbmRvdyIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJzZWN1cml0eUtleSIsImFwaUtleSIsInNlbGYiLCJsaXN0ZW4iLCJkYXRhIiwicm9vbSIsImdldEdsb2JhbFNjb3BlIiwiZm9yRWFjaCIsImZ1bmMiLCJpbml0RnVuYyIsImNhbGwiLCJpbnN0YW5jZSIsIm1ldGFkYXRhIiwiY29uc29sZSIsImxvZyIsImxpc3Rlbk1lc3NhZ2UiLCJzYXZlRmlsZU5hbWUiLCJmaWxlX25hbWUiLCJ1c2VyX2lkIiwiY3JlYXRlIiwic2V0R2xvYmFsU2NvcGUiLCJyZWdpc3RlckluaXQiLCJwdXNoIiwibWVzc2FnZSIsImZ1biIsImNyZWF0ZVNvY2tldCIsImRlc3Ryb3lTb2NrZXQiLCJrZXkiLCJnZXRLZXkiLCJzb2NrZXRzIiwiZ2V0IiwiZGVzdHJveSIsImNvcmUiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBRUEsTUFBTUEsWUFBWSxHQUFHO0FBQ25CQyxpQkFBZSxFQUFFLEVBREU7QUFFbkJDLGlCQUFlLEVBQUUsRUFGRTtBQUduQkMsUUFBTSxFQUFFLElBSFc7QUFJbkJDLE1BQUksRUFBRSxxQkFKYTtBQU1uQkMsV0FBUyxFQUFFLFVBQVNGLE1BQVQsRUFBaUI7QUFDMUIsU0FBS0EsTUFBTCxHQUFjQSxNQUFkO0FBQ0QsR0FSa0I7QUFXbkJHLE1BQUks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QUsxQyxNQUFMLENBQVkyQyxNQUFaLENBQW1CdkMsU0FBbkIsRUFBOEJnQixJQUE5QixDQUFaO0FBQ0EsUUFBSXBCLE1BQU0sR0FBRyxLQUFLQSxNQUFMLENBQVk0QyxPQUFaLENBQW9CQyxHQUFwQixDQUF3QkgsR0FBeEIsQ0FBYjs7QUFFQSxRQUFJLENBQUMxQyxNQUFMLEVBQWE7QUFDWDtBQUNEOztBQUNELFNBQUtBLE1BQUwsQ0FBWThDLE9BQVosQ0FBb0I5QyxNQUFwQixFQUE0QjBDLEdBQTVCO0FBQ0Q7QUFySW1CLENBQXJCOztBQXdJZSxTQUFTSyxJQUFULENBQWMvQyxNQUFkLEVBQXNCO0FBQ25DSCxjQUFZLENBQUNLLFNBQWIsQ0FBdUJGLE1BQXZCO0FBQ0EsU0FBT0gsWUFBUDtBQUNEIiwiZmlsZSI6Ii4uLy4uL0NvQ3JlYXRlSlMvc3JjL2NvcmUuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyAqKioqKioqKioqKiAgIGRlZmluZSB2YXJpYWJsZXMgZW5kICoqKioqKioqKioqKioqKioqIC8vLyBcblxuY29uc3QgQ29DcmVhdGVDb3JlID0ge1xuICBzb2NrZXRJbml0RnVuY3M6IFtdLFxuICBtb2R1bGVTZWxlY3RvcnM6IFtdLFxuICBzb2NrZXQ6IG51bGwsXG4gIGhvc3Q6ICdzZXJ2ZXIuY29jcmVhdGUuYXBwJyxcbiAgXG4gIHNldFNvY2tldDogZnVuY3Rpb24oc29ja2V0KSB7XG4gICAgdGhpcy5zb2NrZXQgPSBzb2NrZXQ7XG4gIH0sXG5cbiAgXG4gIGluaXQ6IGZ1bmN0aW9uKGhvc3QsIG5hbWVzcGFjZSkge1xuICAgIGlmIChob3N0KSB7XG4gICAgICB0aGlzLmhvc3QgPSBob3N0O1xuICAgIH1cbiAgICBcbiAgICB0aGlzLl9fc2V0Q29uZmlnKClcbiAgICB0aGlzLmNyZWF0ZUdlbmVyYWxTb2NrZXQoaG9zdCwgbmFtZXNwYWNlIHx8IGNvbmZpZy5vcmdhbml6YXRpb25fSWQpO1xuICAgIHRoaXMuaW5pdFNvY2tldExpc3RlbmVyKCk7XG4gICAgdGhpcy5jcmVhdGVVc2VyU29ja2V0KGhvc3QpO1xuICB9LFxuICBcbiAgX19zZXRDb25maWc6IGZ1bmN0aW9uKCkge1xuXHRcdGxldCBvcmdJZCA9IHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnb3JnYW5pemF0aW9uX2lkJyk7XG5cdFx0bGV0IHNlY3VyaXR5S2V5ID0gd2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKCdzZWN1cml0eUtleScpO1xuXHRcdGxldCBhcGlLZXkgPSB3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2FwaUtleScpO1xuXHRcdFxuXHRcdGlmIChvcmdJZCkgICAgICAgIGNvbmZpZ1snb3JnYW5pemF0aW9uX0lkJ10gPSBvcmdJZFxuXHRcdGlmIChhcGlLZXkpICAgICAgIGNvbmZpZ1snYXBpS2V5J10gPSBhcGlLZXlcblx0XHRpZiAoc2VjdXJpdHlLZXkpICBjb25maWdbJ3NlY3VyaXR5S2V5J10gPSBzZWN1cml0eUtleTtcbiAgfSxcbiAgXG4gIGluaXRTb2NrZXRMaXN0ZW5lcjogZnVuY3Rpb24oKSB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgXG4gICAgdGhpcy5zb2NrZXQubGlzdGVuKCdjb25uZWN0JywgZnVuY3Rpb24gKGRhdGEsIHJvb20pIHtcbiAgICAgIFxuICAgICAgaWYgKHJvb20gPT0gc2VsZi5zb2NrZXQuZ2V0R2xvYmFsU2NvcGUoKSkge1xuICAgICAgICBzZWxmLnNvY2tldEluaXRGdW5jcy5mb3JFYWNoKChmdW5jKSA9PiB7XG4gICAgICAgICAgZnVuYy5pbml0RnVuYy5jYWxsKGZ1bmMuaW5zdGFuY2UpO1xuICAgICAgICB9KVxuICAgICAgfVxuICAgIH0pXG4gICAgXG4gICAgdGhpcy5zb2NrZXQubGlzdGVuKCdyZWFkRG9jdW1lbnQnLCBmdW5jdGlvbihkYXRhKXtcbiAgICAgIGNvbnN0IG1ldGFkYXRhID0gZGF0YS5tZXRhZGF0YTtcbiAgICAgIC8vIGlmIChtZXRhZGF0YSAmJiBtZXRhZGF0YS50eXBlID09ICdjcmR0Jykge1xuICAgICAgLy8gICBzZWxmLmluaXRSZW5kZXJDcmR0RGF0YShkYXRhKTtcbiAgICAgIC8vIH0gZWxzZSB7XG4gICAgICAvLyAgIC8vIHNlbGYucmVuZGVyTW9kdWxlcyhkYXRhKVxuICAgICAgLy8gfVxuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfSlcbiAgICBcbiAgICB0aGlzLnNvY2tldC5saXN0ZW4oJ3VwZGF0ZURvY3VtZW50JywgZnVuY3Rpb24oZGF0YSkge1xuICAgICAgLy8gc2VsZi5yZW5kZXJNb2R1bGVzKGRhdGEpXG4gICAgfSlcbiAgICBcbiAgICB0aGlzLnNvY2tldC5saXN0ZW4oJ2RlbGV0ZWREb2N1bWVudCcsIGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgIGNvbnNvbGUubG9nKGRhdGEpO1xuICAgIH0pXG4gICAgXG4gICAgdGhpcy5zb2NrZXQubGlzdGVuKCdzZW5kTWVzc2FnZScsIGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgIGNvbnNvbGUubG9nKGRhdGEpO1xuICAgIH0pXG4gICAgXG4gICAgdGhpcy5saXN0ZW5NZXNzYWdlKCdkb3dubG9hZEZpbGVJbmZvJywgZnVuY3Rpb24oZGF0YSkge1xuICAgICAgc2VsZi5zb2NrZXQuc2F2ZUZpbGVOYW1lID0gZGF0YS5maWxlX25hbWU7XG4gICAgfSlcbiAgICBcbiAgfSxcbiAgXG4gIGNyZWF0ZVVzZXJTb2NrZXQ6IGZ1bmN0aW9uKGhvc3QpIHtcbiAgICB2YXIgdXNlcl9pZCA9IHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndXNlcl9pZCcpO1xuICAgIGlmICh1c2VyX2lkKSB7XG4gICAgICB0aGlzLnNvY2tldC5jcmVhdGUoe1xuICAgICAgICBuYW1lc3BhY2U6ICd1c2VycycsXG4gICAgICAgIHJvb206IHVzZXJfaWQsXG4gICAgICAgIGhvc3Q6IGhvc3RcbiAgICAgIH0pXG4gICAgfVxuICB9LFxuICBcbiAgY3JlYXRlR2VuZXJhbFNvY2tldDogZnVuY3Rpb24oaG9zdCwgbmFtZXNwYWNlKSB7XG4gICAgaWYgKG5hbWVzcGFjZSkge1xuICAgIFx0dGhpcy5zb2NrZXQuY3JlYXRlKHtcbiAgICBcdCAgbmFtZXNwYWNlOiBuYW1lc3BhY2UsIFxuICAgIFx0ICByb29tOiBudWxsLFxuICAgIFx0ICBob3N0OiBob3N0XG4gICAgXHR9KTtcbiAgICBcdHRoaXMuc29ja2V0LnNldEdsb2JhbFNjb3BlKG5hbWVzcGFjZSk7XG4gICAgfSBlbHNlIHtcbiAgICBcdHRoaXMuc29ja2V0LmNyZWF0ZSh7XG4gICAgXHQgIG5hbWVzcGFjZTogbnVsbCwgXG4gICAgXHQgIHJvb206IG51bGwsXG4gICAgXHQgIGhvc3Q6IGhvc3RcbiAgICBcdH0pO1xuICAgIH1cbiAgfSxcbiAgXG4gIHJlZ2lzdGVySW5pdDogZnVuY3Rpb24oaW5pdEZ1bmMsIGluc3RhbmNlKSB7XG4gICAgdGhpcy5zb2NrZXRJbml0RnVuY3MucHVzaCh7XG4gICAgICBpbml0RnVuYyxcbiAgICAgIGluc3RhbmNlIDogaW5zdGFuY2UgfHwgd2luZG93XG4gICAgfSk7XG4gIH0sXG4gIC8vIHJlZ2lzdGVyU2VsZWN0b3I6IGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gIC8vICAgaWYgKHRoaXMubW9kdWxlU2VsZWN0b3JzLmluZGV4T2Yoc2VsZWN0b3IpID09PSAtMSkge1xuICAvLyAgICAgdGhpcy5tb2R1bGVTZWxlY3RvcnMucHVzaChzZWxlY3Rvcik7XG4gIC8vICAgfVxuICAvLyB9LFxuICBcbiAgLy8gZ2V0U2VsZWN0b3JzOiBmdW5jdGlvbihzZWxlY3Rvcikge1xuICAvLyAgIHJldHVybiB0aGlzLm1vZHVsZVNlbGVjdG9ycy5qb2luKFwiLFwiKTtcbiAgLy8gfSxcblxuICBsaXN0ZW5NZXNzYWdlOiBmdW5jdGlvbihtZXNzYWdlLCBmdW4pIHtcbiAgICB0aGlzLnNvY2tldC5saXN0ZW4obWVzc2FnZSwgZnVuKTtcbiAgfSxcbiBcbiBjcmVhdGVTb2NrZXQ6IGZ1bmN0aW9uKGNvbmZpZykge1xuICAgdGhpcy5zb2NrZXQuY3JlYXRlKGNvbmZpZyk7XG4gfSxcbiBcbiBkZXN0cm95U29ja2V0OiBmdW5jdGlvbihjb25maWcpIHtcbiAgIGNvbnN0IHtuYW1lc3BhY2UsIHJvb219ID0gY29uZmlnO1xuICAgY29uc3Qga2V5ID0gdGhpcy5zb2NrZXQuZ2V0S2V5KG5hbWVzcGFjZSwgcm9vbSk7XG4gICBsZXQgc29ja2V0ID0gdGhpcy5zb2NrZXQuc29ja2V0cy5nZXQoa2V5KTtcbiAgIFxuICAgaWYgKCFzb2NrZXQpIHtcbiAgICAgcmV0dXJuXG4gICB9XG4gICB0aGlzLnNvY2tldC5kZXN0cm95KHNvY2tldCwga2V5KTtcbiB9LFxufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb3JlKHNvY2tldCkge1xuICBDb0NyZWF0ZUNvcmUuc2V0U29ja2V0KHNvY2tldCk7XG4gIHJldHVybiBDb0NyZWF0ZUNvcmU7XG59XG5cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../../CoCreateJS/src/core.js\n")},"../../CoCreateJS/src/crud.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = CRUD;\n\nvar _commonFun = __webpack_require__(/*! ./common-fun.js */ \"../../CoCreateJS/src/common-fun.js\");\n\nvar _utilsCrud = _interopRequireDefault(__webpack_require__(/*! ./utils.crud.js */ \"../../CoCreateJS/src/utils.crud.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// ***********   define variables end ***************** /// \nvar data = {\n  \"org_id\": \"xxx\",\n  \"customer.name\": \"Jin\",\n  \"customer.fristname\": \"Jin\",\n  \"customer.lastname\": \"CF\",\n  \"customer.address.line1\": \"line1\",\n  \"customer.address.line2\": \"line2\",\n  'scope[0]': 'testing',\n  'scope[1]': '---',\n  \"customer.orders[0]\": 123,\n  \"customer.orders[1]\": 243\n};\nvar obj = {\n  test: {\n    \"name\": '123',\n    \"address\": 'address',\n    \"customer\": {\n      \"name\": 'tttt'\n    },\n    \"orders\": [1, 2, 3]\n  }\n};\nconsole.log('----- convert object -----');\nconsole.log(_utilsCrud.default.decodeObject(data));\nconsole.log(_utilsCrud.default.encodeObject(obj));\nconst CoCreateCRUD = {\n  socket: null,\n  setSocket: function (socket) {\n    this.socket = socket;\n  },\n\n  /*\n   \n    CoCreate.crud.readDcoumentList {\n      collection: \"modules\",\n      element: \"xxxx\",\n      metadata: \"\",\n      operator: {\n        fetch: {\n          name: 'xxxx',\n          value: 'xxxxx'\n        },\n        filters: [{\n          name: 'field1',\n          operator: \"contain | range | eq | ne | lt | lte | gt | gte | in | nin\",\n          value: [v1, v2, ...]\n        }, {\n          name: \"_id\",\n          opreator: \"in\",\n          value: [\"id1\"]\n        }, {\n          ....\n        }],\n        orders: [{\n          name: 'field-x',\n          type: 1 | -1\n        }],\n        search: {\n          type: 'or | and',\n          value: [value1, value2]\n        },\n        \n        startIndex: 0 (integer),\n        count: 0 (integer)\n      },\n      \n      is_collection: true | false,\n      //. case fetch document case\n      created_ids : [id1, id2, ...],\n      \n      \n      -------- additional response data -----------\n      data: [] // array\n    }\n  */\n  readDocumentList(info) {\n    if (!info) return;\n    let request_data = (0, _commonFun.getCommonParams)();\n\n    if (!info.collection || !info.operator) {\n      return;\n    }\n\n    request_data = { ...request_data,\n      ...info\n    };\n    this.socket.send('readDocumentList', request_data);\n  },\n\n  /*\n  CoCreate.crud.createDocument({\n    namespace:'',\n    room:'',\n    broadcast: true/false, (default=ture)\n    broadcast_sender: true/false, (default=true) \n    \n    collection: \"test123\",\n    data:{\n    \tname1:“hello”,\n    \tname2:  “hello1”\n    },\n    element: “xxxx”,\n    metaData: \"xxxx\"\n  }),\n  */\n  // data param needs organization_id field added to pass security check\n  createDocument: function (info) {\n    if (info === null) {\n      return;\n    }\n\n    let request_data = (0, _commonFun.getCommonParams)();\n    request_data['collection'] = info['collection'] || 'module_activities';\n    let data = info.data || {};\n\n    if (!data['organization_id']) {\n      data['organization_id'] = config.organization_Id;\n    }\n\n    if (info['data']) {\n      data = { ...data,\n        ...info['data']\n      };\n    } //. rebuild data\n\n\n    request_data['data'] = data;\n\n    if (info['metadata']) {\n      request_data['metadata'] = info['metadata'];\n    }\n\n    request_data['element'] = info['element'];\n    /** socket parameters **/\n    // if (info['broadcast'] === undefined) {\n    //   request_data['broadcast'] = true;\n    // }\n    // if (info['broadcast_sender'] === undefined) {\n    //   request_data['broadcast_sender'] = true;\n    // }\n\n    const room = (0, _commonFun.generateSocketClient)(info.namespace, info.room);\n    this.socket.send('createDocument', request_data, room);\n  },\n\n  /*\n  CoCreate.crud.updateDocument({\n    namespace: '',\n    room: '',\n    broadcast: true/false,\n    broadcast_sender: true/false,\n    \n    collection: \"test123\",\n    document_id: \"document_id\",\n    data:{\n    \tname1:“hello”,\n    \tname2:  “hello1”\n    },\n    delete_fields:[\"name3\", \"name4\"],\n    element: “xxxx”,\n    metaData: \"xxxx\"\n  }),\n  */\n  updateDocument: function (info) {\n    if (!info || !info['document_id']) return;\n    let request_data = (0, _commonFun.getCommonParamsExtend)(info);\n    request_data['collection'] = info['collection'] || 'module_activities';\n    request_data['document_id'] = info['document_id'];\n\n    if (typeof info['data'] === 'object') {\n      request_data['set'] = info['data'];\n    }\n\n    if (Array.isArray(info['delete_fields'])) request_data['unset'] = info['delete_fields'];\n    if (!request_data['set'] && !request_data['unset']) return;\n    request_data['element'] = info['element'];\n    request_data['metadata'] = info['metadata'];\n\n    if (info.upsert) {\n      request_data['upsert'] = true;\n    }\n\n    if (info.broadcast === false) {\n      request_data['broadcast'] = false;\n    }\n    /** socket parameters **/\n    // if (info['broadcast'] === undefined) {\n    //   request_data['broadcast'] = true;\n    // }\n\n\n    request_data['broadcast_sender'] = info.broadcast_sender;\n\n    if (info['broadcast_sender'] === undefined) {\n      request_data['broadcast_sender'] = true;\n    }\n\n    const room = (0, _commonFun.generateSocketClient)(info.namespace, info.room);\n    this.socket.send('updateDocument', request_data, room);\n  },\n\n  /*\n  CoCreate.crud.readDocument({\n    collection: \"test123\",\n    document_id: \"document_id\",\n    element: “xxxx”,\n    metaData: \"xxxx\",\n    exclude_fields: [] \n  }),\n  */\n  readDocument: function (info) {\n    if (info === null) {\n      return;\n    }\n\n    if (!info['document_id'] || !info) {\n      return;\n    }\n\n    let request_data = (0, _commonFun.getCommonParams)();\n    request_data['collection'] = info['collection'];\n    request_data['document_id'] = info['document_id'];\n\n    if (info['exclude_fields']) {\n      request_data['exclude_fields'] = info['exclude_fields'];\n    }\n\n    if (info['element']) {\n      request_data['element'] = info['element'];\n    }\n\n    request_data['metadata'] = info['metadata'];\n    this.socket.send('readDocument', request_data);\n  },\n\n  /*\n  CoCreate.crud.deleteDocument({\n    namespace: '',\n    room: '',\n    broadcast: true/false,\n    broadcast_sender: true/false,\n    \n    collection: \"module\",\n    document_id: \"\",\n    element: “xxxx”,\n    metadata: \"xxxx\"\n  }),\n  */\n  deleteDocument: function (info) {\n    if (!info['document_id'] || !info) {\n      return;\n    }\n\n    let request_data = (0, _commonFun.getCommonParams)();\n    request_data['collection'] = info['collection'];\n    request_data['document_id'] = info['document_id'];\n\n    if (info['element']) {\n      request_data['element'] = info['element'];\n    }\n\n    request_data['metadata'] = info['metadata'];\n    /** socket parameters **/\n    // if (info['broadcast'] === undefined) {\n    //   request_data['broadcast'] = true;\n    // }\n    // if (info['broadcast_sender'] === undefined) {\n    //   request_data['broadcast_sender'] = true;\n    // }\n\n    const room = (0, _commonFun.generateSocketClient)(info.namespace, info.room);\n    this.socket.send('deleteDocument', request_data, room);\n  },\n\n  /** export / import db functions **/\n\n  /*\n  readDocument({\n   collection: \"test123\",\n   element: “xxxx”,\n   metaData: \"xxxx\",\n  }),\n  */\n  exportCollection: function (info) {\n    if (info === null) {\n      return;\n    }\n\n    let request_data = (0, _commonFun.getCommonParams)();\n    request_data['collection'] = info['collection'];\n    request_data['export_type'] = info['export_type'];\n    request_data['metadata'] = info['metadata'];\n    this.socket.send('exportDB', request_data);\n  },\n\n  /*\n  readDocument({\n    collection: \"test123\",\n    file: file\n  }),\n  */\n  importCollection: function (info) {\n    const {\n      file\n    } = info;\n\n    if (info === null || !(file instanceof File)) {\n      return;\n    }\n\n    const extension = file.name.split(\".\").pop();\n\n    if (!['json', 'csv'].some(item => item === extension)) {\n      return;\n    }\n\n    let request_data = (0, _commonFun.getCommonParams)();\n    request_data['collection'] = info['collection'];\n    request_data['import_type'] = extension;\n    this.socket.send('importDB', request_data);\n    this.socket.sendFile(file);\n  },\n  //. message listener\n  listenMessage: function (message, fun) {\n    this.socket.listen(message, fun);\n  },\n  listenerReadDocument: function (fun) {\n    this.socket.listen(\"readDocument\", fun);\n  },\n  listenerCreateDocument: function (fun) {\n    this.socket.listen(\"createDocument\", fun);\n  },\n  listenerDeleteDocument: function (fun) {\n    this.socket.listen(\"deleteDocument\", fun);\n  },\n  listenerUpdateDocument: function (fun) {\n    this.socket.listen(\"updateDocument\", fun);\n  },\n  listenerReadDocumentList: function (fun) {\n    this.socket.listen(\"readDocumentList\", fun);\n  }\n};\n\nfunction CRUD(socket) {\n  CoCreateCRUD.setSocket(socket);\n  return CoCreateCRUD;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../CoCreateJS/src/crud.js\n")},"../../CoCreateJS/src/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.addComponent = addComponent;\nexports.removeComponent = removeComponent;\nexports.utils = exports.message = exports.crud = exports.socketApi = exports.socket = exports.core = void 0;\n\nvar _socket = _interopRequireDefault(__webpack_require__(/*! ./socket.js */ "../../CoCreateJS/src/socket.js"));\n\nvar _crud = _interopRequireDefault(__webpack_require__(/*! ./crud.js */ "../../CoCreateJS/src/crud.js"));\n\nvar _core = _interopRequireDefault(__webpack_require__(/*! ./core.js */ "../../CoCreateJS/src/core.js"));\n\nvar utils = _interopRequireWildcard(__webpack_require__(/*! ./utils.js */ "../../CoCreateJS/src/utils.js"));\n\nexports.utils = utils;\n\nvar _message = _interopRequireDefault(__webpack_require__(/*! ./message.js */ "../../CoCreateJS/src/message.js"));\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*global window*/\n// import CRDT from "./crdt.js"\nlet socket = new _socket.default(\'ws\');\nexports.socket = socket;\nlet socketApi = new _socket.default(\'api\');\nexports.socketApi = socketApi;\nlet core = (0, _core.default)(socket);\nexports.core = core;\nlet crud = (0, _crud.default)(socket);\nexports.crud = crud;\nlet message = (0, _message.default)(socket);\nexports.message = message;\ncore.init(window.config.host ? window.config.host : \'server.cocreate.app\');\n\nfunction addComponent(key, component) {\n  this[key] = component;\n}\n\nfunction removeComponent(key) {\n  if (this[key]) {}\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS5hdHRyaWJ1dGVzLy4uL0NvQ3JlYXRlSlMvc3JjL2luZGV4LmpzPzI4OWEiXSwibmFtZXMiOlsic29ja2V0IiwiQ29DcmVhdGVTb2NrZXQiLCJzb2NrZXRBcGkiLCJjb3JlIiwiY3J1ZCIsIm1lc3NhZ2UiLCJpbml0Iiwid2luZG93IiwiY29uZmlnIiwiaG9zdCIsImFkZENvbXBvbmVudCIsImtleSIsImNvbXBvbmVudCIsInJlbW92ZUNvbXBvbmVudCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7QUFDQTs7Ozs7Ozs7QUFMQTtBQU9BO0FBQ0EsSUFBSUEsTUFBTSxHQUFHLElBQUlDLGVBQUosQ0FBbUIsSUFBbkIsQ0FBYjs7QUFDQSxJQUFJQyxTQUFTLEdBQUcsSUFBSUQsZUFBSixDQUFtQixLQUFuQixDQUFoQjs7QUFFQSxJQUFJRSxJQUFJLEdBQUcsbUJBQUtILE1BQUwsQ0FBWDs7QUFDQSxJQUFJSSxJQUFJLEdBQUcsbUJBQUtKLE1BQUwsQ0FBWDs7QUFDQSxJQUFJSyxPQUFPLEdBQUcsc0JBQVFMLE1BQVIsQ0FBZDs7QUFFQUcsSUFBSSxDQUFDRyxJQUFMLENBQVVDLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjQyxJQUFkLEdBQXFCRixNQUFNLENBQUNDLE1BQVAsQ0FBY0MsSUFBbkMsR0FBMEMscUJBQXBEOztBQUVBLFNBQVNDLFlBQVQsQ0FBc0JDLEdBQXRCLEVBQTJCQyxTQUEzQixFQUFzQztBQUNsQyxPQUFLRCxHQUFMLElBQVlDLFNBQVo7QUFDSDs7QUFFRCxTQUFTQyxlQUFULENBQXlCRixHQUF6QixFQUE4QjtBQUMxQixNQUFJLEtBQUtBLEdBQUwsQ0FBSixFQUFlLENBRWQ7QUFDSiIsImZpbGUiOiIuLi8uLi9Db0NyZWF0ZUpTL3NyYy9pbmRleC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qZ2xvYmFsIHdpbmRvdyovXG5pbXBvcnQgQ29DcmVhdGVTb2NrZXQgZnJvbSBcIi4vc29ja2V0LmpzXCJcbmltcG9ydCBDUlVEIGZyb20gXCIuL2NydWQuanNcIlxuaW1wb3J0IENvcmUgZnJvbSBcIi4vY29yZS5qc1wiXG5pbXBvcnQgKiBhcyB1dGlscyBmcm9tIFwiLi91dGlscy5qc1wiXG5pbXBvcnQgTWVzc2FnZSBmcm9tIFwiLi9tZXNzYWdlLmpzXCJcblxuLy8gaW1wb3J0IENSRFQgZnJvbSBcIi4vY3JkdC5qc1wiXG5sZXQgc29ja2V0ID0gbmV3IENvQ3JlYXRlU29ja2V0KCd3cycpO1xubGV0IHNvY2tldEFwaSA9IG5ldyBDb0NyZWF0ZVNvY2tldCgnYXBpJyk7XG5cbmxldCBjb3JlID0gQ29yZShzb2NrZXQpXG5sZXQgY3J1ZCA9IENSVUQoc29ja2V0KVxubGV0IG1lc3NhZ2UgPSBNZXNzYWdlKHNvY2tldClcblxuY29yZS5pbml0KHdpbmRvdy5jb25maWcuaG9zdCA/IHdpbmRvdy5jb25maWcuaG9zdCA6ICdzZXJ2ZXIuY29jcmVhdGUuYXBwJyk7XG5cbmZ1bmN0aW9uIGFkZENvbXBvbmVudChrZXksIGNvbXBvbmVudCkge1xuICAgIHRoaXNba2V5XSA9IGNvbXBvbmVudDtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlQ29tcG9uZW50KGtleSkge1xuICAgIGlmICh0aGlzW2tleV0pIHtcblxuICAgIH1cbn1cblxuZXhwb3J0IHtcbiAgICBjb3JlLFxuICAgIHNvY2tldCxcbiAgICBzb2NrZXRBcGksXG4gICAgY3J1ZCxcbiAgICB1dGlscyxcbiAgICBtZXNzYWdlLFxuICAgIGFkZENvbXBvbmVudCxcbiAgICByZW1vdmVDb21wb25lbnRcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../../CoCreateJS/src/index.js\n')},"../../CoCreateJS/src/message.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = Message;\n\nvar _commonFun = __webpack_require__(/*! ./common-fun.js */ \"../../CoCreateJS/src/common-fun.js\");\n\nconst CoCreateMessage = {\n  socket: null,\n  setSocket: function (socket) {\n    this.socket = socket;\n  },\n\n  /*\n  CoCreate.message.send({\n     namespace: '',\n     room: '',\n     broadcast: true/false,\n     broadcast_sender: true/false\n     \n     rooms: [r1, r2],\n     emit: {\n       message': 'nice game',\n       data': 'let's play a game ....'\n     }\n   })\n  */\n  send: function (data) {\n    let request_data = (0, _commonFun.getCommonParams)();\n\n    if (!data || !data.emit) {\n      return;\n    }\n\n    request_data = { ...request_data,\n      ...data\n    };\n    /** socket parameters **/\n    // if (data['broadcast'] === undefined) {\n    //   request_data['broadcast'] = true;\n    // }\n    // if (data['broadcast_sender'] === undefined) {\n    //   request_data['broadcast_sender'] = true;\n    // }\n\n    const room = (0, _commonFun.generateSocketClient)(data.namespace, data.room);\n    this.socket.send('sendMessage', request_data, room);\n  },\n  receive: function (message, fun) {\n    this.socket.listen(message, fun);\n  }\n};\n\nfunction Message(socket) {\n  CoCreateMessage.setSocket(socket);\n  return CoCreateMessage;\n}\n\n;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS5hdHRyaWJ1dGVzLy4uL0NvQ3JlYXRlSlMvc3JjL21lc3NhZ2UuanM/Nzg0MiJdLCJuYW1lcyI6WyJDb0NyZWF0ZU1lc3NhZ2UiLCJzb2NrZXQiLCJzZXRTb2NrZXQiLCJzZW5kIiwiZGF0YSIsInJlcXVlc3RfZGF0YSIsImVtaXQiLCJyb29tIiwibmFtZXNwYWNlIiwicmVjZWl2ZSIsIm1lc3NhZ2UiLCJmdW4iLCJsaXN0ZW4iLCJNZXNzYWdlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBRUEsTUFBTUEsZUFBZSxHQUFHO0FBQ3RCQyxRQUFNLEVBQUUsSUFEYztBQUV0QkMsV0FBUyxFQUFFLFVBQVNELE1BQVQsRUFBaUI7QUFDMUIsU0FBS0EsTUFBTCxHQUFjQSxNQUFkO0FBQ0QsR0FKcUI7O0FBS3ZCO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQ0UsTUFBSSxFQUFFLFVBQVNDLElBQVQsRUFBZTtBQUNsQixRQUFJQyxZQUFZLEdBQUcsaUNBQW5COztBQUVBLFFBQUksQ0FBQ0QsSUFBRCxJQUFTLENBQUNBLElBQUksQ0FBQ0UsSUFBbkIsRUFBeUI7QUFDdkI7QUFDRDs7QUFDREQsZ0JBQVksR0FBRyxFQUFDLEdBQUdBLFlBQUo7QUFBa0IsU0FBR0Q7QUFBckIsS0FBZjtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBLFVBQU1HLElBQUksR0FBRyxxQ0FBcUJILElBQUksQ0FBQ0ksU0FBMUIsRUFBcUNKLElBQUksQ0FBQ0csSUFBMUMsQ0FBYjtBQUVBLFNBQUtOLE1BQUwsQ0FBWUUsSUFBWixDQUFpQixhQUFqQixFQUFnQ0UsWUFBaEMsRUFBOENFLElBQTlDO0FBQ0YsR0FyQ3NCO0FBdUN2QkUsU0FBTyxFQUFFLFVBQVNDLE9BQVQsRUFBa0JDLEdBQWxCLEVBQXVCO0FBQzlCLFNBQUtWLE1BQUwsQ0FBWVcsTUFBWixDQUFtQkYsT0FBbkIsRUFBNEJDLEdBQTVCO0FBQ0Q7QUF6Q3NCLENBQXhCOztBQTRDZSxTQUFTRSxPQUFULENBQWlCWixNQUFqQixFQUF5QjtBQUN0Q0QsaUJBQWUsQ0FBQ0UsU0FBaEIsQ0FBMEJELE1BQTFCO0FBQ0EsU0FBT0QsZUFBUDtBQUNEOztBQUFBIiwiZmlsZSI6Ii4uLy4uL0NvQ3JlYXRlSlMvc3JjL21lc3NhZ2UuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2dldENvbW1vblBhcmFtcywgZ2V0Q29tbW9uUGFyYW1zRXh0ZW5kLCBnZW5lcmF0ZVNvY2tldENsaWVudH0gZnJvbSBcIi4vY29tbW9uLWZ1bi5qc1wiXG5cbmNvbnN0IENvQ3JlYXRlTWVzc2FnZSA9IHtcbiAgc29ja2V0OiBudWxsLFxuICBzZXRTb2NrZXQ6IGZ1bmN0aW9uKHNvY2tldCkge1xuICAgIHRoaXMuc29ja2V0ID0gc29ja2V0O1xuICB9LFxuIC8qXG4gQ29DcmVhdGUubWVzc2FnZS5zZW5kKHtcbiAgICBuYW1lc3BhY2U6ICcnLFxuICAgIHJvb206ICcnLFxuICAgIGJyb2FkY2FzdDogdHJ1ZS9mYWxzZSxcbiAgICBicm9hZGNhc3Rfc2VuZGVyOiB0cnVlL2ZhbHNlXG4gICAgXG4gICAgcm9vbXM6IFtyMSwgcjJdLFxuICAgIGVtaXQ6IHtcbiAgICAgIG1lc3NhZ2UnOiAnbmljZSBnYW1lJyxcbiAgICAgIGRhdGEnOiAnbGV0J3MgcGxheSBhIGdhbWUgLi4uLidcbiAgICB9XG4gIH0pXG4gKi9cbiBzZW5kOiBmdW5jdGlvbihkYXRhKSB7XG4gICAgbGV0IHJlcXVlc3RfZGF0YSA9IGdldENvbW1vblBhcmFtcygpO1xuICAgIFxuICAgIGlmICghZGF0YSB8fCAhZGF0YS5lbWl0KSB7XG4gICAgICByZXR1cm47ICAgICBcbiAgICB9XG4gICAgcmVxdWVzdF9kYXRhID0gey4uLnJlcXVlc3RfZGF0YSwgLi4uZGF0YX1cbiAgICBcbiAgICAvKiogc29ja2V0IHBhcmFtZXRlcnMgKiovXG4gICAgLy8gaWYgKGRhdGFbJ2Jyb2FkY2FzdCddID09PSB1bmRlZmluZWQpIHtcbiAgICAvLyAgIHJlcXVlc3RfZGF0YVsnYnJvYWRjYXN0J10gPSB0cnVlO1xuICAgIC8vIH1cbiAgICAvLyBpZiAoZGF0YVsnYnJvYWRjYXN0X3NlbmRlciddID09PSB1bmRlZmluZWQpIHtcbiAgICAvLyAgIHJlcXVlc3RfZGF0YVsnYnJvYWRjYXN0X3NlbmRlciddID0gdHJ1ZTtcbiAgICAvLyB9XG4gICAgY29uc3Qgcm9vbSA9IGdlbmVyYXRlU29ja2V0Q2xpZW50KGRhdGEubmFtZXNwYWNlLCBkYXRhLnJvb20pO1xuICAgIFxuICAgIHRoaXMuc29ja2V0LnNlbmQoJ3NlbmRNZXNzYWdlJywgcmVxdWVzdF9kYXRhLCByb29tKVxuIH0sXG4gXG4gcmVjZWl2ZTogZnVuY3Rpb24obWVzc2FnZSwgZnVuKSB7XG4gICB0aGlzLnNvY2tldC5saXN0ZW4obWVzc2FnZSwgZnVuKTtcbiB9LFxufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBNZXNzYWdlKHNvY2tldCkge1xuICBDb0NyZWF0ZU1lc3NhZ2Uuc2V0U29ja2V0KHNvY2tldClcbiAgcmV0dXJuIENvQ3JlYXRlTWVzc2FnZTtcbn07XG5cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../../CoCreateJS/src/message.js\n")},"../../CoCreateJS/src/socket.js":(__unused_webpack_module,exports)=>{eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = void 0;\n\nclass CoCreateSocket {\n  constructor(prefix = \"crud\") {\n    this.prefix = prefix || \"crud\";\n    this.sockets = new Map();\n    this.listeners = new Map();\n    this.messageQueue = new Map();\n    this.saveFileName = '';\n    this.globalScope = \"\";\n  }\n\n  setGlobalScope(scope) {\n    this.globalScope = `${this.prefix}/${scope}`;\n  }\n\n  getGlobalScope() {\n    return this.globalScope;\n  }\n  /**\n   * config: {namespace, room, host}\n   */\n\n\n  create(config) {\n    const {\n      namespace,\n      room\n    } = config;\n    const key = this.getKey(namespace, room);\n\n    let _this = this;\n\n    let socket;\n\n    if (this.sockets.get(key)) {\n      socket = this.sockets.get(key);\n      console.log('SOcket already has been register');\n      return;\n    }\n\n    let w_protocol = window.location.protocol;\n\n    if (window.location.protocol === \"about:\") {\n      w_protocol = window.parent.location.protocol;\n    }\n\n    let protocol = w_protocol === 'http:' ? 'ws' : 'wss';\n    const port = config.port ? config.port : 8088;\n    let socket_url = `${protocol}://${window.location.host}:${port}/${key}`;\n\n    if (config.host) {\n      if (config.host.includes(\"://\")) {\n        socket_url = `${config.host}/${key}`;\n      } else {\n        socket_url = `${protocol}://${config.host}:${port}/${key}`;\n      }\n    }\n\n    socket = new WebSocket(socket_url);\n\n    socket.onopen = function (event) {\n      console.log('created socket: ' + key);\n      const messages = _this.messageQueue.get(key) || [];\n      console.log(messages);\n      messages.forEach(msg => socket.send(JSON.stringify(msg)));\n\n      _this.sockets.set(key, socket);\n\n      _this.messageQueue.set(key, []);\n    };\n\n    socket.onclose = function (event) {\n      switch (event.code) {\n        case 1000:\n          // close normal\n          console.log(\"websocket: closed\");\n          break;\n\n        default:\n          _this.destroy(socket, key);\n\n          _this.reconnect(socket, config);\n\n          break;\n      }\n    };\n\n    socket.onerror = function (err) {\n      console.log('Socket error');\n\n      _this.destroy(socket, key);\n\n      _this.reconnect(socket, config);\n    };\n\n    socket.onmessage = function (data) {\n      try {\n        if (data.data instanceof Blob) {\n          _this.saveFile(data.data);\n\n          return;\n        }\n\n        let rev_data = JSON.parse(data.data);\n\n        if (rev_data.data.metadata && rev_data.data.metadata.event) {\n          var event = new CustomEvent(rev_data.data.metadata.event, {\n            detail: rev_data.data\n          });\n          document.dispatchEvent(event);\n          return;\n        }\n\n        let action = rev_data.action;\n\n        const listeners = _this.listeners.get(rev_data.action);\n\n        if (!listeners) {\n          return;\n        }\n\n        listeners.forEach(listener => {\n          listener(rev_data.data, key);\n        });\n      } catch (e) {\n        console.log(e);\n      }\n    };\n  }\n  /**\n   * \n   */\n\n\n  send(action, data, room) {\n    const obj = {\n      action: action,\n      data: data\n    };\n    const key = this.getKeyByRoom(room);\n    const socket = this.getByRoom(room);\n\n    if (socket) {\n      socket.send(JSON.stringify(obj));\n    } else {\n      if (this.messageQueue.get(key)) {\n        this.messageQueue.get(key).push(obj);\n      } else {\n        this.messageQueue.set(key, [obj]);\n      }\n    }\n  }\n\n  sendFile(file, room) {\n    const socket = this.getByRoom(room);\n\n    if (socket) {\n      socket.send(file);\n    }\n  }\n  /**\n   * scope: ns/room\n   */\n\n\n  listen(type, callback) {\n    if (!this.listeners.get(type)) {\n      this.listeners.set(type, [callback]);\n    } else {\n      this.listeners.get(type).push(callback);\n    }\n  }\n\n  reconnect(socket, config) {\n    let _this = this;\n\n    setTimeout(function () {\n      _this.create(config);\n    }, 1000);\n  }\n\n  destroy(socket, key) {\n    if (socket) {\n      socket.onerror = socket.onopen = socket.onclose = null;\n      socket.close();\n      socket = null;\n    }\n\n    if (this.sockets.get(key)) {\n      this.sockets.delete(key);\n    }\n  }\n\n  getKey(namespace, room) {\n    let key = `${this.prefix}`;\n\n    if (namespace && namespace != '') {\n      if (room && room != '') {\n        key += `/${namespace}/${room}`;\n      } else {\n        key += `/${namespace}`;\n      }\n    }\n\n    return key;\n  }\n\n  getByRoom(room) {\n    let key = this.getKeyByRoom(room);\n    return this.sockets.get(key);\n  }\n\n  getKeyByRoom(room) {\n    let key = this.globalScope;\n\n    if (room) {\n      key = `${this.prefix}/${room}`;\n    }\n\n    return key;\n  }\n\n  saveFile(blob) {\n    // const {filename} = window.saveFileInfo;\n    const file_name = this.saveFileName || 'downloadFile';\n    var a = document.createElement(\"a\");\n    document.body.appendChild(a);\n    a.style = \"display: none\";\n    let url = window.URL.createObjectURL(blob);\n    a.href = url;\n    a.download = file_name;\n    a.click();\n    window.URL.revokeObjectURL(url);\n    this.saveFileName = '';\n  }\n\n}\n\nvar _default = CoCreateSocket;\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../CoCreateJS/src/socket.js\n")},"../../CoCreateJS/src/utils.crud.js":(__unused_webpack_module,exports)=>{eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = void 0;\n\nfunction __mergeObject(target, source) {\n  target = target || {};\n\n  for (let key of Object.keys(source)) {\n    if (source[key] instanceof Object) {\n      Object.assign(source[key], __mergeObject(target[key], source[key]));\n    }\n  }\n\n  Object.assign(target || {}, source);\n  return target;\n}\n\nfunction __createObject(data, path) {\n  if (!path) return data;\n  let keys = path.split('.');\n  let newObject = data;\n\n  for (var i = keys.length - 1; i >= 0; i--) {\n    newObject = {\n      [keys[i]]: newObject\n    };\n  }\n\n  return newObject;\n}\n\nfunction __createArray(key, data) {\n  try {\n    let item = /([\\w\\W]+)\\[(\\d+)\\]/gm.exec(key);\n\n    if (item && item.length == 3) {\n      let arrayKey = item[1];\n      let index = parseInt(item[2]);\n\n      if (!data[arrayKey] || !Array.isArray(data[arrayKey])) {\n        data[arrayKey] = [];\n      }\n\n      data[arrayKey][index] = data[key];\n      delete data[key];\n      key = arrayKey;\n    }\n  } catch {\n    console.log('create array error');\n  }\n\n  return key;\n}\n\nfunction isObject(item) {\n  return !!item && item.constructor === Object;\n}\n\nfunction isArray(item) {\n  return !!item && item.constructor === Array;\n}\n\nfunction decodeObject(data) {\n  let keys = Object.keys(data);\n  let objectData = {};\n  keys.forEach(k => {\n    k = __createArray(k, data);\n\n    if (k.split('.').length > 1) {\n      let newData = __createObject(data[k], k);\n\n      delete data[k];\n      objectData = __mergeObject(objectData, newData);\n    } else {\n      objectData[k] = data[k];\n    }\n  });\n  return objectData;\n}\n\nfunction encodeObject(data) {\n  let keys = Object.keys(data);\n  let newData = {};\n  keys.forEach(k => {\n    let data_value = data[k];\n\n    if (isObject(data[k])) {\n      let new_obj = encodeObject(data[k]);\n      let newKeys = Object.keys(new_obj);\n      newKeys.forEach(newKey => {\n        let value = new_obj[newKey];\n        newKey = k + \".\" + newKey;\n        newData[newKey] = value;\n      });\n    } else if (isArray(data_value)) {\n      data_value.forEach((v, index) => {\n        newData[`${k}[${index}]`] = v;\n      });\n    } else {\n      newData[k] = data[k];\n    }\n  });\n  return newData;\n}\n\nvar _default = {\n  decodeObject,\n  encodeObject\n};\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS5hdHRyaWJ1dGVzLy4uL0NvQ3JlYXRlSlMvc3JjL3V0aWxzLmNydWQuanM/YTYwYyJdLCJuYW1lcyI6WyJfX21lcmdlT2JqZWN0IiwidGFyZ2V0Iiwic291cmNlIiwia2V5IiwiT2JqZWN0Iiwia2V5cyIsImFzc2lnbiIsIl9fY3JlYXRlT2JqZWN0IiwiZGF0YSIsInBhdGgiLCJzcGxpdCIsIm5ld09iamVjdCIsImkiLCJsZW5ndGgiLCJfX2NyZWF0ZUFycmF5IiwiaXRlbSIsImV4ZWMiLCJhcnJheUtleSIsImluZGV4IiwicGFyc2VJbnQiLCJBcnJheSIsImlzQXJyYXkiLCJjb25zb2xlIiwibG9nIiwiaXNPYmplY3QiLCJjb25zdHJ1Y3RvciIsImRlY29kZU9iamVjdCIsIm9iamVjdERhdGEiLCJmb3JFYWNoIiwiayIsIm5ld0RhdGEiLCJlbmNvZGVPYmplY3QiLCJkYXRhX3ZhbHVlIiwibmV3X29iaiIsIm5ld0tleXMiLCJuZXdLZXkiLCJ2YWx1ZSIsInYiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSxTQUFVQSxhQUFWLENBQXdCQyxNQUF4QixFQUFnQ0MsTUFBaEMsRUFDQTtBQUNDRCxRQUFNLEdBQUdBLE1BQU0sSUFBSSxFQUFuQjs7QUFDQSxPQUFLLElBQUlFLEdBQVQsSUFBZ0JDLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZSCxNQUFaLENBQWhCLEVBQXFDO0FBQ3BDLFFBQUlBLE1BQU0sQ0FBQ0MsR0FBRCxDQUFOLFlBQXVCQyxNQUEzQixFQUFtQztBQUNsQ0EsWUFBTSxDQUFDRSxNQUFQLENBQWNKLE1BQU0sQ0FBQ0MsR0FBRCxDQUFwQixFQUEyQkgsYUFBYSxDQUFDQyxNQUFNLENBQUNFLEdBQUQsQ0FBUCxFQUFjRCxNQUFNLENBQUNDLEdBQUQsQ0FBcEIsQ0FBeEM7QUFDQTtBQUNEOztBQUVEQyxRQUFNLENBQUNFLE1BQVAsQ0FBY0wsTUFBTSxJQUFJLEVBQXhCLEVBQTRCQyxNQUE1QjtBQUNBLFNBQU9ELE1BQVA7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OlsiZnVuY3Rpb24gXHRfX21lcmdlT2JqZWN0KHRhcmdldCwgc291cmNlKSBcbntcblx0dGFyZ2V0ID0gdGFyZ2V0IHx8IHt9O1xuXHRmb3IgKGxldCBrZXkgb2YgT2JqZWN0LmtleXMoc291cmNlKSkge1xuXHRcdGlmIChzb3VyY2Vba2V5XSBpbnN0YW5jZW9mIE9iamVjdCkge1xuXHRcdFx0T2JqZWN0LmFzc2lnbihzb3VyY2Vba2V5XSwgX19tZXJnZU9iamVjdCh0YXJnZXRba2V5XSwgc291cmNlW2tleV0pKVxuXHRcdH1cblx0fVxuXHRcblx0T2JqZWN0LmFzc2lnbih0YXJnZXQgfHwge30sIHNvdXJjZSlcblx0cmV0dXJuIHRhcmdldFxufVxuXG5mdW5jdGlvbiBfX2NyZWF0ZU9iamVjdChkYXRhLCBwYXRoKSBcbntcblx0aWYgKCFwYXRoKSByZXR1cm4gZGF0YTtcblx0XG5cdGxldCBrZXlzID0gcGF0aC5zcGxpdCgnLicpXG5cdGxldCBuZXdPYmplY3QgPSBkYXRhO1xuXG5cdGZvciAodmFyICBpID0ga2V5cy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuXHRcdG5ld09iamVjdCA9IHtba2V5c1tpXV06IG5ld09iamVjdH1cdFx0XHRcdFxuXHR9XG5cdHJldHVybiBuZXdPYmplY3Q7XG59XG5cbmZ1bmN0aW9uIF9fY3JlYXRlQXJyYXkoa2V5LCBkYXRhKVxue1xuICB0cnkge1xuICAgIGxldCBpdGVtID0gLyhbXFx3XFxXXSspXFxbKFxcZCspXFxdL2dtLmV4ZWMoa2V5KVxuICAgIGlmIChpdGVtICYmIGl0ZW0ubGVuZ3RoID09IDMpIHtcbiAgICAgIGxldCBhcnJheUtleSA9IGl0ZW1bMV07XG4gICAgICBsZXQgaW5kZXggPSBwYXJzZUludChpdGVtWzJdKTtcbiAgICAgIFxuICAgICAgaWYgKCFkYXRhW2FycmF5S2V5XSB8fCAhQXJyYXkuaXNBcnJheShkYXRhW2FycmF5S2V5XSkpIHtcbiAgICAgICAgZGF0YVthcnJheUtleV0gPSBbXTtcbiAgICAgIH0gXG4gICAgICBkYXRhW2FycmF5S2V5XVtpbmRleF0gPSBkYXRhW2tleV07XG4gICAgICBkZWxldGUgZGF0YVtrZXldO1xuICAgICAga2V5ID0gYXJyYXlLZXk7XG4gICAgfVxuICB9IGNhdGNoIHtcbiAgICBjb25zb2xlLmxvZygnY3JlYXRlIGFycmF5IGVycm9yJyk7XG4gIH1cbiAgcmV0dXJuIGtleTtcbn1cblxuXG5cbmZ1bmN0aW9uIGlzT2JqZWN0KGl0ZW0pIHtcbiAgcmV0dXJuICghIWl0ZW0pICYmIChpdGVtLmNvbnN0cnVjdG9yID09PSBPYmplY3QpO1xufVxuZnVuY3Rpb24gaXNBcnJheShpdGVtKSB7XG4gIHJldHVybiAoISFpdGVtKSAmJiAoaXRlbS5jb25zdHJ1Y3RvciA9PT0gQXJyYXkpO1xufVxuXG5mdW5jdGlvbiBkZWNvZGVPYmplY3QoZGF0YSkge1xuICBsZXQga2V5cyA9IE9iamVjdC5rZXlzKGRhdGEpXG4gIGxldCBvYmplY3REYXRhID0ge307XG4gIFxuICBrZXlzLmZvckVhY2goKGspID0+IHtcbiAgICBrID0gX19jcmVhdGVBcnJheShrLCBkYXRhKTtcbiAgICBpZiAoay5zcGxpdCgnLicpLmxlbmd0aCA+IDEpIHtcbiAgICAgIGxldCBuZXdEYXRhID0gX19jcmVhdGVPYmplY3QoZGF0YVtrXSwgayk7XG4gICAgICBkZWxldGUgZGF0YVtrXTtcbiAgICAgIFxuICAgICAgb2JqZWN0RGF0YSA9IF9fbWVyZ2VPYmplY3Qob2JqZWN0RGF0YSwgbmV3RGF0YSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9iamVjdERhdGFba10gPSBkYXRhW2tdO1xuICAgIH1cbiAgfSlcbiAgcmV0dXJuIG9iamVjdERhdGE7XG59XG5cbmZ1bmN0aW9uIGVuY29kZU9iamVjdChkYXRhKSB7XG4gIGxldCBrZXlzID0gT2JqZWN0LmtleXMoZGF0YSk7XG4gIGxldCBuZXdEYXRhID0ge307XG4gIGtleXMuZm9yRWFjaCgoaykgPT4ge1xuICAgIGxldCBkYXRhX3ZhbHVlID0gZGF0YVtrXTtcbiAgICBpZiAoaXNPYmplY3QoZGF0YVtrXSkpIHtcbiAgICAgIGxldCBuZXdfb2JqID0gZW5jb2RlT2JqZWN0KGRhdGFba10pO1xuICAgICAgXG4gICAgICBsZXQgbmV3S2V5cyA9IE9iamVjdC5rZXlzKG5ld19vYmopO1xuICAgICAgbmV3S2V5cy5mb3JFYWNoKChuZXdLZXkpID0+IHtcbiAgICAgICAgbGV0IHZhbHVlID0gbmV3X29ialtuZXdLZXldO1xuICAgICAgICBuZXdLZXkgPSBrICsgXCIuXCIgKyBuZXdLZXk7XG4gICAgICAgIG5ld0RhdGFbbmV3S2V5XSA9IHZhbHVlO1xuICAgICAgfSlcbiAgICAgIFxuICAgIH0gZWxzZSBpZiAoaXNBcnJheShkYXRhX3ZhbHVlKSl7XG4gICAgICBkYXRhX3ZhbHVlLmZvckVhY2goKHYsIGluZGV4KSA9PiB7XG4gICAgICAgIG5ld0RhdGFbYCR7a31bJHtpbmRleH1dYF0gPSB2O1xuICAgICAgfSlcbiAgICB9IGVsc2Uge1xuICAgICAgbmV3RGF0YVtrXSA9IGRhdGFba107XG4gICAgfVxuICB9KVxuICByZXR1cm4gbmV3RGF0YTtcbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICBkZWNvZGVPYmplY3QsXG4gIGVuY29kZU9iamVjdFxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../CoCreateJS/src/utils.crud.js\n")},"../../CoCreateJS/src/utils.js":(__unused_webpack_module,exports)=>{eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.generateUUID = generateUUID;\nexports.isRealTime = isRealTime;\nexports.getParentFromElement = getParentFromElement;\nexports.isReadValue = isReadValue;\nexports.isUpdateValue = isUpdateValue;\nexports.isJsonString = isJsonString;\nexports.getAttributes = getAttributes;\nexports.checkValue = checkValue;\nexports.allFrame = allFrame;\nexports.cssPath = cssPath;\nexports.getTopMostWindow = getTopMostWindow;\nexports.findIframeFromElement = findIframeFromElement;\nexports.getIframeFromPath = getIframeFromPath;\nexports.configMatch2 = configMatch2;\nexports.configExecuter = configExecuter;\nexports.UUID = UUID;\nexports.parseTextToHtml = parseTextToHtml;\nexports.splitBydelimiter = splitBydelimiter;\nexports.joinBydelimiter = joinBydelimiter;\nexports.isValidSelector = isValidSelector;\nexports.getElementPath = getElementPath;\nexports.isUsageY = isUsageY;\nexports.default = void 0;\n\n/**\n * Created by jin\n * 2020-04-03\n */\nfunction generateUUID(length = 36) {\n  // if (length == 10) {\n  //   var result           = \'\';\n  //   var characters       = \'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\';\n  //   var charactersLength = characters.length;\n  //   for ( var i = 0; i < length; i++ ) {\n  //     result += characters.charAt(Math.floor(Math.random() * charactersLength));\n  //   }\n  //   var dd = new Date().toTimeString();\n  //   var random = dd.replace(/[\\W_]+/g, "").substr(0,6);\n  //   result += random;\n  //   return result;\n  // }\n  let d = new Date().getTime();\n  let d2 = window.performance && window.performance.now && window.performance.now() * 1000 || 0;\n  let pattern = "uxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx";\n\n  if (length <= pattern.length) {\n    pattern = pattern.substr(0, length);\n  } else {\n    let add_len = length - pattern.length;\n    let sub_pattern = "-xxxyyxxx";\n    let group_n = Math.floor(add_len / sub_pattern.length);\n\n    for (let i = 0; i < group_n; i++) {\n      pattern += sub_pattern;\n    }\n\n    group_n = add_len - group_n * sub_pattern.length;\n    pattern += sub_pattern.substr(0, group_n);\n  }\n\n  let uuid = pattern.replace(/[xy]/g, function (c) {\n    var r = Math.random() * 16;\n\n    if (d > 0) {\n      var r = (d + r) % 16 | 0;\n      d = Math.floor(d / 16);\n    } else {\n      var r = (d2 + r) % 16 | 0;\n      d2 = Math.floor(d2 / 16);\n    }\n\n    return (c == "x" ? r : r & 0x7 | 0x8).toString(16);\n  });\n  return uuid;\n}\n\nfunction isRealTime(element, parent_realTime) {\n  let realtime = element.getAttribute("data-realtime") || parent_realTime;\n\n  if (realtime === "false") {\n    return false;\n  }\n\n  return true;\n}\n\nfunction getParentFromElement(element, parent_class, attributes) {\n  if (parent_class) {\n    if (element.classList.contains(parent_class)) {\n      return element;\n    }\n\n    let node = element.parentNode;\n\n    while (node != null && node.classList) {\n      if (node.classList.contains(parent_class)) {\n        return node;\n      }\n\n      node = node.parentNode;\n    }\n  } else if (attributes) {\n    if (attributes.every(attr => element.attributes.hasOwnProperty(attr))) {\n      return element;\n    }\n\n    let node = element.parentNode;\n\n    while (node != null && node.attributes) {\n      if (attributes.every(attr => node.attributes.hasOwnProperty(attr))) {\n        return node;\n      }\n\n      node = node.parentNode;\n    }\n  }\n\n  return false;\n}\n\nfunction isReadValue(element) {\n  return element.getAttribute("data-read_value") != "false";\n}\n\nfunction isUpdateValue(element) {\n  return element.getAttribute("data-update_value") != "false";\n}\n\nfunction isJsonString(str_data) {\n  try {\n    let json_data = JSON.parse(str_data);\n\n    if (typeof json_data === "object" && json_data != null) {\n      return true;\n    } else {\n      return false;\n    }\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction getAttributes(element) {\n  return element.getAttributeNames().reduce((attrMap, name) => {\n    attrMap[name] = element.getAttribute(name);\n    return attrMap;\n  }, {});\n}\n\nfunction checkValue(value) {\n  if (!value) return false;\n\n  if (/{{\\s*([\\w\\W]+)\\s*}}/g.test(value)) {\n    return false;\n  }\n\n  return true;\n} // hosseins utills\n// function to go through all frames\n\n\nfunction allFrame(callback) {\n  let allFrames = [{\n    document,\n    window\n  }];\n\n  for (let frame of document.querySelectorAll("iframe")) {\n    let frameDocument = frame.contentDocument || frame.contentWindow.document;\n    let frameWindow = frame.contentWindow;\n    allFrames.push({\n      document: frameDocument,\n      window: frameWindow,\n      frameElement: frame\n    });\n  }\n\n  let result = new Set();\n\n  for (let frame of allFrames) {\n    let callbackResult = callback(frame);\n    if (callbackResult && typeof callbackResult[Symbol.iterator] === "function") callbackResult.forEach(el => result.add(el));else if (callbackResult) result.add(callbackResult);\n  }\n\n  return Array.from(result);\n}\n\nfunction cssPath(node) {\n  let pathSplits = [];\n\n  do {\n    if (!node || !node.tagName) return false;\n    let pathSplit = node.tagName.toLowerCase();\n    if (node.id && node.tagName !== "BODY") pathSplit += "#" + node.id;\n\n    if (node.classList.length && node.tagName !== "BODY") {\n      node.classList.forEach(item => {\n        if (item.indexOf(":") === -1) pathSplit += "." + item;\n      });\n    }\n\n    if (node.tagName !== "BODY" && node.parentNode) {\n      let index = Array.prototype.indexOf.call(node.parentNode.children, node);\n      pathSplit += `:nth-child(${index + 1})`;\n    }\n\n    pathSplits.unshift(pathSplit);\n    node = node.parentNode;\n  } while (node.tagName !== "HTML");\n\n  return pathSplits.join(" > ");\n}\n\nfunction getTopMostWindow() {\n  let parentWindow = window;\n\n  while (parentWindow !== window.parent) parentWindow = window.parent;\n\n  return parentWindow;\n}\n\nfunction findIframeFromElement(windowObject, element) {\n  let frameElement;\n  allFrame(frame => {\n    if (frame.document.contains(element)) frameElement = frame.frameElement; // window.cc.findIframeFromElement(frame.window, element);\n  });\n  return frameElement;\n}\n\nfunction getIframeFromPath(path) {\n  let topWindow = getTopMostWindow;\n  path.forEach(selector => {\n    if (topWindow) topWindow = topWindow.querySelector(selector);\n  });\n  return topWindow;\n} // DO NOT REMOVE\n// configMatch: function* configMatch(elementConfig, element) {\n//   for (let config of elementConfig) {\n//     // if (!Array.isArray(config.selector))\n//     //   config.selector = [config.selector];\n//     if (config.selector && element.matches(config.selector)) yield config;\n//   }\n//   return;\n// },\n\n\nfunction configMatch2(elementConfig, element) {\n  let result = [];\n\n  for (let config of elementConfig) {\n    if (config.selector && element.matches(config.selector)) result.push(config);\n  }\n\n  return result;\n} // DO NOT REMOVE\n// an opiniated function uses configMatch2 to read configs\n// WARNING: the config iterated from top to bottom. for deseired effect elementConfig should be reveresed\n// typeof elementConfig: array of objects and every objects containing keys as false, true or a selector \n// element: the element to read attributes\n// key: the key in which is in elementConfig and on match onSuccess callback will be called\n\n\nfunction configExecuter(element, key, onSuccess, elementConfig) {\n  for (let config of configMatch2(elementConfig || window.elementConfig, element)) if (config[key] === true) return onSuccess(element, config);else if (config[key] === false) return false;else if (config[key] === undefined) continue;else if (isValidSelector(config[key])) return onSuccess(element, config, true);else console.warn("builder: wrong element config ", config);\n\n  return false;\n}\n\nfunction UUID(length = 10) {\n  var result = "";\n  var characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";\n  var charactersLength = characters.length;\n\n  for (var i = 0; i < length; i++) {\n    result += characters.charAt(Math.floor(Math.random() * charactersLength));\n  }\n\n  var d = new Date().toTimeString();\n  var random = d.replace(/[\\W_]+/g, "").substr(0, 6);\n  result += random;\n  return result;\n}\n\nfunction parseTextToHtml(text) {\n  let doc = new DOMParser().parseFromString(text, "text/html");\n  if (doc.head.children[0]) return doc.head.children[0];else return doc.body.children[0];\n}\n\nfunction splitBydelimiter(str, delimiter) {\n  return str.split(delimiter).map(s => s.trim());\n}\n\nfunction joinBydelimiter(str, delimiter) {\n  return str.map(s => s.trim()).join(delimiter);\n}\n\nfunction isValidSelector(selector) {\n  try {\n    document.createDocumentFragment().querySelector(selector);\n  } catch (error) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction getElementPath(element, returnContext) {\n  let path = [];\n  let topWindow = window;\n  let iframeElement = findIframeFromElement(topWindow, element);\n  let p = cssPath(iframeElement);\n  if (p) path.unshift(p);\n  return returnContext ? {\n    path,\n    document: iframeElement || document\n  } : path; //todo: support for nested iframe\n  // while(iframeElement !== findIframeFromElement(topWindow,iframeElement))\n  // {\n  //   iframeElement = findIframeFromElement(topWindow,iframeElement);\n  //   path.unshift(cssPath(iframeElement))\n  // }\n}\n\nfunction isUsageY(input) {\n  if (this.isJsonString(input.getAttribute(\'data-collection\'))) {\n    return false;\n  }\n\n  if (this.isJsonString(input.getAttribute(\'name\'))) {\n    return false;\n  }\n\n  if (input.tagName === "INPUT" && ["text", "email", "tel", "url"].includes(input.type) || input.tagName === "TEXTAREA") {\n    if (!input.getAttribute(\'name\')) {\n      return false;\n    }\n\n    if (input.getAttribute("data-realtime") == "false") {\n      return false;\n    }\n\n    if (input.getAttribute("data-unique") === "true") {\n      return false;\n    }\n\n    if (input.type === \'password\') {\n      return false;\n    }\n\n    if (!this.isReadValue(input)) {\n      return false;\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\nvar _default = {\n  isUsageY,\n  getElementPath,\n  isValidSelector,\n  joinBydelimiter,\n  splitBydelimiter,\n  parseTextToHtml,\n  UUID,\n  configExecuter,\n  configMatch2,\n  getIframeFromPath,\n  findIframeFromElement,\n  getTopMostWindow,\n  cssPath,\n  allFrame,\n  checkValue,\n  getAttributes,\n  isJsonString,\n  isUpdateValue,\n  isReadValue,\n  getParentFromElement,\n  isRealTime,\n  generateUUID\n};\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../CoCreateJS/src/utils.js\n')},"./node_modules/file-loader/dist/cjs.js!../CoCreate-select/src/CoCreate-select.css":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (__webpack_require__.p + "eaddb3aea56752094a14d18001b9856d.css");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS5hdHRyaWJ1dGVzLy4uL0NvQ3JlYXRlLXNlbGVjdC9zcmMvQ29DcmVhdGUtc2VsZWN0LmNzcz8zMDYwIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxpRUFBZSxxQkFBdUIseUNBQXlDIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2ZpbGUtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uL0NvQ3JlYXRlLXNlbGVjdC9zcmMvQ29DcmVhdGUtc2VsZWN0LmNzcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJlYWRkYjNhZWE1Njc1MjA5NGExNGQxODAwMWI5ODU2ZC5jc3NcIjsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/file-loader/dist/cjs.js!../CoCreate-select/src/CoCreate-select.css\n')},"../CoCreate-select/src/CoCreate-select.css":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _CoCreate_attributes_node_modules_style_loader_dist_runtime_injectStylesIntoLinkTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../CoCreate-attributes/node_modules/style-loader/dist/runtime/injectStylesIntoLinkTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoLinkTag.js");\n/* harmony import */ var _CoCreate_attributes_node_modules_style_loader_dist_runtime_injectStylesIntoLinkTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_CoCreate_attributes_node_modules_style_loader_dist_runtime_injectStylesIntoLinkTag_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _CoCreate_attributes_node_modules_file_loader_dist_cjs_js_CoCreate_select_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !!../../CoCreate-attributes/node_modules/file-loader/dist/cjs.js!./CoCreate-select.css */ "./node_modules/file-loader/dist/cjs.js!../CoCreate-select/src/CoCreate-select.css");\n\n            \n\nvar options = {"injectType":"linkTag"};\n\noptions.insert = "head";\n\nvar update = _CoCreate_attributes_node_modules_style_loader_dist_runtime_injectStylesIntoLinkTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_CoCreate_attributes_node_modules_file_loader_dist_cjs_js_CoCreate_select_css__WEBPACK_IMPORTED_MODULE_1__.default, options);\n\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS5hdHRyaWJ1dGVzLy4uL0NvQ3JlYXRlLXNlbGVjdC9zcmMvQ29DcmVhdGUtc2VsZWN0LmNzcz8zNzY0Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBK0c7QUFDL0csWUFBeUg7O0FBRXpILGVBQWU7O0FBRWY7O0FBRUEsYUFBYSw2SEFBRyxDQUFDLGtIQUFPOzs7O0FBSXhCLGlFQUFlLEUiLCJmaWxlIjoiLi4vQ29DcmVhdGUtc2VsZWN0L3NyYy9Db0NyZWF0ZS1zZWxlY3QuY3NzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGFwaSBmcm9tIFwiIS4uLy4uL0NvQ3JlYXRlLWF0dHJpYnV0ZXMvbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b0xpbmtUYWcuanNcIjtcbiAgICAgICAgICAgIGltcG9ydCBjb250ZW50IGZyb20gXCIhIS4uLy4uL0NvQ3JlYXRlLWF0dHJpYnV0ZXMvbm9kZV9tb2R1bGVzL2ZpbGUtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vQ29DcmVhdGUtc2VsZWN0LmNzc1wiO1xuXG52YXIgb3B0aW9ucyA9IHtcImluamVjdFR5cGVcIjpcImxpbmtUYWdcIn07XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgZGVmYXVsdCB7fSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../CoCreate-select/src/CoCreate-select.css\n')}},__webpack_module_cache__={},deferred;function __webpack_require__(Q){var F=__webpack_module_cache__[Q];if(void 0!==F)return F.exports;var B=__webpack_module_cache__[Q]={exports:{}};return __webpack_modules__[Q](B,B.exports,__webpack_require__),B.exports}__webpack_require__.m=__webpack_modules__,deferred=[],__webpack_require__.O=(Q,F,B,U)=>{if(!F){var t=1/0;for(l=0;l<deferred.length;l++){for(var[F,B,U]=deferred[l],e=!0,n=0;n<F.length;n++)(!1&U||t>=U)&&Object.keys(__webpack_require__.O).every((Q=>__webpack_require__.O[Q](F[n])))?F.splice(n--,1):(e=!1,U<t&&(t=U));e&&(deferred.splice(l--,1),Q=B())}return Q}U=U||0;for(var l=deferred.length;l>0&&deferred[l-1][2]>U;l--)deferred[l]=deferred[l-1];deferred[l]=[F,B,U]},__webpack_require__.n=Q=>{var F=Q&&Q.__esModule?()=>Q.default:()=>Q;return __webpack_require__.d(F,{a:F}),F},__webpack_require__.d=(Q,F)=>{for(var B in F)__webpack_require__.o(F,B)&&!__webpack_require__.o(Q,B)&&Object.defineProperty(Q,B,{enumerable:!0,get:F[B]})},__webpack_require__.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(Q){if("object"==typeof window)return window}}(),__webpack_require__.o=(Q,F)=>Object.prototype.hasOwnProperty.call(Q,F),__webpack_require__.r=Q=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})},(()=>{var Q;__webpack_require__.g.importScripts&&(Q=__webpack_require__.g.location+"");var F=__webpack_require__.g.document;if(!Q&&F&&(F.currentScript&&(Q=F.currentScript.src),!Q)){var B=F.getElementsByTagName("script");B.length&&(Q=B[B.length-1].src)}if(!Q)throw new Error("Automatic publicPath is not supported in this browser");Q=Q.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),__webpack_require__.p=Q})(),(()=>{var Q={"CoCreate-attributes":0};__webpack_require__.O.j=F=>0===Q[F];var F=(F,B)=>{var U,t,[e,n,l]=B,s=0;for(U in n)__webpack_require__.o(n,U)&&(__webpack_require__.m[U]=n[U]);for(l&&l(__webpack_require__),F&&F(B);s<e.length;s++)t=e[s],__webpack_require__.o(Q,t)&&Q[t]&&Q[t][0](),Q[e[s]]=0;__webpack_require__.O()},B=this.webpackChunkCoCreate_attributes=this.webpackChunkCoCreate_attributes||[];B.forEach(F.bind(null,0)),B.push=F.bind(null,B.push.bind(B))})();var __webpack_exports__=__webpack_require__.O(void 0,["vendors-node_modules_style-loader_dist_runtime_injectStylesIntoLinkTag_js-CoCreate-plugins_Co-85438a"],(()=>__webpack_require__("./src/index.js")));return __webpack_exports__=__webpack_require__.O(__webpack_exports__),__webpack_exports__=__webpack_exports__.default,__webpack_exports__})()}));
/*! For license information please see calculation-chunk0ffc363a7380d6b0b270.js.LICENSE.txt */
(this.webpackChunkCoCreate_attributes=this.webpackChunkCoCreate_attributes||[]).push([["calculation-chunk"],{"../CoCreate-calculation/src/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = void 0;\n\nvar _observer = _interopRequireDefault(__webpack_require__(/*! @cocreate/observer */ \"../CoCreate-observer/src/index.js\"));\n\nvar _utils = _interopRequireDefault(__webpack_require__(/*! @cocreate/utils */ \"../CoCreate-utils/src/index.js\"));\n\nvar _crdt = _interopRequireDefault(__webpack_require__(/*! @cocreate/crdt */ \"../CoCreate-crdt/src/index.js\"));\n\nvar _input = _interopRequireDefault(__webpack_require__(/*! @cocreate/input */ \"../CoCreate-input/src/index.js\"));\n\nvar _floatingLabel = _interopRequireDefault(__webpack_require__(/*! @cocreate/floating-label */ \"../CoCreate-floating-label/src/index.js\"));\n\nvar _htmltags = _interopRequireDefault(__webpack_require__(/*! @cocreate/htmltags */ \"../CoCreate-htmltags/src/index.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar CoCreateCalculation = {\n  init: function () {\n    this.initCalculationElements();\n  },\n  initCalculationElements: function (container) {\n    const mainContainer = container || document;\n\n    if (!mainContainer.querySelectorAll) {\n      return;\n    }\n\n    let calculationElements = mainContainer.querySelectorAll('[data-calculation]') || [];\n    calculationElements = Array.from(calculationElements);\n\n    if (mainContainer != document && mainContainer.hasAttribute('data-calculation')) {\n      calculationElements.push(mainContainer);\n    }\n\n    for (let i = 0; i < calculationElements.length; i++) {\n      if (_observer.default.getInitialized(calculationElements[i], \"calculation_init\")) {\n        return;\n      }\n\n      _observer.default.setInitialized(calculationElements[i], \"calculation_init\");\n\n      this.initCalculationElement(calculationElements[i]);\n    }\n  },\n  initCalculationElement: function (ele) {\n    const self = this;\n    let data_calculation = ele.getAttribute('data-calculation');\n    let ids = this.getIds(data_calculation);\n    let selectors = [];\n\n    for (let i = 0; i < ids.length; i++) {\n      let id = ids[i];\n      let input = null;\n\n      try {\n        input = document.querySelector(id);\n      } catch (error) {\n        input = null;\n      }\n\n      if (input) {\n        input.addEventListener('input', function () {\n          self.setCalcationResult(ele);\n        });\n        input.addEventListener('CoCreateInput-setvalue', function () {// self.setCalcationResult(ele)\n        });\n\n        if (input.hasAttribute('data-calculation')) {\n          input.addEventListener('changedCalcValue', function (e) {\n            self.setCalcationResult(ele);\n          });\n        }\n      } else {\n        //. add event of special operator\n        let selector = this.__getOperatorSelector(id);\n\n        if (selector) {\n          selectors.push(selector);\n        }\n      }\n    }\n\n    if (selectors.length > 0) {\n      document.addEventListener('changedCalcValue', function (e) {\n        let isMatched = false;\n        selectors.forEach(selector => {\n          if (e.target.matches(selector)) {\n            isMatched = true;\n            return;\n          }\n        });\n\n        if (isMatched) {\n          self.setCalcationResult(ele);\n        }\n      });\n    }\n  },\n\n  __getOperatorSelector(value) {\n    let result = /SUM\\(\\s*([\\w\\W]+)\\s*\\)/g.exec(value);\n\n    if (result && result[1]) {\n      return result[1].trim();\n    }\n\n    return null;\n  },\n\n  calculationSpecialOperator(value) {\n    let self = this;\n    let sum = null;\n    let result = /SUM\\(\\s*([\\w\\W]+)\\s*\\)/g.exec(value);\n\n    if (result) {\n      let selector = result[1].trim();\n\n      if (value.trim().indexOf('SUM') == 0) {\n        let elements = document.querySelectorAll(selector);\n        sum = 0;\n        elements.forEach(el => {\n          let tmpValue = self.__getElementValue(el);\n\n          tmpValue = Number(tmpValue);\n\n          if (!Number.isNaN(tmpValue)) {\n            sum += tmpValue;\n          }\n        });\n      }\n    }\n\n    return sum;\n  },\n\n  setCalcationResult: function (ele) {\n    let data_calculation = ele.getAttribute('data-calculation');\n    let calString = this.replaceIdWithValue(data_calculation);\n\n    if (calString) {\n      let result = calculation(calString);\n\n      if (ele.tagName == 'INPUT' || ele.tagName == 'TEXTAREA' || ele.tagName == 'SELECT') {\n        ele.value = result;\n\n        if (_utils.default.isUsageY(ele)) {\n          ele.value = \"\";\n\n          _crdt.default.replaceText({\n            collection: ele.getAttribute('data-collection'),\n            document_id: ele.getAttribute('data-document_id'),\n            name: ele.getAttribute('name'),\n            value: result.toString()\n          });\n        } else {\n          _input.default.save(ele);\n        }\n\n        if (_floatingLabel.default) {\n          _floatingLabel.default.update(ele, ele.value);\n        }\n      } else {\n        ele.innerHTML = result;\n\n        _htmltags.default.saveContent(ele);\n      } //. set custom event\n\n\n      var event = new CustomEvent('changedCalcValue', {\n        bubbles: true\n      });\n      ele.dispatchEvent(event);\n    }\n  },\n  __getElementValue: function (element) {\n    if (element.tagName == 'INPUT' || element.tagName == 'TEXTAREA' || element.tagName == 'SELECT') {\n      return element.value;\n    } else {\n      return element.innerHTML;\n    }\n  },\n  replaceIdWithValue: function (data_calculation) {\n    let ids = this.getIds(data_calculation);\n\n    for (let i = 0; i < ids.length; i++) {\n      let id = ids[i];\n      let input = null;\n\n      try {\n        input = document.querySelector(id);\n      } catch (error) {\n        input = null;\n      }\n\n      let value = null;\n\n      if (input) {\n        value = Number(this.__getElementValue(input));\n      } else {\n        value = this.calculationSpecialOperator(id);\n      }\n\n      if (value != null && !Number.isNaN(value)) {\n        data_calculation = data_calculation.replaceAll('{' + id + '}', value);\n      }\n    }\n\n    return data_calculation;\n  },\n  getIds: function (string) {\n    let tmp = string;\n    let ids = [];\n    if (!tmp) return ids;\n\n    while (tmp.length > 0) {\n      let firstIndex = tmp.indexOf('{');\n      let secondIndex = tmp.indexOf('}', firstIndex);\n\n      if (firstIndex > -1 && secondIndex > -1) {\n        let id = tmp.substring(firstIndex + 1, secondIndex);\n        if (ids.indexOf(id) == -1) ids.push(id);\n        tmp = tmp.substring(secondIndex + 1);\n      } else {\n        return ids;\n      }\n    }\n\n    return ids;\n  }\n};\n\nfunction calculation(string) {\n  let index1, index2, index3, index4;\n  index1 = string.indexOf('+');\n  index2 = string.indexOf('-');\n  index3 = string.indexOf('*');\n  index4 = string.indexOf('/');\n\n  if (index1 > -1) {\n    let lStr = string.substr(0, index1);\n    let rStr = string.substr(index1 + 1);\n    return calculation(lStr) + calculation(rStr);\n  } else if (index2 > -1) {\n    let lStr = string.substr(0, index2);\n    let rStr = string.substr(index2 + 1);\n    return calculation(lStr) - calculation(rStr);\n  } else if (index3 > -1) {\n    let lStr = string.substr(0, index3);\n    let rStr = string.substr(index3 + 1);\n    return calculation(lStr) * calculation(rStr);\n  } else if (index4 > -1) {\n    let lStr = string.substr(0, index4);\n    let rStr = string.substr(index4 + 1);\n    let lValue = calculation(lStr);\n    let rValue = calculation(rStr);\n\n    if (rValue == 0) {\n      return 0;\n    } else {\n      return lValue / rValue;\n    }\n  } else {\n    let result = Number(string);\n\n    if (isNaN(result)) {\n      return 0;\n    } else {\n      return result;\n    }\n  }\n}\n\nCoCreateCalculation.init();\n\n_observer.default.init({\n  name: 'CoCreateCalculationChangeValue',\n  observe: ['attributes'],\n  attributes: ['value'],\n  include: 'input',\n  callback: function (mutation) {\n    console.log('-----------------------------------------------------');\n    console.log(mutation.target);\n  }\n});\n\n_observer.default.init({\n  name: 'CoCreateCalculationInit',\n  observe: ['subtree', 'childList'],\n  include: '[data-calculation]',\n  callback: function (mutation) {\n    CoCreateCalculation.initCalculationElements(mutation.target);\n  }\n});\n\nvar _default = CoCreateCalculation;\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../CoCreate-calculation/src/index.js\n")},"../CoCreate-floating-label/src/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = void 0;\n\nvar _observer = _interopRequireDefault(__webpack_require__(/*! @cocreate/observer */ \"../CoCreate-observer/src/index.js\"));\n\nvar _select = _interopRequireDefault(__webpack_require__(/*! @cocreate/select */ \"../CoCreate-select/src/index.js\"));\n\n__webpack_require__(/*! ./CoCreate-floating-label.css */ \"../CoCreate-floating-label/src/CoCreate-floating-label.css\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// 'use restrict'\nconst CoCreateFloatingLabel = {\n  className: 'floating-label_field',\n  init: function () {\n    this.initElement();\n  },\n  initElement: function (container) {\n    const self = this;\n    let mainContainer = container || document;\n\n    if (!mainContainer.querySelectorAll) {\n      return;\n    }\n\n    let elements = mainContainer.querySelectorAll('.floating-label');\n\n    if (elements.length == 0 && mainContainer.classList && mainContainer.classList.contains('floating-label')) {\n      elements = [mainContainer];\n    }\n\n    elements.forEach(el => {\n      self.render(el);\n\n      self.__initEvents(el);\n    });\n  },\n  render: function (node) {\n    if (node.parentNode && !node.parentNode.classList.contains(this.className)) {\n      const placeholder = node.getAttribute('placeholder');\n      const wrapper = document.createElement('div');\n      node.setAttribute(\"placeholder\", \"\");\n      wrapper.className = this.className;\n\n      this.__wrap(node, wrapper, placeholder);\n\n      this.update(node);\n    }\n  },\n  update: function (node, value) {\n    if (node.classList.contains('floating-label') && node.parentNode.classList.contains('floating-label_field')) {\n      const parent = node.parentNode;\n      const active = node.hasAttribute('active');\n\n      if (node.value || value || active) {\n        node.classList.add(\"text_color\");\n        parent.classList.add('active');\n      } else {\n        node.classList.remove(\"text_color\");\n        parent.classList.remove('active');\n      }\n    }\n  },\n  __wrap: function (el, wrapper, placeholder) {\n    el.parentNode.insertBefore(wrapper, el);\n    var div1 = document.createElement('div');\n    div1.className = \"floating-label_outline\";\n    var div2 = document.createElement('div');\n    div2.className = \"floating-label_leading\";\n    var div3 = document.createElement('div');\n    div3.className = \"floating-label_notch\";\n    var label = document.createElement('label');\n    label.className = \"floating-label_label\";\n    label.innerHTML = placeholder;\n    var div4 = document.createElement('div');\n    div4.className = \"floating-label_trailing\";\n    div1.appendChild(div2);\n    div3.appendChild(label);\n    div1.appendChild(div3);\n    div1.appendChild(div4);\n    wrapper.appendChild(div1);\n    wrapper.appendChild(el);\n  },\n  __initEvents: function (node) {\n    node.addEventListener('focus', event => {\n      const inputContent = node.value;\n      const tag_name = node.tagName.toLowerCase();\n\n      if (inputContent == '' || tag_name == 'select') {\n        node.classList.add(\"text_color\");\n        parent = node.closest(\"div\");\n        parent.classList.add(\"active\");\n      }\n    });\n    node.addEventListener('blur', event => {\n      const inputContent = node.value;\n      const active = node.hasAttribute('active');\n\n      if (inputContent == '' && !active) {\n        node.classList.remove(\"text_color\");\n        parent = node.closest(\"div\");\n        parent.classList.remove(\"active\");\n      }\n    });\n    node.addEventListener('CoCreateSelect-open', function (e) {\n      let parent = this.parentNode;\n      parent.classList.add('active');\n    });\n    node.addEventListener('CoCreateSelect-close', function (e) {\n      if (!_select.default) return;\n\n      let value = _select.default.getValue(this);\n\n      const active = this.hasAttribute('active');\n      if (!active && (!value || value.length == 0)) this.parentNode.classList.remove('active');\n    });\n    node.addEventListener('selectedValue', function (e) {\n      if (!_select.default) return;\n\n      let value = _select.default.getValue(this);\n\n      if (value && value.length > 0) {\n        this.parentNode.classList.add('active');\n      } else {\n        this.parentNode.classList.remove('active');\n      }\n    });\n  }\n};\nCoCreateFloatingLabel.init();\n\n_observer.default.init({\n  name: 'CoCreateFloatingLabelInit',\n  observe: ['subtree', 'childList'],\n  include: '.floating-label',\n  callback: function (mutation) {\n    // console.log(mutation)\n    CoCreateFloatingLabel.initElement(mutation.target);\n  }\n});\n\nvar _default = CoCreateFloatingLabel;\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../CoCreate-floating-label/src/index.js\n")},"../CoCreate-htmltags/src/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = void 0;\n\nvar _observer = _interopRequireDefault(__webpack_require__(/*! @cocreate/observer */ \"../CoCreate-observer/src/index.js\"));\n\nvar _utils = _interopRequireDefault(__webpack_require__(/*! @cocreate/utils */ \"../CoCreate-utils/src/index.js\"));\n\nvar _crud = _interopRequireDefault(__webpack_require__(/*! @cocreate/crud */ \"../CoCreate-crud/src/index.js\"));\n\nvar _utilsCrud = _interopRequireDefault(__webpack_require__(/*! @cocreate/crud/src/utils.crud.js */ \"../CoCreate-crud/src/utils.crud.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst CoCreateHtmlTags = {\n  selector: \"h1, h2, h3, h4, h5, h6, p, i, q, a, b, li, span, code, head, div, div.domEditor, iframe, body, img, html\",\n  init: function () {\n    this.__initAttribute();\n\n    this.__initSocket();\n\n    this.__initEvents();\n\n    this.initElement(document);\n  },\n  initElement: function (element) {\n    // if (!element || !element.getAttribute) {\n    // \treturn;\n    // }\n    const requests = this.__getReqeust(element);\n\n    if (requests && requests.length > 0) {\n      requests.forEach(req => {\n        _crud.default.readDocument({\n          collection: req['collection'],\n          document_id: req['document_id'],\n          metadata: req['metadata']\n        });\n      });\n    }\n  },\n  saveContent: function (el) {\n    const collection = el.getAttribute('data-collection');\n    const document_id = el.getAttribute('data-document_id');\n    const name = el.getAttribute('name');\n    let save_value = '';\n\n    if (el.tagName === 'IFRAME') {\n      save_value = el.srcdoc;\n    } else {\n      save_value = el.innerHTML;\n    }\n\n    _crud.default.updateDocument({\n      collection,\n      document_id,\n      upsert: true,\n      broadcast_sender: false,\n      data: {\n        [name]: save_value\n      },\n      broadcast: false\n    });\n  },\n  save: function (el, broadcast, broadcast_sender) {\n    if (typeof el == \"object\") {\n      const event = new CustomEvent('changed-element', {});\n      el.dispatchEvent(event);\n    }\n\n    if (!el.classList.contains('domEditor')) {\n      return;\n    } // if (utils.isRealTime(el) || isSubmit) {\n\n\n    const collection = el.getAttribute('data-collection');\n    const document_id = el.getAttribute('data-document_id');\n    const name = el.getAttribute('name');\n    let el_broadcast = el.getAttribute('data-broadcast') || \"true\";\n    let namespace = el.getAttribute('data-namespace') || '';\n    let room = el.getAttribute('data-room') || '';\n    el_broadcast = el_broadcast === \"true\" ? true : false;\n\n    if (!broadcast) {\n      broadcast = el_broadcast;\n    }\n\n    let save_value = '';\n\n    if (el.tagName === 'IFRAME') {\n      save_value = el.srcdoc;\n    } else {\n      save_value = el.innerHTML;\n    }\n\n    _crud.default.updateDocument({\n      namespace,\n      room,\n      collection,\n      document_id,\n      upsert: true,\n      broadcast_sender,\n      data: {\n        [name]: save_value\n      },\n      broadcast: broadcast\n    }); // }\n\n  },\n  render: function (data, isUpdate) {\n    const tags_selector = this.__addAttributeSelectorTags(this.selector);\n\n    let elements = document.querySelectorAll(tags_selector);\n    let isRendered = false;\n    let isRenderedIframe = false;\n    const self = this;\n\n    let encodeData = _utilsCrud.default.encodeObject(data.data);\n\n    elements.forEach(el => {\n      const collection = el.getAttribute('data-collection');\n      const id = el.getAttribute('data-document_id');\n      const name = el.getAttribute('name');\n\n      const readValue = _utils.default.isReadValue(el);\n\n      const metadata = data['metadata'] || {};\n      const request_id = el.getAttribute('data-request_id');\n\n      const updateValue = _utils.default.isUpdateValue(el);\n\n      if (!readValue) {\n        return;\n      }\n\n      if (isUpdate && !updateValue) {\n        return;\n      }\n\n      if (request_id && data['metadata'] && data['metadata']['request_id'] !== request_id) {\n        return;\n      }\n\n      if (data['collection'] == collection && data['document_id'] == id && !el.isContentEditable) {\n        // const value = self.__getValueFromJonDeep(data.data, name)\n        const value = encodeData[name];\n        if (value === null || value === undefined) return;\n\n        if (el.tagName === 'IMG') {\n          el.src = value;\n        } else if (el.tagName === 'IFRAME') {\n          el.srcdoc = value;\n          let iframe = el;\n          isRenderedIframe = true;\n\n          el.onload = function (e) {\n            iframe.removeAttribute('srcdoc');\n          };\n        } else if (el.tagName === 'DIV') {\n          if (el.hasAttribute(\"value\")) {\n            el.setAttribute(\"value\", value);\n          }\n\n          if (el.classList.contains('domEditor')) {\n            if (el.getAttribute('data-domEditor') == \"replace\") {\n              let newElement = document.createElement(\"div\");\n              newElement.innerHTML = value;\n              let parentNode = el.parentNode;\n\n              if (parentNode) {\n                if (newElement.children[0]) {\n                  parentNode.replaceChild(newElement.children[0], el);\n                } else {\n                  parentNode.replaceChild(newElement, el);\n                }\n              }\n            } else {\n              el.innerHTML = value;\n            }\n          }\n        } else {\n          el.innerHTML = value;\n\n          if (el.hasAttribute(\"value\")) {\n            el.setAttribute(\"value\", value);\n          }\n        }\n\n        if (el.tagName == 'HEAD' || el.tagName == 'BODY') {\n          el.removeAttribute('data-collection');\n          el.removeAttribute('data-document_id');\n          el.removeAttribute('data-pass_id');\n          var scripts = el.querySelectorAll('script');\n\n          for (var k = 0; k < scripts.length; k++) {\n            var tmp = document.createElement('script');\n            tmp.type = \"text/javascript\";\n            var src = scripts[k].getAttribute('src');\n            var innerHtml = scripts[k].innerHTML;\n            if (innerHtml != \"\") tmp.innerHTML = innerHtml;\n            if (src) tmp.src = src;\n            el.appendChild(tmp);\n            scripts[k].remove();\n          }\n        }\n\n        isRendered = true;\n      }\n    });\n\n    if (isRendered) {\n      //. rendered event\n      const event = new CustomEvent('CoCreateHtmlTags-rendered', {\n        eventType: 'rendered',\n        detail: {\n          data: data\n        }\n      });\n      document.dispatchEvent(event);\n    }\n\n    if (isRenderedIframe) {\n      const iframeEvent = new CustomEvent('CoCreateHtmlTags-iframe-rendered', {\n        eventType: 'rendered',\n        detail: {\n          data: data\n        }\n      });\n      document.dispatchEvent(iframeEvent);\n    }\n  },\n  __getReqeust: function (container) {\n    let fetch_container = container || document;\n\n    if (!fetch_container.querySelectorAll) {\n      return;\n    } // const tags_selector = this.__addAttributeSelectorTags('h1, h2, h3, h4, h5, h6, p, i, q, a, b, li, span, code, div.domEditor, img, body, html')\n\n\n    const tags_selector = this.__addAttributeSelectorTags(this.selector);\n\n    let elements = fetch_container.querySelectorAll(tags_selector);\n    let requestData = [];\n\n    if (elements.length == 0 && fetch_container != document && fetch_container.hasAttribute('data-document_id')) {\n      elements = [fetch_container];\n    }\n\n    elements.forEach(el => {\n      if (_observer.default.getInitialized(el, \"htmltags\")) {\n        return;\n      }\n\n      const collection = el.getAttribute('data-collection') || \"module_activity\";\n      const document_id = el.getAttribute('data-document_id');\n\n      const readValue = _utils.default.isReadValue(el);\n\n      const request_id = el.getAttribute('data-request_id');\n\n      if (readValue && _utils.default.checkValue(document_id) && request_id) {\n        _observer.default.setInitialized(el, \"htmltags\");\n\n        requestData.push({\n          collection: collection,\n          document_id: document_id,\n          metadata: {\n            request_id: request_id\n          }\n        });\n        return;\n      }\n\n      if (readValue && _utils.default.checkValue(document_id) && !requestData.some(d => d['collection'] === collection && d['document_id'] === document_id)) {\n        requestData.push({\n          'collection': collection,\n          'document_id': document_id\n        });\n      }\n    });\n    return requestData;\n  },\n  __initAttribute: function (container) {\n    const mainContainer = container || document;\n\n    if (!mainContainer.querySelectorAll) {\n      return;\n    } // const tags_selector = this.__addAttributeSelectorTags('h1, h2, h3, h4, h5, h6, p, i, q, a, b, li, span, code, div.domEditor, img, body, html')\n\n\n    const tags_selector = this.__addAttributeSelectorTags(this.selector);\n\n    let elements = mainContainer.querySelectorAll(tags_selector);\n\n    if (elements.length == 0 && mainContainer != document && mainContainer.hasAttribute('data-document_id')) {\n      elements = [mainContainer];\n    }\n\n    elements.forEach(el => {\n      const collection = el.getAttribute('data-collection');\n      const id = el.getAttribute('data-document_id');\n      const name = el.getAttribute('name');\n\n      if (collection && id && name && el.getAttribute('data-realtime') == null) {\n        el.setAttribute('data-realtime', true);\n      }\n    });\n  },\n  __initSocket: function () {\n    const self = this;\n\n    _crud.default.listen('updateDocument', function (data) {\n      self.render(data, true);\n    });\n\n    _crud.default.listen('readDocument', function (data) {\n      self.render(data);\n    }); //  socket.listen('connect', function(data) {\n    // const requests = self.__getReqeust()\n    // if (requests && requests.length > 0) {\n    // \trequests.forEach((req) => {\n    // \t\tcrud.readDocument({\n    // \t\t\tcollection: req['collection'],\n    // \t\t\tdocument_id: req['document_id']\n    // \t\t})\n    // \t})\n    // }\n    //  })\n\n  },\n  __initEvents: function () {\n    const self = this;\n    document.addEventListener('change-content', function (event) {\n      const {\n        element,\n        broadcast,\n        broadcast_sender\n      } = event.detail;\n\n      if (!element) {\n        return;\n      }\n\n      const domEl = self.findElementByChild(element);\n\n      if (domEl) {\n        self.save(domEl, broadcast, broadcast_sender);\n      }\n    });\n  },\n  __addAttributeSelectorTags: function (str_tags) {\n    let tags = str_tags.trim().split(/\\s*,\\s*/).map(function (tag) {\n      return tag + \"[data-collection][data-document_id][name]\";\n    });\n    return tags.join(\", \");\n  },\n  findElementByChild: function (element) {\n    return _utils.default.getParentFromElement(element, 'domEditor');\n  },\n  __getValueFromJonDeep: function (json, path) {\n    try {\n      if (typeof json == 'undefined') return false;\n      let subpath = path.split('.');\n      let find = subpath.shift();\n\n      if (subpath.length > 0) {\n        return this.__getValueFromJonDeep(json[find], subpath.join('.'));\n      }\n\n      return json[find];\n    } catch (error) {\n      console.log(error);\n      return false;\n    }\n  }\n};\nCoCreateHtmlTags.init(); // CoCreateInit.register('CoCreateHtmlTags', CoCreateHtmlTags, CoCreateHtmlTags.initElement);\n\n_observer.default.init({\n  name: 'CoCreateHtmlTags',\n  observe: ['subtree', 'childList'],\n  include: '[data-collection][data-document_id][name]',\n  callback: function (mutation) {\n    CoCreateHtmlTags.initElement(mutation.target);\n  }\n}); // if (window.parent !== window) {\n//   console.log(\"dispatch htmlTags rendered\");\n//   window.addEventListener(\"load\", () => {\n//     window.parent.dispatchEvent(new Event(\"CoCreateHtmlTags-rendered\"));\n//   });\n// }\n\n\nconsole.log(\"dispatch htmlTags rendered\");\nif (window.document.readyState != 'complete') window.addEventListener(\"load\", () => {\n  window.parent.dispatchEvent(new Event(\"CoCreateHtmlTags-rendered\"));\n});else window.parent.dispatchEvent(new Event(\"CoCreateHtmlTags-rendered\"));\nvar _default = CoCreateHtmlTags;\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../CoCreate-htmltags/src/index.js\n")},"./node_modules/file-loader/dist/cjs.js!../CoCreate-floating-label/src/CoCreate-floating-label.css":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (__webpack_require__.p + "4f154bc545d869e8bebd258cb4bd438c.css");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS5hdHRyaWJ1dGVzLy4uL0NvQ3JlYXRlLWZsb2F0aW5nLWxhYmVsL3NyYy9Db0NyZWF0ZS1mbG9hdGluZy1sYWJlbC5jc3M/MTc3YiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsaUVBQWUscUJBQXVCLHlDQUF5QyIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9maWxlLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi9Db0NyZWF0ZS1mbG9hdGluZy1sYWJlbC9zcmMvQ29DcmVhdGUtZmxvYXRpbmctbGFiZWwuY3NzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcIjRmMTU0YmM1NDVkODY5ZThiZWJkMjU4Y2I0YmQ0MzhjLmNzc1wiOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/file-loader/dist/cjs.js!../CoCreate-floating-label/src/CoCreate-floating-label.css\n')},"../CoCreate-floating-label/src/CoCreate-floating-label.css":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _CoCreate_attributes_node_modules_style_loader_dist_runtime_injectStylesIntoLinkTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../CoCreate-attributes/node_modules/style-loader/dist/runtime/injectStylesIntoLinkTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoLinkTag.js");\n/* harmony import */ var _CoCreate_attributes_node_modules_style_loader_dist_runtime_injectStylesIntoLinkTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_CoCreate_attributes_node_modules_style_loader_dist_runtime_injectStylesIntoLinkTag_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _CoCreate_attributes_node_modules_file_loader_dist_cjs_js_CoCreate_floating_label_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !!../../CoCreate-attributes/node_modules/file-loader/dist/cjs.js!./CoCreate-floating-label.css */ "./node_modules/file-loader/dist/cjs.js!../CoCreate-floating-label/src/CoCreate-floating-label.css");\n\n            \n\nvar options = {"injectType":"linkTag"};\n\noptions.insert = "head";\n\nvar update = _CoCreate_attributes_node_modules_style_loader_dist_runtime_injectStylesIntoLinkTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_CoCreate_attributes_node_modules_file_loader_dist_cjs_js_CoCreate_floating_label_css__WEBPACK_IMPORTED_MODULE_1__.default, options);\n\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS5hdHRyaWJ1dGVzLy4uL0NvQ3JlYXRlLWZsb2F0aW5nLWxhYmVsL3NyYy9Db0NyZWF0ZS1mbG9hdGluZy1sYWJlbC5jc3M/NjJkNCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQStHO0FBQy9HLFlBQWlJOztBQUVqSSxlQUFlOztBQUVmOztBQUVBLGFBQWEsNkhBQUcsQ0FBQywwSEFBTzs7OztBQUl4QixpRUFBZSxFIiwiZmlsZSI6Ii4uL0NvQ3JlYXRlLWZsb2F0aW5nLWxhYmVsL3NyYy9Db0NyZWF0ZS1mbG9hdGluZy1sYWJlbC5jc3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgYXBpIGZyb20gXCIhLi4vLi4vQ29DcmVhdGUtYXR0cmlidXRlcy9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvTGlua1RhZy5qc1wiO1xuICAgICAgICAgICAgaW1wb3J0IGNvbnRlbnQgZnJvbSBcIiEhLi4vLi4vQ29DcmVhdGUtYXR0cmlidXRlcy9ub2RlX21vZHVsZXMvZmlsZS1sb2FkZXIvZGlzdC9janMuanMhLi9Db0NyZWF0ZS1mbG9hdGluZy1sYWJlbC5jc3NcIjtcblxudmFyIG9wdGlvbnMgPSB7XCJpbmplY3RUeXBlXCI6XCJsaW5rVGFnXCJ9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xuXG52YXIgdXBkYXRlID0gYXBpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0IGRlZmF1bHQge30iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../CoCreate-floating-label/src/CoCreate-floating-label.css\n')}}]);